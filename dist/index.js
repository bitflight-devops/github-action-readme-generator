#!/usr/bin/env node
"use strict";var fu=Object.create;var Z=Object.defineProperty;var du=Object.getOwnPropertyDescriptor;var Fu=Object.getOwnPropertyNames;var Au=Object.getPrototypeOf,Cu=Object.prototype.hasOwnProperty;var Eu=(t,u,r,n)=>{if(u&&typeof u=="object"||typeof u=="function")for(let e of Fu(u))!Cu.call(t,e)&&e!==r&&Z(t,e,{get:()=>u[e],enumerable:!(n=du(u,e))||n.enumerable});return t};var F=(t,u,r)=>(r=t!=null?fu(Au(t)):{},Eu(u||!t||!t.__esModule?Z(r,"default",{value:t,enumerable:!0}):r,t));var S=F(require("node:fs")),T=F(require("node:path")),au=F(require("js-yaml")),cu=F(require("nconf"));var uu=F(require("node:fs")),$=F(require("js-yaml"));var f=F(require("@actions/core")),X=F(require("chalk")),E=F(require("node-emoji")),mu=0,Q=1,hu=2,w=3,P=5,Bu=6,d=X.default,U=class t{static ingroup_setting={};static indentWidth=5;static isDebug(){return f.isDebug()||!!process.env.DEBUG}name;constructor(u){this.name=u?.trim(),this.ingroup=!1}get ingroup(){return t.ingroup_setting[this.name]??!1}set ingroup(u){t.ingroup_setting[this.name]=u}async logStep(u,r,n,e=mu){r.length>t.indentWidth&&(t.indentWidth=r.length);let i;switch(r){case"START":{i=d.yellowBright(`${n}`);break}case"INFO":{i=d.green(`${n}`);break}case"WARN":{i=d.yellow(`${n}`);break}case"SUCCESS":{i=d.greenBright(`${n}`);break}case"FAILURE":{i=d.redBright(`${n}`);break}case"ERROR":{i=d.redBright(`${n}`);break}case"#####":{i=d.cyan(`${n}`);break}default:{i=d.white(`${n}`);break}}let o;switch(this.ingroup&&!process.env.GITHUB_ACTIONS?o=`${[...Array.from({length:t.indentWidth}).fill(" ")].join("")}   ${u}: ${this.name} > ${i}`:o=`[${[r,...Array.from({length:t.indentWidth-r.length}).fill(" ")].join("")}] ${u}: ${i}`,r){case"START":{o=d.yellowBright(`${o}`);break}case"SUCCESS":{o=d.whiteBright(`${o}`);break}case"FAILURE":{o=d.red(`${o}`);break}case"ERROR":{o=d.red(`${o}`);break}default:break}let c=e===w||e===P;if(process.env.GITHUB_ACTIONS)switch(e){case Q:{f.startGroup(o);break}case hu:{f.endGroup();break}case w:{f.error(d.bgRedBright(o));break}case P:{f.setFailed(d.bgRedBright(o));break}default:f.info(o)}else c?f.error(o):f.info(o)}debug(u=""){t.isDebug()&&u!==""&&this.logStep("\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F","DEBUG",u)}start(u=""){let r=u===""?`Starting ${this.name}...`:u;this.logStep(E.get("rocket")??"","START",r,Q)}info(u=""){this.logStep(E.get("sparkles")??"","INFO",u)}warn(u=""){this.logStep(E.get("anger")??"","WARN",u)}success(u="",r=!0){let n=u===""?`Completed ${this.name}.`:u;r&&(this.ingroup=!1,process.env.GITHUB_ACTIONS&&f.endGroup()),this.logStep(E.get("white_check_mark")??"","SUCCESS",n)}fail(u="",r=!0){let n=u===""?`Failed ${this.name}.`:u;r&&(this.ingroup=!1,process.env.GITHUB_ACTIONS&&f.endGroup());let e=process.env.GITHUB_ACTIONS?P:w;this.logStep(E.get("x")??"","FAILURE",n,e)}error(u=""){this.logStep(E.get("x")??"","ERROR",u,w)}title(u=""){this.logStep("\u{1F4D3}","#####",u,Bu)}},a=U;var h=class{name;description;branding;inputs;outputs;runs;constructor(u){let r=new a("action"),n=null;try{r.debug(`loading action.yml from ${u}`),n=$.load(uu.readFileSync(u,"utf8")),r.success("loaded configuration successfully")}catch{r.error(`failed to load ${u}`)}(typeof n!="object"||n===null)&&r.error("action.yml file read in isn't an object (no yaml in it)");let e=n;this.name=e.name,this.description=e.description,this.branding=e.branding,this.inputs=e.inputs,this.outputs=e.outputs,this.runs=e.runs}stringify(){try{return $.dump(this,{skipInvalid:!0})}catch{return new a("action:stringify").error("failed to stringify action.yml"),""}}};var B=F(require("node:fs"));var bu=/(?:[\dA-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])\S*/g;function yu(t){if(t){if(typeof t!="string")throw new TypeError(`Invalid argument type provided to titlecase(): ${typeof t}`);return t.replaceAll(bu,u=>u[0]?u[0].toUpperCase()+u.slice(1).toLowerCase():u)}}function eu(t,u){let r=new a("repositoryFinder"),e={};if(t)return[e.owner,e.repo]=t.split("/"),r.info(`repositoryFinder using input ${t} and returns ${JSON.stringify(e)}`),e;if(process.env.GITHUB_REPOSITORY)return[e.owner,e.repo]=process.env.GITHUB_REPOSITORY.split("/"),r.info(`repositoryFinder using GITHUB_REPOSITORY ${process.env.GITHUB_REPOSITORY} and returns ${JSON.stringify(e)}`),e;if(u)return e.owner=u.repo.owner,e.repo=u.repo.repo,r.info(`repositoryFinder using GITHUB_REPOSITORY ${process.env.GITHUB_REPOSITORY} and returns ${JSON.stringify(e)}`),e;if(process.env.INPUT_OWNER&&process.env.INPUT_REPO)return e.owner=process.env.INPUT_OWNER,e.repo=process.env.INPUT_REPO,e;try{let i=B.readFileSync(".git/config","utf8"),o=/url( )?=( )?.*github\.com[/:](?<owner>.*)\/(?<repo>.*)\.git/,c=i.match(o);return c!==null&&(r.debug(JSON.stringify(c.groups)),e.owner=c.groups?.owner??"",e.repo=c.groups?.repo??""),e}catch(i){r.debug(`Couldn't find any owner or repo: ${i}`)}return e}function k(t){if(!t)return"";let u=yu(t.trim().replace(/^[*_~]+/,"").replace(/[*_~]+$/,""));return u?`**${u}**`:""}function x(t){return t?`\`**${t.trim().replace(/^\*+/,"").replace(/\*+$/,"")}**\``:""}function tu(t){let u="",r=new a("getCurrentVersionString");if(t.config.get("versioning:enabled")){r.debug("version string in generated example is enabled");let n=t.config.get("versioning:override"),e=process.env.npm_package_version;if(r.debug(`version string in env:npm_package_version is ${e??"not found"}`),!e){r.debug("version string in env:npm_package_version is not found, trying to use git");try{B.accessSync("package.json"),e=JSON.parse(B.readFileSync("package.json","utf8")).version}catch(i){r.debug(`package.json not found. ${i}`)}r.debug(`version string in package.json:version is ${e??"not found"}`)}u=n&&n.length>0?n:e??"0.0.0",u&&!u.startsWith(t.config.get("versioning:prefix"))&&(u=`${t.config.get("versioning:prefix")}${u}`)}else u=t.config.get("versioning:branch");return r.debug(`version to use in generated example is ${u}`),u}var I=F(require("node:fs")),iu=require("node:os");var N=require("prettier");async function ru(t,u){return(0,N.format)(t,{semi:!1,parser:"markdown",embeddedLanguageFormatting:"auto",...u?{filepath:u}:{}})}async function nu(t,u,r){if(!t)return u??[];let n=r?t.replace(r,""):t,e=await(0,N.format)(`${r??""}${n}`,{semi:!1,parser:"yaml",proseWrap:"always"});return u.push(...e.split(`
`)),u}var vu="<!-- start %s -->",wu="<!-- end %s -->",b=class{filePath;fileContent;constructor(u){this.filePath=u,this.fileContent=I.readFileSync(u,"utf8")}updateSection(u,r){let n=new a(u),e=Array.isArray(r)?r.join(iu.EOL):r;n.info(`Looking for the ${u} token in ${this.filePath}`);let i=vu.replace("%s",u),o=wu.replace("%s",u),c=this.fileContent.indexOf(i),l=this.fileContent.indexOf(o);if(c!==-1&&l!==-1){let g=this.fileContent.slice(0,Math.max(0,c+i.length)),s=this.fileContent.slice(l);this.fileContent=`${g}
${e}
${s}`}else if(l<c)throw new Error(`Start token for section '${u} must appear before end token`)}async dumpToFile(){let u=await ru(this.fileContent);return I.writeFileSync(this.filePath,u,"utf8")}};function ou(){return process.env.GITHUB_WORKSPACE??process.env.INIT_CWD??process.cwd()}var A=new a("inputs");process.chdir(ou());var su=process.env.GITHUB_EVENT_PATH??"",gu=null;try{gu=JSON.parse(S.readFileSync(su,"utf8"))}catch{A.debug(`GITHUB_EVENT_PATH not found: ${su}`)}var Du=".ghadocs.json",H="paths:action",j="paths:readme",$u=["save",H,j,"show_logo","versioning:enabled","versioning:override","versioning:prefix","versioning:branch","owner","repo","title_prefix","pretty","include_github_version_badge"],y=class{config;sections;readmePath;configPath;action;readmeEditor;constructor(){this.configPath=T.resolve(Du),this.config=new cu.Provider;let u=eu(null,gu);process.env.GITHUB_ACTION&&A.info("running in GitHub action"),S.existsSync(this.configPath)?A.info(`config file found: ${this.configPath}`):A.error(`config file not found: ${this.configPath}`),this.config.env({lowerCase:!0,parseValues:!0,match:/^INPUT_/,transform:n=>{if(n.key.startsWith("input_")){let e={key:n.key,value:n.value},i=n.key.replace(/^(INPUT|input)_/,"");switch(i){case"readme":{e.key=j;break}case"action":{e.key=H;break}case"versioning_enabled":{e.key="versioning:enabled";break}case"version_prefix":{e.key="versioning:prefix";break}case"versioning_default_branch":{e.key="versioning:branch";break}case"version_override":{e.key="versioning:override";break}case"include_github_version_badge":{e.key="versioning:badge";break}default:{e.key=i;break}}return e.value&&this.config.set(e.key,e.value),e}}}).argv({save:{alias:"save",describe:`Save this config to ${Du}`,parseValues:!0,type:"boolean"},"paths:action":{alias:["pathsAction","action"],type:"string",describe:"Path to the action.yml"},"paths:readme":{alias:["pathsReadme","readme"],type:"string",describe:"Path to the README file"},show_logo:{alias:"logo",describe:"Display the action's logo in the README"},owner:{alias:"owner",describe:"The GitHub Action repository owner. i.e: `bitflight-devops`"},repo:{alias:"repo",describe:"The GitHub Action repository name. i.e: `github-action-readme-generator`"},prettier:{alias:"pretty",describe:"Format the markdown using prettier formatter",parseValues:!0,type:"boolean"},"versioning:enabled":{alias:["versioning","versioning_enabled"],describe:"Enable the update of the usage version to match the latest version in the package.json file",parseValues:!0,type:"boolean"},"versioning:override":{alias:["setversion","versioning_override","version_override"],describe:"Set a specific version to display in the README.md",parseValues:!0},"versioning:prefix":{alias:["vp","version_prefix"],describe:"Prefix the version with this value (if it isn't already prefixed)",parseValues:!0},"versioning:branch":{alias:["branch","versioning_default_branch"],describe:"If versioning is disabled show this branch instead",parseValues:!0},"versioning:badge":{alias:["version-badge","versioning_badge"],describe:"Display the current version as a badge",parseValues:!0,type:"boolean"},title_prefix:{alias:["prefix","title_prefix"],describe:"Add a prefix to the README title",parseValues:!0}}).file(this.configPath).defaults({save:!0,owner:u?.owner,repo:u?.repo,paths:{action:"action.yml",readme:"README.md"},show_logo:!0,pretty:!0,versioning:{enabled:!0,override:"",prefix:"v",branch:"main",badges:!0},title_prefix:"GitHub Action: ",sections:["title","description","usage","inputs","outputs","contents","badges"]}).required(["owner","repo"]),this.sections=this.config.get("sections"),this.readmePath=T.resolve(this.config.get(j));let r=T.resolve(this.config.get(H));this.action=new h(r),this.readmeEditor=new b(this.readmePath),a.isDebug()&&(A.debug("resolved inputs:"),A.debug(this.stringify()),A.debug("resolved action:"),A.debug(this.action.stringify()))}stringify(){if(this){let u=[];for(let r of $u)u.push(`${r}: ${this.config.get(r)}`);return au.dump(u,{skipInvalid:!0})}return""}};var G=F(require("node:fs")),pu=F(require("node:path"));var _=class{owner;repo;title_prefix;title;paths;show_logo;versioning;readmePath;outpath;pretty;loadInputs(u){this.owner=u.config.get("owner"),this.repo=u.config.get("repo"),this.title_prefix=u.config.get("title_prefix"),this.title=u.config.get("title"),this.paths=u.config.get("paths"),this.show_logo=u.config.get("show_logo"),this.versioning={enabled:u.config.get("versioning:enabled"),prefix:u.config.get("versioning:prefix"),override:u.config.get("versioning:override"),branch:u.config.get("versioning:branch")},this.outpath=u.config.get("outpath"),this.pretty=u.config.get("pretty")}save(u){let r=new a("config:save"),n=pu.default.dirname(u);return G.default.mkdir(n,{recursive:!0},e=>{e&&r.error(`Error creating directory: ${n}. Error: ${e}`)}),G.default.writeFile(u,JSON.stringify(this,null,2),e=>{e?r.error(`Error writing config file: ${u}. Error: ${e}`):r.info(`Config file written to: ${u}`)})}};function L(t){let u=new _;u.loadInputs(t),t.config.get("save").toString()==="true"&&u.save(t.configPath)}function V(t,u){let r=new a(t),n=u.config.get("versioning:badges"),e=[],i={owner:u.config.get("owner"),repo:u.config.get("repo")};function o(){let s=`https://github.com/${i.owner}/${i.repo}`;return[{img:`https://img.shields.io/github/v/release/${i.owner}/${i.repo}?display_name=tag&sort=semver&logo=github&style=flat-square`,alt:"Release",url:`${s}/releases/latest`},{img:`https://img.shields.io/github/release-date/${i.owner}/${i.repo}?display_name=tag&sort=semver&logo=github&style=flat-square`,alt:"Release",url:`${s}/releases/latest`},{img:`https://img.shields.io/github/last-commit/${i.owner}/${i.repo}?logo=github&style=flat-square`,alt:"Commit"},{img:`https://img.shields.io/github/issues/${i.owner}/${i.repo}?logo=github&style=flat-square`,alt:"Open Issues",url:`${s}/issues`},{img:`https://img.shields.io/github/downloads/${i.owner}/${i.repo}/total?logo=github&style=flat-square`,alt:"Downloads"}]}function c(s){let D=`<img src="${s.img}" alt="${s.alt||""}" />`;return s.url?`<a href="${s.url}">${D}</a>`:D}function l(){let s=[];for(let D of e)s.push(c(D));return[s.join("")]}r.start(),n&&e.push(...o());let g=l();u.readmeEditor.updateSection(t,g),r.success()}function W(t,u){let r=new a(t),n=[];if(u?.action?.description){r.start();let e=u.action.description.trim().replaceAll(`\r
`,`
`).replaceAll(/ +/g," ").replaceAll(` 
`,`
`).replaceAll(`

`,"<br />");r.info(`Writing ${e.length} characters to the description section`),n.push(e),u.readmeEditor.updateSection(t,n),r.success()}}function ku(t){return t.replaceAll(`
`,"<br />").replaceAll("|","\\|")}function xu(t){return t.includes("|")?t.replaceAll(/([\s*_]|^)`([^`]+)`([\s*_]|$)/g,"$1<code>$2</code>$3"):t}function Iu(t){let u=[],r=[];for(let D of t)u.push([...D]);let n=u.length,e=0,i=0,o=0;for(let D of u){if(u[o]!==void 0){let p=D.length;p>e&&(e=p),(p<i||i===0)&&(i=p)}o+=1}if(e!==i){let D=0;for(let p of u)u[D]===void 0?u[D]=Array.from({length:e}).fill(""):p.length<e&&(u[D]=[...p,...Array.from({length:e-p.length}).fill("undefined")]),D+=1}let c=n+1,l=e*2+1,g=Array.from({length:c}).fill(Array.from({length:l}).fill("|")),s=0;for(let D of g){let p=0,C=s>1?s-1:0,lu=u[C];for(let m=0;m<D.length;m++){let v=ku(lu[p]??"");v=xu(v),m%2===1&&(s===0?g[s][m]=` **${v.trim()}** `:s===1?g[s][m]="---":g[s][m]=` ${v.trim()} `,p+=1)}r.push(`${g[s].join("")}
`),s+=1}return r.join("")}var R=Iu;function M(t,u){let r=new a(t),n=[],e=[],i=["Input","Description","Default","Required"],o=[];for(let g of i)o.push(k(g));e.push(o);let c=u.action.inputs,l=c?Object.keys(c).length:0;if(l>0){r.start();for(let g of Object.keys(c)){let s=c[g],D=s?.description??"",p=D.match(`(.*?)

([Ss]*)`);p&&p.length>=2&&(D=p[1]||D),D=D.trim().replace(`
`,"<br />");let C=[x(g),D,s?.default?`\`${s.default}\``:"",s?.required?"**true**":"__false__"];r.debug(JSON.stringify(C)),e.push(C)}n.push(R(e)),r.info(`Action has ${l} total ${t}`),u.readmeEditor.updateSection(t,n),r.success()}else r.debug(`Action has no ${t}`)}function J(t,u){let r=new a(t),n=[],e=[],i=["Output","Description"],o=[];for(let g of i)o.push(k(g));e.push(o);let c=u.action.outputs,l=c?Object.keys(c).length:0;if(l>0){r.start();for(let g of Object.keys(c)){let D=c[g]?.description??"",p=/(.*?)\n\n([Ss]*)/.exec(D);p&&p.length>=2&&(D=p[1]||D),D=D.trim().replace(`
`,"<br />");let C=[x(g),D];r.debug(JSON.stringify(C)),e.push(C)}n.push(R(e)),r.info(`Action has ${l} total ${t}`),u.readmeEditor.updateSection(t,n),r.success()}else r.debug(`Action has no ${t}`)}function q(t,u){let r=new a(t),n=[],e="";if(u.action.name){r.start(),e=u.action.name,r.info(`Writing ${e.length} characters to the title`);let i=`# ${u.config.get("title_prefix")}${u.action.name}`;r.info(`Title: ${i}`),n.push(i),u.readmeEditor.updateSection(t,n),r.success()}}function Y(t,u){let r=new a(t);r.start();let n=`${u.config.get("owner")}/${u.config.get("repo")}`;r.info(`Action name: ${n}`);let e=tu(u);r.info(`Version string: ${e}`);let i=`${n}@${e}`;if(!i)throw new Error("Parameter actionReference must not be empty");let o=[];o.push("```yaml",`- uses: ${i}`,"  with:");let c=u.action.inputs,l=!0;if(c)for(let g of Object.keys(c)){let s=c[g];s!==void 0&&(l||o.push(""),nu(s.description,o,"    # "),s.default!==void 0&&(s.description?.trimEnd().match(/\n *\r?\n/)&&o.push("    #"),o.push(`    # Default: ${s.default}`)),o.push(`    ${g}: ''`),l=!1)}o.push("```\n"),u.readmeEditor.updateSection(t,o),r.success()}function K(t,u){let r=new a("updateSection");switch(t){case"badges":{V(t,u);break}case"usage":{Y(t,u);break}case"title":{q(t,u);break}case"description":{W(t,u);break}case"inputs":{M(t,u);break}case"outputs":{J(t,u);break}default:r.debug(`unknown section ${t}`)}}var O=new y;function z(){let t=new a("generating readme");for(let u of O.sections)try{K(u,O)}catch(r){r&&"message"in r&&r.message&&t.error(`Error occured in section ${u}. ${r.message}`)}O.readmeEditor.dumpToFile(),L(O)}z();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2lucHV0cy50cyIsICIuLi9zcmMvQWN0aW9uLnRzIiwgIi4uL3NyYy9sb2d0YXNrL2luZGV4LnRzIiwgIi4uL3NyYy9oZWxwZXJzLnRzIiwgIi4uL3NyYy9yZWFkbWUtZWRpdG9yLnRzIiwgIi4uL3NyYy9wcmV0dGllci50cyIsICIuLi9zcmMvd29ya2luZy1kaXJlY3RvcnkudHMiLCAiLi4vc3JjL2NvbmZpZy50cyIsICIuLi9zcmMvc2F2ZS50cyIsICIuLi9zcmMvc2VjdGlvbnMvdXBkYXRlLWJhZGdlcy50cyIsICIuLi9zcmMvc2VjdGlvbnMvdXBkYXRlLWRlc2NyaXB0aW9uLnRzIiwgIi4uL3NyYy9tYXJrZG93bmVyL2luZGV4LnRzIiwgIi4uL3NyYy9zZWN0aW9ucy91cGRhdGUtaW5wdXRzLnRzIiwgIi4uL3NyYy9zZWN0aW9ucy91cGRhdGUtb3V0cHV0cy50cyIsICIuLi9zcmMvc2VjdGlvbnMvdXBkYXRlLXRpdGxlLnRzIiwgIi4uL3NyYy9zZWN0aW9ucy91cGRhdGUtdXNhZ2UudHMiLCAiLi4vc3JjL3NlY3Rpb25zL2luZGV4LnRzIiwgIi4uL3NyYy9nZW5lcmF0ZS1kb2NzLnRzIiwgIi4uL3NyYy9pbmRleC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1lbWJlci1hY2Nlc3NpYmlsaXR5ICovXG5cbmltcG9ydCAqIGFzIGZzIGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdub2RlOnBhdGgnO1xuXG5pbXBvcnQgdHlwZSB7IENvbnRleHQgfSBmcm9tICdAYWN0aW9ucy9naXRodWIvbGliL2NvbnRleHQnO1xuaW1wb3J0ICogYXMgeWFtbCBmcm9tICdqcy15YW1sJztcbmltcG9ydCAqIGFzIG5jb25mIGZyb20gJ25jb25mJztcblxuaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgeyByZXBvc2l0b3J5RmluZGVyIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBMb2dUYXNrIGZyb20gJy4vbG9ndGFzayc7XG5pbXBvcnQgUmVhZG1lRWRpdG9yIGZyb20gJy4vcmVhZG1lLWVkaXRvcic7XG5pbXBvcnQgeyB3b3JraW5nRGlyZWN0b3J5IH0gZnJvbSAnLi93b3JraW5nLWRpcmVjdG9yeSc7XG5cbmNvbnN0IGxvZyA9IG5ldyBMb2dUYXNrKCdpbnB1dHMnKTtcbnByb2Nlc3MuY2hkaXIod29ya2luZ0RpcmVjdG9yeSgpKTtcbmNvbnN0IGdpdGh1YkV2ZW50UGF0aCA9IHByb2Nlc3MuZW52LkdJVEhVQl9FVkVOVF9QQVRIID8/ICcnO1xubGV0IGdpdGh1YkV2ZW50OiBDb250ZXh0IHwgbnVsbCA9IG51bGw7XG50cnkge1xuICBnaXRodWJFdmVudCA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGdpdGh1YkV2ZW50UGF0aCwgJ3V0ZjgnKSkgYXMgQ29udGV4dDtcbn0gY2F0Y2gge1xuICAvLyBGaWxlIG5vdCB0aGVyZVxuICBsb2cuZGVidWcoYEdJVEhVQl9FVkVOVF9QQVRIIG5vdCBmb3VuZDogJHtnaXRodWJFdmVudFBhdGh9YCk7XG59XG5leHBvcnQgY29uc3QgY29uZmlnRmlsZU5hbWUgPSAnLmdoYWRvY3MuanNvbic7XG5jb25zdCBwYXRoc0FjdGlvbiA9ICdwYXRoczphY3Rpb24nO1xuY29uc3QgcGF0aHNSZWFkbWUgPSAncGF0aHM6cmVhZG1lJztcbmV4cG9ydCBjb25zdCBjb25maWdLZXlzOiBzdHJpbmdbXSA9IFtcbiAgJ3NhdmUnLFxuICBwYXRoc0FjdGlvbixcbiAgcGF0aHNSZWFkbWUsXG4gICdzaG93X2xvZ28nLFxuICAndmVyc2lvbmluZzplbmFibGVkJyxcbiAgJ3ZlcnNpb25pbmc6b3ZlcnJpZGUnLFxuICAndmVyc2lvbmluZzpwcmVmaXgnLFxuICAndmVyc2lvbmluZzpicmFuY2gnLFxuICAnb3duZXInLFxuICAncmVwbycsXG4gICd0aXRsZV9wcmVmaXgnLFxuICAncHJldHR5JyxcbiAgJ2luY2x1ZGVfZ2l0aHViX3ZlcnNpb25fYmFkZ2UnLFxuXTtcbmludGVyZmFjZSBLVlBhaXJUeXBlIHtcbiAga2V5OiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnB1dHMge1xuICBwdWJsaWMgY29uZmlnOiBuY29uZi5Qcm92aWRlcjtcblxuICBwdWJsaWMgc2VjdGlvbnM6IHN0cmluZ1tdO1xuXG4gIHB1YmxpYyByZWFkbWVQYXRoOiBzdHJpbmc7XG5cbiAgcHVibGljIGNvbmZpZ1BhdGg6IHN0cmluZztcblxuICBwdWJsaWMgYWN0aW9uOiBBY3Rpb247XG5cbiAgcHVibGljIHJlYWRtZUVkaXRvcjogUmVhZG1lRWRpdG9yO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29uZmlnUGF0aCA9IHBhdGgucmVzb2x2ZShjb25maWdGaWxlTmFtZSk7XG4gICAgdGhpcy5jb25maWcgPSBuZXcgbmNvbmYuUHJvdmlkZXIoKTtcbiAgICBjb25zdCByZXBvc2l0b3J5RGV0YWlsID0gcmVwb3NpdG9yeUZpbmRlcihudWxsLCBnaXRodWJFdmVudCk7XG4gICAgaWYgKHByb2Nlc3MuZW52LkdJVEhVQl9BQ1RJT04pIHtcbiAgICAgIGxvZy5pbmZvKCdydW5uaW5nIGluIEdpdEh1YiBhY3Rpb24nKTtcbiAgICB9XG4gICAgaWYgKGZzLmV4aXN0c1N5bmModGhpcy5jb25maWdQYXRoKSkge1xuICAgICAgbG9nLmluZm8oYGNvbmZpZyBmaWxlIGZvdW5kOiAke3RoaXMuY29uZmlnUGF0aH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmVycm9yKGBjb25maWcgZmlsZSBub3QgZm91bmQ6ICR7dGhpcy5jb25maWdQYXRofWApO1xuICAgIH1cbiAgICB0aGlzLmNvbmZpZ1xuICAgICAgLmVudih7XG4gICAgICAgIGxvd2VyQ2FzZTogdHJ1ZSxcbiAgICAgICAgcGFyc2VWYWx1ZXM6IHRydWUsXG4gICAgICAgIG1hdGNoOiAvXklOUFVUXy8sXG4gICAgICAgIHRyYW5zZm9ybTogKG9iajogS1ZQYWlyVHlwZSk6IHVuZGVmaW5lZCB8IEtWUGFpclR5cGUgPT4ge1xuICAgICAgICAgIGlmIChvYmoua2V5LnN0YXJ0c1dpdGgoJ2lucHV0XycpKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdPYmo6IEtWUGFpclR5cGUgPSB7XG4gICAgICAgICAgICAgIGtleTogb2JqLmtleSxcbiAgICAgICAgICAgICAgdmFsdWU6IG9iai52YWx1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBrZXlQYXJzZWQgPSBvYmoua2V5LnJlcGxhY2UoL14oSU5QVVR8aW5wdXQpXy8sICcnKTtcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5UGFyc2VkKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ3JlYWRtZSc6IHtcbiAgICAgICAgICAgICAgICBuZXdPYmoua2V5ID0gcGF0aHNSZWFkbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSAnYWN0aW9uJzoge1xuICAgICAgICAgICAgICAgIG5ld09iai5rZXkgPSBwYXRoc0FjdGlvbjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlICd2ZXJzaW9uaW5nX2VuYWJsZWQnOiB7XG4gICAgICAgICAgICAgICAgbmV3T2JqLmtleSA9ICd2ZXJzaW9uaW5nOmVuYWJsZWQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgJ3ZlcnNpb25fcHJlZml4Jzoge1xuICAgICAgICAgICAgICAgIG5ld09iai5rZXkgPSAndmVyc2lvbmluZzpwcmVmaXgnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgJ3ZlcnNpb25pbmdfZGVmYXVsdF9icmFuY2gnOiB7XG4gICAgICAgICAgICAgICAgbmV3T2JqLmtleSA9ICd2ZXJzaW9uaW5nOmJyYW5jaCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSAndmVyc2lvbl9vdmVycmlkZSc6IHtcbiAgICAgICAgICAgICAgICBuZXdPYmoua2V5ID0gJ3ZlcnNpb25pbmc6b3ZlcnJpZGUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgJ2luY2x1ZGVfZ2l0aHViX3ZlcnNpb25fYmFkZ2UnOiB7XG4gICAgICAgICAgICAgICAgbmV3T2JqLmtleSA9ICd2ZXJzaW9uaW5nOmJhZGdlJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgbmV3T2JqLmtleSA9IGtleVBhcnNlZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld09iai52YWx1ZSkge1xuICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXQobmV3T2JqLmtleSwgbmV3T2JqLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgLmFyZ3Yoe1xuICAgICAgICAnc2F2ZSc6IHtcbiAgICAgICAgICBhbGlhczogJ3NhdmUnLFxuICAgICAgICAgIGRlc2NyaWJlOiBgU2F2ZSB0aGlzIGNvbmZpZyB0byAke2NvbmZpZ0ZpbGVOYW1lfWAsXG4gICAgICAgICAgcGFyc2VWYWx1ZXM6IHRydWUsXG4gICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICB9LFxuICAgICAgICAncGF0aHM6YWN0aW9uJzoge1xuICAgICAgICAgIGFsaWFzOiBbJ3BhdGhzQWN0aW9uJywgJ2FjdGlvbiddLFxuICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIGRlc2NyaWJlOiAnUGF0aCB0byB0aGUgYWN0aW9uLnltbCcsXG4gICAgICAgIH0sXG4gICAgICAgICdwYXRoczpyZWFkbWUnOiB7XG4gICAgICAgICAgYWxpYXM6IFsncGF0aHNSZWFkbWUnLCAncmVhZG1lJ10sXG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgZGVzY3JpYmU6ICdQYXRoIHRvIHRoZSBSRUFETUUgZmlsZScsXG4gICAgICAgIH0sXG4gICAgICAgICdzaG93X2xvZ28nOiB7XG4gICAgICAgICAgYWxpYXM6ICdsb2dvJyxcbiAgICAgICAgICBkZXNjcmliZTogXCJEaXNwbGF5IHRoZSBhY3Rpb24ncyBsb2dvIGluIHRoZSBSRUFETUVcIixcbiAgICAgICAgfSxcbiAgICAgICAgJ293bmVyJzoge1xuICAgICAgICAgIGFsaWFzOiAnb3duZXInLFxuICAgICAgICAgIGRlc2NyaWJlOiAnVGhlIEdpdEh1YiBBY3Rpb24gcmVwb3NpdG9yeSBvd25lci4gaS5lOiBgYml0ZmxpZ2h0LWRldm9wc2AnLFxuICAgICAgICB9LFxuICAgICAgICAncmVwbyc6IHtcbiAgICAgICAgICBhbGlhczogJ3JlcG8nLFxuICAgICAgICAgIGRlc2NyaWJlOiAnVGhlIEdpdEh1YiBBY3Rpb24gcmVwb3NpdG9yeSBuYW1lLiBpLmU6IGBnaXRodWItYWN0aW9uLXJlYWRtZS1nZW5lcmF0b3JgJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByZXR0aWVyJzoge1xuICAgICAgICAgIGFsaWFzOiAncHJldHR5JyxcbiAgICAgICAgICBkZXNjcmliZTogJ0Zvcm1hdCB0aGUgbWFya2Rvd24gdXNpbmcgcHJldHRpZXIgZm9ybWF0dGVyJyxcbiAgICAgICAgICBwYXJzZVZhbHVlczogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIH0sXG4gICAgICAgICd2ZXJzaW9uaW5nOmVuYWJsZWQnOiB7XG4gICAgICAgICAgYWxpYXM6IFsndmVyc2lvbmluZycsICd2ZXJzaW9uaW5nX2VuYWJsZWQnXSxcbiAgICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAgICdFbmFibGUgdGhlIHVwZGF0ZSBvZiB0aGUgdXNhZ2UgdmVyc2lvbiB0byBtYXRjaCB0aGUgbGF0ZXN0IHZlcnNpb24gaW4gdGhlIHBhY2thZ2UuanNvbiBmaWxlJyxcbiAgICAgICAgICBwYXJzZVZhbHVlczogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIH0sXG4gICAgICAgICd2ZXJzaW9uaW5nOm92ZXJyaWRlJzoge1xuICAgICAgICAgIGFsaWFzOiBbJ3NldHZlcnNpb24nLCAndmVyc2lvbmluZ19vdmVycmlkZScsICd2ZXJzaW9uX292ZXJyaWRlJ10sXG4gICAgICAgICAgZGVzY3JpYmU6ICdTZXQgYSBzcGVjaWZpYyB2ZXJzaW9uIHRvIGRpc3BsYXkgaW4gdGhlIFJFQURNRS5tZCcsXG4gICAgICAgICAgcGFyc2VWYWx1ZXM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgICd2ZXJzaW9uaW5nOnByZWZpeCc6IHtcbiAgICAgICAgICBhbGlhczogWyd2cCcsICd2ZXJzaW9uX3ByZWZpeCddLFxuICAgICAgICAgIGRlc2NyaWJlOiBcIlByZWZpeCB0aGUgdmVyc2lvbiB3aXRoIHRoaXMgdmFsdWUgKGlmIGl0IGlzbid0IGFscmVhZHkgcHJlZml4ZWQpXCIsXG4gICAgICAgICAgcGFyc2VWYWx1ZXM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgICd2ZXJzaW9uaW5nOmJyYW5jaCc6IHtcbiAgICAgICAgICBhbGlhczogWydicmFuY2gnLCAndmVyc2lvbmluZ19kZWZhdWx0X2JyYW5jaCddLFxuICAgICAgICAgIGRlc2NyaWJlOiAnSWYgdmVyc2lvbmluZyBpcyBkaXNhYmxlZCBzaG93IHRoaXMgYnJhbmNoIGluc3RlYWQnLFxuICAgICAgICAgIHBhcnNlVmFsdWVzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICAndmVyc2lvbmluZzpiYWRnZSc6IHtcbiAgICAgICAgICBhbGlhczogWyd2ZXJzaW9uLWJhZGdlJywgJ3ZlcnNpb25pbmdfYmFkZ2UnXSxcbiAgICAgICAgICBkZXNjcmliZTogJ0Rpc3BsYXkgdGhlIGN1cnJlbnQgdmVyc2lvbiBhcyBhIGJhZGdlJyxcbiAgICAgICAgICBwYXJzZVZhbHVlczogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIH0sXG4gICAgICAgICd0aXRsZV9wcmVmaXgnOiB7XG4gICAgICAgICAgYWxpYXM6IFsncHJlZml4JywgJ3RpdGxlX3ByZWZpeCddLFxuICAgICAgICAgIGRlc2NyaWJlOiAnQWRkIGEgcHJlZml4IHRvIHRoZSBSRUFETUUgdGl0bGUnLFxuICAgICAgICAgIHBhcnNlVmFsdWVzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIC5maWxlKHRoaXMuY29uZmlnUGF0aClcbiAgICAgIC5kZWZhdWx0cyh7XG4gICAgICAgIHNhdmU6IHRydWUsXG4gICAgICAgIG93bmVyOiByZXBvc2l0b3J5RGV0YWlsPy5vd25lcixcbiAgICAgICAgcmVwbzogcmVwb3NpdG9yeURldGFpbD8ucmVwbyxcbiAgICAgICAgcGF0aHM6IHtcbiAgICAgICAgICBhY3Rpb246ICdhY3Rpb24ueW1sJyxcbiAgICAgICAgICByZWFkbWU6ICdSRUFETUUubWQnLFxuICAgICAgICB9LFxuICAgICAgICBzaG93X2xvZ286IHRydWUsXG4gICAgICAgIHByZXR0eTogdHJ1ZSxcbiAgICAgICAgdmVyc2lvbmluZzoge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgb3ZlcnJpZGU6ICcnLFxuICAgICAgICAgIHByZWZpeDogJ3YnLFxuICAgICAgICAgIGJyYW5jaDogJ21haW4nLFxuICAgICAgICAgIGJhZGdlczogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGVfcHJlZml4OiAnR2l0SHViIEFjdGlvbjogJyxcbiAgICAgICAgc2VjdGlvbnM6IFsndGl0bGUnLCAnZGVzY3JpcHRpb24nLCAndXNhZ2UnLCAnaW5wdXRzJywgJ291dHB1dHMnLCAnY29udGVudHMnLCAnYmFkZ2VzJ10sXG4gICAgICB9KVxuICAgICAgLnJlcXVpcmVkKFsnb3duZXInLCAncmVwbyddKTtcblxuICAgIHRoaXMuc2VjdGlvbnMgPSB0aGlzLmNvbmZpZy5nZXQoJ3NlY3Rpb25zJykgYXMgc3RyaW5nW107XG4gICAgdGhpcy5yZWFkbWVQYXRoID0gcGF0aC5yZXNvbHZlKHRoaXMuY29uZmlnLmdldChwYXRoc1JlYWRtZSkgYXMgc3RyaW5nKTtcbiAgICBjb25zdCBhY3Rpb25QYXRoID0gcGF0aC5yZXNvbHZlKHRoaXMuY29uZmlnLmdldChwYXRoc0FjdGlvbikgYXMgc3RyaW5nKTtcbiAgICB0aGlzLmFjdGlvbiA9IG5ldyBBY3Rpb24oYWN0aW9uUGF0aCk7XG4gICAgdGhpcy5yZWFkbWVFZGl0b3IgPSBuZXcgUmVhZG1lRWRpdG9yKHRoaXMucmVhZG1lUGF0aCk7XG4gICAgaWYgKExvZ1Rhc2suaXNEZWJ1ZygpKSB7XG4gICAgICBsb2cuZGVidWcoJ3Jlc29sdmVkIGlucHV0czonKTtcbiAgICAgIGxvZy5kZWJ1Zyh0aGlzLnN0cmluZ2lmeSgpKTtcbiAgICAgIGxvZy5kZWJ1ZygncmVzb2x2ZWQgYWN0aW9uOicpO1xuICAgICAgbG9nLmRlYnVnKHRoaXMuYWN0aW9uLnN0cmluZ2lmeSgpKTtcbiAgICB9XG4gIH1cblxuICBzdHJpbmdpZnkoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcykge1xuICAgICAgY29uc3Qgb3V0cHV0OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgZm9yIChjb25zdCBrIG9mIGNvbmZpZ0tleXMpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goYCR7a306ICR7dGhpcy5jb25maWcuZ2V0KGspfWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHlhbWwuZHVtcChvdXRwdXQsIHtcbiAgICAgICAgc2tpcEludmFsaWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1lbWJlci1hY2Nlc3NpYmlsaXR5ICovXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdub2RlOmZzJztcblxuaW1wb3J0ICogYXMgeWFtbCBmcm9tICdqcy15YW1sJztcblxuaW1wb3J0IExvZ1Rhc2sgZnJvbSAnLi9sb2d0YXNrJztcblxuZXhwb3J0IGludGVyZmFjZSBJbnB1dFR5cGUge1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICBkZWZhdWx0Pzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBPdXRwdXRUeXBlIHtcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFJ1bnMge1xuICB1c2luZzogc3RyaW5nO1xuICBtYWluOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEJyYW5kaW5nIHtcbiAgY29sb3I6IHN0cmluZztcbiAgaWNvbjogc3RyaW5nO1xufVxuZXhwb3J0IHR5cGUgSW5wdXRzVHlwZSA9IHsgW2lkOiBzdHJpbmddOiBJbnB1dFR5cGUgfTtcbmV4cG9ydCB0eXBlIE91dHB1dHNUeXBlID0geyBbaWQ6IHN0cmluZ106IE91dHB1dFR5cGUgfTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uIHtcbiAgLy8gTG9hZCB0aGUgYWN0aW9uLnltbFxuXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG5cbiAgcHVibGljIGJyYW5kaW5nOiBCcmFuZGluZztcblxuICBwdWJsaWMgaW5wdXRzOiBJbnB1dHNUeXBlO1xuXG4gIHB1YmxpYyBvdXRwdXRzOiBPdXRwdXRzVHlwZTtcblxuICBwdWJsaWMgcnVuczogUnVucztcblxuICBjb25zdHJ1Y3RvcihhY3Rpb25QYXRoOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsb2cgPSBuZXcgTG9nVGFzaygnYWN0aW9uJyk7XG4gICAgbGV0IHRtcEFjdGlvbllhbWwgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBsb2cuZGVidWcoYGxvYWRpbmcgYWN0aW9uLnltbCBmcm9tICR7YWN0aW9uUGF0aH1gKTtcbiAgICAgIHRtcEFjdGlvbllhbWwgPSB5YW1sLmxvYWQoZnMucmVhZEZpbGVTeW5jKGFjdGlvblBhdGgsICd1dGY4JykpIGFzIEFjdGlvbjtcbiAgICAgIGxvZy5zdWNjZXNzKCdsb2FkZWQgY29uZmlndXJhdGlvbiBzdWNjZXNzZnVsbHknKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIGxvZy5lcnJvcihgZmFpbGVkIHRvIGxvYWQgJHthY3Rpb25QYXRofWApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRtcEFjdGlvbllhbWwgIT09ICdvYmplY3QnIHx8IHRtcEFjdGlvbllhbWwgPT09IG51bGwpIHtcbiAgICAgIGxvZy5lcnJvcihcImFjdGlvbi55bWwgZmlsZSByZWFkIGluIGlzbid0IGFuIG9iamVjdCAobm8geWFtbCBpbiBpdClcIik7XG4gICAgfVxuICAgIGNvbnN0IGFjdGlvbllhbWwgPSB0bXBBY3Rpb25ZYW1sIGFzIEFjdGlvbjtcbiAgICB0aGlzLm5hbWUgPSBhY3Rpb25ZYW1sLm5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGFjdGlvbllhbWwuZGVzY3JpcHRpb247XG4gICAgdGhpcy5icmFuZGluZyA9IGFjdGlvbllhbWwuYnJhbmRpbmc7XG4gICAgdGhpcy5pbnB1dHMgPSBhY3Rpb25ZYW1sLmlucHV0cztcbiAgICB0aGlzLm91dHB1dHMgPSBhY3Rpb25ZYW1sLm91dHB1dHM7XG4gICAgdGhpcy5ydW5zID0gYWN0aW9uWWFtbC5ydW5zO1xuICB9XG5cbiAgc3RyaW5naWZ5KCk6IHN0cmluZyB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB5YW1sLmR1bXAodGhpcywge1xuICAgICAgICBza2lwSW52YWxpZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgY29uc3QgbG9nID0gbmV3IExvZ1Rhc2soJ2FjdGlvbjpzdHJpbmdpZnknKTtcbiAgICAgIGxvZy5lcnJvcignZmFpbGVkIHRvIHN0cmluZ2lmeSBhY3Rpb24ueW1sJyk7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgY29yZSBmcm9tICdAYWN0aW9ucy9jb3JlJztcbmltcG9ydCAqIGFzIGNoYWxrQ2xhc3MgZnJvbSAnY2hhbGsnO1xuaW1wb3J0ICogYXMgZW1vamkgZnJvbSAnbm9kZS1lbW9qaSc7XG5cbmNvbnN0IE5PX0dST1VQID0gMDtcbmNvbnN0IFNUQVJUX0dST1VQID0gMTtcbmNvbnN0IEVORF9HUk9VUCA9IDI7XG5jb25zdCBJU19FUlJPUiA9IDM7XG5jb25zdCBJU19GQUlMRUQgPSA1O1xuY29uc3QgSVNfVElUTEUgPSA2O1xuY29uc3QgY2hhbGsgPSBjaGFsa0NsYXNzLmRlZmF1bHQ7XG5jbGFzcyBMb2dUYXNrIHtcbiAgc3RhdGljIGluZ3JvdXBfc2V0dGluZzogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcblxuICBzdGF0aWMgaW5kZW50V2lkdGggPSA1O1xuXG4gIHN0YXRpYyBpc0RlYnVnKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjb3JlLmlzRGVidWcoKSB8fCAhIXByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMubmFtZSA9IG5hbWU/LnRyaW0oKTtcbiAgICB0aGlzLmluZ3JvdXAgPSBmYWxzZTtcbiAgfVxuXG4gIGdldCBpbmdyb3VwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBMb2dUYXNrLmluZ3JvdXBfc2V0dGluZ1t0aGlzLm5hbWVdID8/IGZhbHNlO1xuICB9XG5cbiAgc2V0IGluZ3JvdXAodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBMb2dUYXNrLmluZ3JvdXBfc2V0dGluZ1t0aGlzLm5hbWVdID0gdmFsdWU7XG4gIH1cblxuICBhc3luYyBsb2dTdGVwKFxuICAgIGVtb2ppU3RyOiBzdHJpbmcsXG4gICAgc3RlcDogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgc3RhcnRHcm91cCA9IE5PX0dST1VQLFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoc3RlcC5sZW5ndGggPiBMb2dUYXNrLmluZGVudFdpZHRoKSB7XG4gICAgICBMb2dUYXNrLmluZGVudFdpZHRoID0gc3RlcC5sZW5ndGg7XG4gICAgfVxuICAgIGxldCBkZXNjOiBzdHJpbmc7XG4gICAgc3dpdGNoIChzdGVwKSB7XG4gICAgICBjYXNlICdTVEFSVCc6IHtcbiAgICAgICAgZGVzYyA9IGNoYWxrLnllbGxvd0JyaWdodChgJHtkZXNjcmlwdGlvbn1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdJTkZPJzoge1xuICAgICAgICBkZXNjID0gY2hhbGsuZ3JlZW4oYCR7ZGVzY3JpcHRpb259YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnV0FSTic6IHtcbiAgICAgICAgZGVzYyA9IGNoYWxrLnllbGxvdyhgJHtkZXNjcmlwdGlvbn1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdTVUNDRVNTJzoge1xuICAgICAgICBkZXNjID0gY2hhbGsuZ3JlZW5CcmlnaHQoYCR7ZGVzY3JpcHRpb259YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnRkFJTFVSRSc6IHtcbiAgICAgICAgZGVzYyA9IGNoYWxrLnJlZEJyaWdodChgJHtkZXNjcmlwdGlvbn1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdFUlJPUic6IHtcbiAgICAgICAgZGVzYyA9IGNoYWxrLnJlZEJyaWdodChgJHtkZXNjcmlwdGlvbn1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICcjIyMjIyc6IHtcbiAgICAgICAgZGVzYyA9IGNoYWxrLmN5YW4oYCR7ZGVzY3JpcHRpb259YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBkZXNjID0gY2hhbGsud2hpdGUoYCR7ZGVzY3JpcHRpb259YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBtc2c6IHN0cmluZztcbiAgICBpZiAodGhpcy5pbmdyb3VwICYmICFwcm9jZXNzLmVudi5HSVRIVUJfQUNUSU9OUykge1xuICAgICAgY29uc3QgaW5kZW50U3RyID0gWy4uLkFycmF5LmZyb20oeyBsZW5ndGg6IExvZ1Rhc2suaW5kZW50V2lkdGggfSkuZmlsbCgnICcpXS5qb2luKCcnKTtcbiAgICAgIG1zZyA9IGAke2luZGVudFN0cn0gICAke2Vtb2ppU3RyfTogJHt0aGlzLm5hbWV9ID4gJHtkZXNjfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN0ZXBTdHIgPSBbXG4gICAgICAgIHN0ZXAsXG4gICAgICAgIC4uLkFycmF5LmZyb20oeyBsZW5ndGg6IExvZ1Rhc2suaW5kZW50V2lkdGggLSBzdGVwLmxlbmd0aCB9KS5maWxsKCcgJyksXG4gICAgICBdLmpvaW4oJycpO1xuXG4gICAgICBtc2cgPSBgWyR7c3RlcFN0cn1dICR7ZW1vamlTdHJ9OiAke2Rlc2N9YDtcbiAgICB9XG4gICAgc3dpdGNoIChzdGVwKSB7XG4gICAgICBjYXNlICdTVEFSVCc6IHtcbiAgICAgICAgbXNnID0gY2hhbGsueWVsbG93QnJpZ2h0KGAke21zZ31gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdTVUNDRVNTJzoge1xuICAgICAgICBtc2cgPSBjaGFsay53aGl0ZUJyaWdodChgJHttc2d9YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnRkFJTFVSRSc6IHtcbiAgICAgICAgbXNnID0gY2hhbGsucmVkKGAke21zZ31gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdFUlJPUic6IHtcbiAgICAgICAgbXNnID0gY2hhbGsucmVkKGAke21zZ31gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBpc0Vycm9yaW5nID0gc3RhcnRHcm91cCA9PT0gSVNfRVJST1IgfHwgc3RhcnRHcm91cCA9PT0gSVNfRkFJTEVEO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52LkdJVEhVQl9BQ1RJT05TKSB7XG4gICAgICBzd2l0Y2ggKHN0YXJ0R3JvdXApIHtcbiAgICAgICAgY2FzZSBTVEFSVF9HUk9VUDoge1xuICAgICAgICAgIGNvcmUuc3RhcnRHcm91cChtc2cpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBFTkRfR1JPVVA6IHtcbiAgICAgICAgICBjb3JlLmVuZEdyb3VwKCk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIElTX0VSUk9SOiB7XG4gICAgICAgICAgY29yZS5lcnJvcihjaGFsay5iZ1JlZEJyaWdodChtc2cpKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgSVNfRkFJTEVEOiB7XG4gICAgICAgICAgY29yZS5zZXRGYWlsZWQoY2hhbGsuYmdSZWRCcmlnaHQobXNnKSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgY29yZS5pbmZvKG1zZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRXJyb3JpbmcpIHtcbiAgICAgIGNvcmUuZXJyb3IobXNnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29yZS5pbmZvKG1zZyk7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoZGVzY3JpcHRpb24gPSAnJyk6IHZvaWQge1xuICAgIGlmIChMb2dUYXNrLmlzRGVidWcoKSAmJiBkZXNjcmlwdGlvbiAhPT0gJycpIHtcbiAgICAgIHRoaXMubG9nU3RlcCgnXHVEODNEXHVEQzQxXHVGRTBGXHUyMDBEXHVEODNEXHVEREU4XHVGRTBGJywgJ0RFQlVHJywgZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHN0YXJ0KGRlc2NyaXB0aW9uID0gJycpOiB2b2lkIHtcbiAgICBjb25zdCBkZXNjID0gZGVzY3JpcHRpb24gPT09ICcnID8gYFN0YXJ0aW5nICR7dGhpcy5uYW1lfS4uLmAgOiBkZXNjcmlwdGlvbjtcblxuICAgIHRoaXMubG9nU3RlcChlbW9qaS5nZXQoJ3JvY2tldCcpID8/ICcnLCAnU1RBUlQnLCBkZXNjLCBTVEFSVF9HUk9VUCk7XG4gIH1cblxuICBpbmZvKGRlc2NyaXB0aW9uID0gJycpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ1N0ZXAoZW1vamkuZ2V0KCdzcGFya2xlcycpID8/ICcnLCAnSU5GTycsIGRlc2NyaXB0aW9uKTtcbiAgfVxuXG4gIHdhcm4oZGVzY3JpcHRpb24gPSAnJyk6IHZvaWQge1xuICAgIHRoaXMubG9nU3RlcChlbW9qaS5nZXQoJ2FuZ2VyJykgPz8gJycsICdXQVJOJywgZGVzY3JpcHRpb24pO1xuICB9XG5cbiAgc3VjY2VzcyhkZXNjcmlwdGlvbiA9ICcnLCBpbmdyb3VwID0gdHJ1ZSk6IHZvaWQge1xuICAgIGNvbnN0IGRlc2MgPSBkZXNjcmlwdGlvbiA9PT0gJycgPyBgQ29tcGxldGVkICR7dGhpcy5uYW1lfS5gIDogZGVzY3JpcHRpb247XG4gICAgaWYgKGluZ3JvdXApIHtcbiAgICAgIHRoaXMuaW5ncm91cCA9IGZhbHNlO1xuICAgICAgaWYgKHByb2Nlc3MuZW52LkdJVEhVQl9BQ1RJT05TKSB7XG4gICAgICAgIGNvcmUuZW5kR3JvdXAoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sb2dTdGVwKGVtb2ppLmdldCgnd2hpdGVfY2hlY2tfbWFyaycpID8/ICcnLCAnU1VDQ0VTUycsIGRlc2MpO1xuICB9XG5cbiAgZmFpbChkZXNjcmlwdGlvbiA9ICcnLCBpbmdyb3VwID0gdHJ1ZSk6IHZvaWQge1xuICAgIGNvbnN0IGRlc2MgPSBkZXNjcmlwdGlvbiA9PT0gJycgPyBgRmFpbGVkICR7dGhpcy5uYW1lfS5gIDogZGVzY3JpcHRpb247XG4gICAgaWYgKGluZ3JvdXApIHtcbiAgICAgIHRoaXMuaW5ncm91cCA9IGZhbHNlO1xuICAgICAgaWYgKHByb2Nlc3MuZW52LkdJVEhVQl9BQ1RJT05TKSB7XG4gICAgICAgIGNvcmUuZW5kR3JvdXAoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbXNndHlwZSA9IHByb2Nlc3MuZW52LkdJVEhVQl9BQ1RJT05TID8gSVNfRkFJTEVEIDogSVNfRVJST1I7XG4gICAgdGhpcy5sb2dTdGVwKGVtb2ppLmdldCgneCcpID8/ICcnLCAnRkFJTFVSRScsIGRlc2MsIG1zZ3R5cGUpO1xuICB9XG5cbiAgZXJyb3IoZGVzY3JpcHRpb24gPSAnJyk6IHZvaWQge1xuICAgIHRoaXMubG9nU3RlcChlbW9qaS5nZXQoJ3gnKSA/PyAnJywgJ0VSUk9SJywgZGVzY3JpcHRpb24sIElTX0VSUk9SKTtcbiAgfVxuXG4gIHRpdGxlKGRlc2NyaXB0aW9uID0gJycpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ1N0ZXAoJ1x1RDgzRFx1RENEMycsICcjIyMjIycsIGRlc2NyaXB0aW9uLCBJU19USVRMRSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9nVGFzaztcbiIsICJpbXBvcnQgKiBhcyBmcyBmcm9tICdub2RlOmZzJztcblxuaW1wb3J0IHR5cGUgeyBDb250ZXh0IH0gZnJvbSAnQGFjdGlvbnMvZ2l0aHViL2xpYi9jb250ZXh0JztcbmltcG9ydCB0eXBlIHsgUGFja2FnZUpzb24gfSBmcm9tICd0eXBlcy1wYWNrYWdlLWpzb24nO1xuXG5pbXBvcnQgdHlwZSBJbnB1dHMgZnJvbSAnLi9pbnB1dHMnO1xuaW1wb3J0IExvZ1Rhc2sgZnJvbSAnLi9sb2d0YXNrJztcblxuLy9cbi8vIFJlZ2V4IGJlbG93IG1hdGNoZXMgYW55IFVuaWNvZGUgd29yZCBhbmQgbnVtYmVyIGNvbXBhdGlibGUgd2l0aCBFUzUuIEluIEVTMjAxOCB0aGUgc2FtZSByZXN1bHRcbi8vIGNhbiBiZSBhY2hpZXZlZCBieSB1c2luZyAvWzAtOVxccHtMfV1cXFMqL2d1IGFuZCBhbHNvIGtub3duIGFzIFVuaWNvZGUgUHJvcGVydHkgRXNjYXBlc1xuLy8gKGh0dHBzOi8vMmFsaXR5LmNvbS8yMDE3LzA3L3JlZ2V4cC11bmljb2RlLXByb3BlcnR5LWVzY2FwZXMuaHRtbCkuIFNpbmNlIHRoZXJlIGlzIG5vXG4vLyB0cmFuc3BpbGF0aW9uIG9mIHRoaXMgZnVuY3Rpb25hbGl0eSBkb3duIHRvIEVTNSB3aXRob3V0IGV4dGVybmFsIHRvb2wsIHRoZSBvbmx5IHNvbHV0aW9uIGlzXG4vLyB0byB1c2UgYWxyZWFkeSB0cmFuc3BpbGVkIGZvcm0uIEV4YW1wbGUgY2FuIGJlIGZvdW5kIGhlcmUgLVxuLy8gaHR0cHM6Ly9tb3RoZXJlZmYuaW4vcmVnZXhwdSNpbnB1dD12YXIrcmVnZXgrJTNEKyUyRiU1QjAtOSU1Q3AlN0JMJTdEJTVEJTVDUyolMkZndSUzQiUwQSUwQSZ1bmljb2RlUHJvcGVydHlFc2NhcGU9MVxuLy9cblxuY29uc3QgdW5pY29kZVdvcmRNYXRjaCA9XG4gIC8vIHRydW5rLWlnbm9yZShlc2xpbnQvdW5pY29ybi9iZXR0ZXItcmVnZXgsZXNsaW50L3VuaWNvcm4vbm8taGV4LWVzY2FwZSxlc2xpbnQvb3B0aW1pemUtcmVnZXgvb3B0aW1pemUtcmVnZXgpXG4gIC8oPzpbXFxkQS1aYS16XFx1MDBBQVxcdTAwQjVcXHUwMEJBXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYwLVxcdTA1ODhcXHUwNUQwLVxcdTA1RUFcXHUwNUVGLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDg2MC1cXHUwODZBXFx1MDg3MC1cXHUwODg3XFx1MDg4OS1cXHUwODhFXFx1MDhBMC1cXHUwOEM5XFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwOUZDXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEFGOVxcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjcxXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkQwXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNTgtXFx1MEM1QVxcdTBDNURcXHUwQzYwXFx1MEM2MVxcdTBDODBcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNC1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg2LVxcdTBFOEFcXHUwRThDLVxcdTBFQTNcXHUwRUE1XFx1MEVBNy1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MTFcXHUxNzFGLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3OFxcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRDXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQzgwLVxcdTFDODhcXHUxQzkwLVxcdTFDQkFcXHUxQ0JELVxcdTFDQkZcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjNcXHUxQ0Y1XFx1MUNGNlxcdTFDRkFcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJGXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJGXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REJGXFx1NEUwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3Q0FcXHVBN0QwXFx1QTdEMVxcdUE3RDNcXHVBN0Q1LVxcdUE3RDlcXHVBN0YyLVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE4RkVcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY5XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXXxcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REYwMC1cXHVERjFGXFx1REYyRC1cXHVERjQwXFx1REY0Mi1cXHVERjQ5XFx1REY1MC1cXHVERjc1XFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQjAtXFx1RENEM1xcdURDRDgtXFx1RENGQlxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURENzAtXFx1REQ3QVxcdUREN0MtXFx1REQ4QVxcdUREOEMtXFx1REQ5MlxcdUREOTRcXHVERDk1XFx1REQ5Ny1cXHVEREExXFx1RERBMy1cXHVEREIxXFx1RERCMy1cXHVEREI5XFx1RERCQlxcdUREQkNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjdcXHVERjgwLVxcdURGODVcXHVERjg3LVxcdURGQjBcXHVERkIyLVxcdURGQkFdfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTM1XFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMlxcdUREMDAtXFx1REQyM1xcdURFODAtXFx1REVBOVxcdURFQjBcXHVERUIxXFx1REYwMC1cXHVERjFDXFx1REYyN1xcdURGMzAtXFx1REY0NVxcdURGNzAtXFx1REY4MVxcdURGQjAtXFx1REZDNFxcdURGRTAtXFx1REZGNl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzcxXFx1REM3MlxcdURDNzVcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDQ0XFx1REQ0N1xcdURENTAtXFx1REQ3MlxcdURENzZcXHVERDgzLVxcdUREQjJcXHVEREMxLVxcdUREQzRcXHVERERBXFx1REREQ1xcdURFMDAtXFx1REUxMVxcdURFMTMtXFx1REUyQlxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFREVcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzRFxcdURGNTBcXHVERjVELVxcdURGNjFdfFxcdUQ4MDVbXFx1REMwMC1cXHVEQzM0XFx1REM0Ny1cXHVEQzRBXFx1REM1Ri1cXHVEQzYxXFx1REM4MC1cXHVEQ0FGXFx1RENDNFxcdURDQzVcXHVEQ0M3XFx1REQ4MC1cXHVEREFFXFx1REREOC1cXHVERERCXFx1REUwMC1cXHVERTJGXFx1REU0NFxcdURFODAtXFx1REVBQVxcdURFQjhcXHVERjAwLVxcdURGMUFcXHVERjQwLVxcdURGNDZdfFxcdUQ4MDZbXFx1REMwMC1cXHVEQzJCXFx1RENBMC1cXHVEQ0RGXFx1RENGRi1cXHVERDA2XFx1REQwOVxcdUREMEMtXFx1REQxM1xcdUREMTVcXHVERDE2XFx1REQxOC1cXHVERDJGXFx1REQzRlxcdURENDFcXHVEREEwLVxcdUREQTdcXHVEREFBLVxcdURERDBcXHVEREUxXFx1RERFM1xcdURFMDBcXHVERTBCLVxcdURFMzJcXHVERTNBXFx1REU1MFxcdURFNUMtXFx1REU4OVxcdURFOURcXHVERUIwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzJFXFx1REM0MFxcdURDNzItXFx1REM4RlxcdUREMDAtXFx1REQwNlxcdUREMDhcXHVERDA5XFx1REQwQi1cXHVERDMwXFx1REQ0NlxcdURENjAtXFx1REQ2NVxcdURENjdcXHVERDY4XFx1REQ2QS1cXHVERDg5XFx1REQ5OFxcdURFRTAtXFx1REVGMlxcdURGQjBdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDODAtXFx1REQ0M118XFx1RDgwQltcXHVERjkwLVxcdURGRjBdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDgyMlxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3MlxcdUQ4NzQtXFx1RDg3OVxcdUQ4ODAtXFx1RDg4M11bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REU3MC1cXHVERUJFXFx1REVEMC1cXHVERUVEXFx1REYwMC1cXHVERjJGXFx1REY0MC1cXHVERjQzXFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURFNDAtXFx1REU3RlxcdURGMDAtXFx1REY0QVxcdURGNTBcXHVERjkzLVxcdURGOUZcXHVERkUwXFx1REZFMVxcdURGRTNdfFxcdUQ4MjFbXFx1REMwMC1cXHVERkY3XXxcXHVEODIzW1xcdURDMDAtXFx1RENENVxcdUREMDAtXFx1REQwOF18XFx1RDgyQltcXHVERkYwLVxcdURGRjNcXHVERkY1LVxcdURGRkJcXHVERkZEXFx1REZGRV18XFx1RDgyQ1tcXHVEQzAwLVxcdUREMjJcXHVERDUwLVxcdURENTJcXHVERDY0LVxcdURENjdcXHVERDcwLVxcdURFRkJdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XXxcXHVEODM1W1xcdURDMDAtXFx1REM1NFxcdURDNTYtXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURFQTVcXHVERUE4LVxcdURFQzBcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRkFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMzRcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNkVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGQThcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQ0JdfFxcdUQ4MzdbXFx1REYwMC1cXHVERjFFXXxcXHVEODM4W1xcdUREMDAtXFx1REQyQ1xcdUREMzctXFx1REQzRFxcdURENEVcXHVERTkwLVxcdURFQURcXHVERUMwLVxcdURFRUJdfFxcdUQ4MzlbXFx1REZFMC1cXHVERkU2XFx1REZFOC1cXHVERkVCXFx1REZFRFxcdURGRUVcXHVERkYwLVxcdURGRkVdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XFx1REQwMC1cXHVERDQzXFx1REQ0Ql18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVERlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzhcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMVxcdURFQjAtXFx1REZGRl18XFx1RDg3QVtcXHVEQzAwLVxcdURGRTBdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXXxcXHVEODg0W1xcdURDMDAtXFx1REY0QV0pXFxTKi9nO1xuXG5leHBvcnQgZnVuY3Rpb24gdW5kZWZpbmVkT25FbXB0eSh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBiYXNlbmFtZShwYXRoOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBpZiAoIXBhdGgpIHJldHVybiB1bmRlZmluZWQ7XG4gIGNvbnN0IGxvZyA9IG5ldyBMb2dUYXNrKCdiYXNlbmFtZScpO1xuICBjb25zdCByZXN1bHQgPSBwYXRoLnNwbGl0KCcvJykucmV2ZXJzZSgpWzBdO1xuICBsb2cuZGVidWcoYEJhc2VuYW1lIHBhc3NlZCAke3BhdGh9IGFuZCByZXR1cm5zICR7cmVzdWx0fWApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBSZWZzKHBhdGg6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICBpZiAoIXBhdGgpIHJldHVybiBudWxsO1xuICBjb25zdCBsb2cgPSBuZXcgTG9nVGFzaygnc3RyaXBSZWZzJyk7XG4gIGNvbnN0IHJlc3VsdCA9IHBhdGgucmVwbGFjZSgncmVmcy9oZWFkcy8nLCAnJykucmVwbGFjZSgncmVmcy90YWdzLycsICcnKTtcbiAgbG9nLmRlYnVnKGBzdHJpcFJlZnMgcGFzc2VkICR7cGF0aH0gYW5kIHJldHVybnMgJHtyZXN1bHR9YCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gdGl0bGVjYXNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGlmICghdGV4dCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgYXJndW1lbnQgdHlwZSBwcm92aWRlZCB0byB0aXRsZWNhc2UoKTogJHt0eXBlb2YgdGV4dH1gKTtcbiAgfVxuICByZXR1cm4gdGV4dC5yZXBsYWNlQWxsKHVuaWNvZGVXb3JkTWF0Y2gsICh0eHQpID0+XG4gICAgdHh0WzBdID8gdHh0WzBdLnRvVXBwZXJDYXNlKCkgKyB0eHQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSA6IHR4dCxcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhQYXJzZXIodGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCF0ZXh0KSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBhcmd1bWVudCB0eXBlIHByb3ZpZGVkIHRvIHByZWZpeFBhcnNlcigpOiAke3R5cGVvZiB0ZXh0fWApO1xuICB9XG4gIHJldHVybiB0aXRsZWNhc2UodGV4dC5yZXBsYWNlKC9bXy1dKy8sICcgJykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFRleHQodGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkLCBjb250ZW50OiBzdHJpbmdbXSwgcHJlcGVuZCA9ICcnKTogc3RyaW5nW10ge1xuICAvLyBDb25zdHJhaW4gdGhlIHdpZHRoIG9mIHRoZSBkZXNjcmlwdGlvblxuICBpZiAoIXRleHQpIHJldHVybiBjb250ZW50O1xuICBjb25zdCB3aWR0aCA9IDgwO1xuXG4gIGxldCBkZXNjcmlwdGlvbiA9IHRleHRcbiAgICAudHJpbSgpXG4gICAgLnJlcGxhY2VBbGwoJ1xcclxcbicsICdcXG4nKSAvLyBDb252ZXJ0IENSIHRvIExGXG4gICAgLnJlcGxhY2VBbGwoLyArL2csICcgJykgLy8gICAgU3F1YXNoIGNvbnNlY3V0aXZlIHNwYWNlc1xuICAgIC5yZXBsYWNlQWxsKCcgXFxuJywgJ1xcbicpOyAvLyAgU3F1YXNoIHNwYWNlIGZvbGxvd2VkIGJ5IG5ld2xpbmVcblxuICB3aGlsZSAoZGVzY3JpcHRpb24pIHtcbiAgICAvLyBMb25nZXIgdGhhbiB3aWR0aD8gRmluZCBhIHNwYWNlIHRvIGJyZWFrIGFwYXJ0XG4gICAgbGV0IHNlZ21lbnQ6IHN0cmluZztcbiAgICBpZiAoZGVzY3JpcHRpb24ubGVuZ3RoID4gd2lkdGgpIHtcbiAgICAgIHNlZ21lbnQgPSBkZXNjcmlwdGlvbi5zbGljZSgwLCBNYXRoLm1heCgwLCB3aWR0aCArIDEpKTtcbiAgICAgIHdoaWxlICghc2VnbWVudC5lbmRzV2l0aCgnICcpICYmICFzZWdtZW50LmVuZHNXaXRoKCdcXG4nKSAmJiBzZWdtZW50KSB7XG4gICAgICAgIHNlZ21lbnQgPSBzZWdtZW50LnNsaWNlKDAsIE1hdGgubWF4KDAsIHNlZ21lbnQubGVuZ3RoIC0gMSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBUcmltbWVkIHRvbyBtdWNoP1xuICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoIDwgd2lkdGggKiAwLjY3KSB7XG4gICAgICAgIHNlZ21lbnQgPSBkZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VnbWVudCA9IGRlc2NyaXB0aW9uO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBuZXdsaW5lXG4gICAgY29uc3QgbmV3bGluZUluZGV4ID0gc2VnbWVudC5pbmRleE9mKCdcXG4nKTtcbiAgICBpZiAobmV3bGluZUluZGV4ID49IDApIHtcbiAgICAgIHNlZ21lbnQgPSBzZWdtZW50LnNsaWNlKDAsIE1hdGgubWF4KDAsIG5ld2xpbmVJbmRleCArIDEpKTtcbiAgICB9XG4gICAgY29udGVudC5wdXNoKGAke3ByZXBlbmR9JHtzZWdtZW50fWAudHJpbUVuZCgpKTtcbiAgICAvLyBSZW1haW5pbmdcbiAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnNsaWNlKHNlZ21lbnQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUmVwbyB7XG4gIG93bmVyOiBzdHJpbmc7XG4gIHJlcG86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcG9zaXRvcnlGaW5kZXIoXG4gIGlucHV0UmVwbzogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbCxcbiAgY29udGV4dDogQ29udGV4dCB8IHVuZGVmaW5lZCB8IG51bGwsXG4pOiBSZXBvIHwgbnVsbCB7XG4gIGNvbnN0IGxvZyA9IG5ldyBMb2dUYXNrKCdyZXBvc2l0b3J5RmluZGVyJyk7XG4gIGNvbnN0IG9iaiA9IHt9IGFzIHVua25vd247XG4gIGNvbnN0IHJlc3VsdCA9IG9iaiBhcyBSZXBvO1xuICBpZiAoaW5wdXRSZXBvKSB7XG4gICAgW3Jlc3VsdC5vd25lciwgcmVzdWx0LnJlcG9dID0gaW5wdXRSZXBvLnNwbGl0KCcvJykgYXMgW3N0cmluZywgc3RyaW5nXTtcbiAgICBsb2cuaW5mbyhgcmVwb3NpdG9yeUZpbmRlciB1c2luZyBpbnB1dCAke2lucHV0UmVwb30gYW5kIHJldHVybnMgJHtKU09OLnN0cmluZ2lmeShyZXN1bHQpfWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52LkdJVEhVQl9SRVBPU0lUT1JZKSB7XG4gICAgW3Jlc3VsdC5vd25lciwgcmVzdWx0LnJlcG9dID0gcHJvY2Vzcy5lbnYuR0lUSFVCX1JFUE9TSVRPUlkuc3BsaXQoJy8nKSBhcyBbc3RyaW5nLCBzdHJpbmddO1xuICAgIGxvZy5pbmZvKFxuICAgICAgYHJlcG9zaXRvcnlGaW5kZXIgdXNpbmcgR0lUSFVCX1JFUE9TSVRPUlkgJHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuR0lUSFVCX1JFUE9TSVRPUllcbiAgICAgIH0gYW5kIHJldHVybnMgJHtKU09OLnN0cmluZ2lmeShyZXN1bHQpfWAsXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjb250ZXh0KSB7XG4gICAgcmVzdWx0Lm93bmVyID0gY29udGV4dC5yZXBvLm93bmVyO1xuICAgIHJlc3VsdC5yZXBvID0gY29udGV4dC5yZXBvLnJlcG87XG5cbiAgICBsb2cuaW5mbyhcbiAgICAgIGByZXBvc2l0b3J5RmluZGVyIHVzaW5nIEdJVEhVQl9SRVBPU0lUT1JZICR7XG4gICAgICAgIHByb2Nlc3MuZW52LkdJVEhVQl9SRVBPU0lUT1JZXG4gICAgICB9IGFuZCByZXR1cm5zICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX1gLFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuSU5QVVRfT1dORVIgJiYgcHJvY2Vzcy5lbnYuSU5QVVRfUkVQTykge1xuICAgIHJlc3VsdC5vd25lciA9IHByb2Nlc3MuZW52LklOUFVUX09XTkVSO1xuICAgIHJlc3VsdC5yZXBvID0gcHJvY2Vzcy5lbnYuSU5QVVRfUkVQTztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgZmlsZUNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoJy5naXQvY29uZmlnJywgJ3V0ZjgnKTtcbiAgICBjb25zdCBwYXR0ZXJuID0gL3VybCggKT89KCApPy4qZ2l0aHViXFwuY29tWy86XSg/PG93bmVyPi4qKVxcLyg/PHJlcG8+LiopXFwuZ2l0LztcblxuICAgIGludGVyZmFjZSBPd25lclJlcG9JbnRlcmZhY2UgZXh0ZW5kcyBSZWdFeHBFeGVjQXJyYXkge1xuICAgICAgZ3JvdXBzPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgICAgIG93bmVyOiBzdHJpbmc7XG4gICAgICAgIHJlcG86IHN0cmluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0cyA9IGZpbGVDb250ZW50Lm1hdGNoKHBhdHRlcm4pIGFzIE93bmVyUmVwb0ludGVyZmFjZTtcbiAgICBpZiAocmVzdWx0cyAhPT0gbnVsbCkge1xuICAgICAgbG9nLmRlYnVnKEpTT04uc3RyaW5naWZ5KHJlc3VsdHMuZ3JvdXBzKSk7XG4gICAgICByZXN1bHQub3duZXIgPSByZXN1bHRzLmdyb3Vwcz8ub3duZXIgPz8gJyc7XG4gICAgICByZXN1bHQucmVwbyA9IHJlc3VsdHMuZ3JvdXBzPy5yZXBvID8/ICcnO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIGNhbid0IGZpbmQgaXRcbiAgICBsb2cuZGVidWcoYENvdWxkbid0IGZpbmQgYW55IG93bmVyIG9yIHJlcG86ICR7ZXJyb3J9YCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdpdF9kZWZhdWx0X2JyYW5jaCgpOiBzdHJpbmcge1xuICAvLyBnaXQgc3ltYm9saWMtcmVmIHJlZnMvcmVtb3Rlcy9vcmlnaW4vSEVBRCB8IHNlZCAnc0BecmVmcy9yZW1vdGVzL29yaWdpbi9AQCdcbiAgcmV0dXJuICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sdW1uSGVhZGVyKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IG5vcm1hbGlzZWRIZWFkZXIgPSB0aXRsZWNhc2UoXG4gICAgdmFsdWVcbiAgICAgIC50cmltKClcbiAgICAgIC5yZXBsYWNlKC9eWypffl0rLywgJycpXG4gICAgICAucmVwbGFjZSgvWypffl0rJC8sICcnKSxcbiAgKTtcbiAgaWYgKG5vcm1hbGlzZWRIZWFkZXIpIHtcbiAgICByZXR1cm4gYCoqJHtub3JtYWxpc2VkSGVhZGVyfSoqYDtcbiAgfVxuICByZXR1cm4gJyc7XG59XG5leHBvcnQgZnVuY3Rpb24gcm93SGVhZGVyKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IG5vcm1hbGlzZWRIZWFkZXIgPSB2YWx1ZS50cmltKCkucmVwbGFjZSgvXlxcKisvLCAnJykucmVwbGFjZSgvXFwqKyQvLCAnJyk7XG4gIHJldHVybiBgXFxgKioke25vcm1hbGlzZWRIZWFkZXJ9KipcXGBgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFZlcnNpb25TdHJpbmcoaW5wdXRzOiBJbnB1dHMpOiBzdHJpbmcge1xuICBsZXQgdmVyc2lvblN0cmluZyA9ICcnO1xuICBjb25zdCBsb2cgPSBuZXcgTG9nVGFzaygnZ2V0Q3VycmVudFZlcnNpb25TdHJpbmcnKTtcbiAgaWYgKGlucHV0cy5jb25maWcuZ2V0KCd2ZXJzaW9uaW5nOmVuYWJsZWQnKSkge1xuICAgIGxvZy5kZWJ1ZygndmVyc2lvbiBzdHJpbmcgaW4gZ2VuZXJhdGVkIGV4YW1wbGUgaXMgZW5hYmxlZCcpO1xuICAgIGNvbnN0IG9SaWRlID0gaW5wdXRzLmNvbmZpZy5nZXQoJ3ZlcnNpb25pbmc6b3ZlcnJpZGUnKSBhcyBzdHJpbmc7XG4gICAgbGV0IHBhY2thZ2VWZXJzaW9uID0gcHJvY2Vzcy5lbnYubnBtX3BhY2thZ2VfdmVyc2lvbjtcbiAgICBsb2cuZGVidWcoYHZlcnNpb24gc3RyaW5nIGluIGVudjpucG1fcGFja2FnZV92ZXJzaW9uIGlzICR7cGFja2FnZVZlcnNpb24gPz8gJ25vdCBmb3VuZCd9YCk7XG4gICAgaWYgKCFwYWNrYWdlVmVyc2lvbikge1xuICAgICAgbG9nLmRlYnVnKCd2ZXJzaW9uIHN0cmluZyBpbiBlbnY6bnBtX3BhY2thZ2VfdmVyc2lvbiBpcyBub3QgZm91bmQsIHRyeWluZyB0byB1c2UgZ2l0Jyk7XG4gICAgICB0cnkge1xuICAgICAgICBmcy5hY2Nlc3NTeW5jKCdwYWNrYWdlLmpzb24nKTtcbiAgICAgICAgY29uc3QgcGFja2FnZURhdGE6IFBhcnRpYWw8UGFja2FnZUpzb24+ID0gSlNPTi5wYXJzZShcbiAgICAgICAgICBmcy5yZWFkRmlsZVN5bmMoJ3BhY2thZ2UuanNvbicsICd1dGY4JyksXG4gICAgICAgICk7XG4gICAgICAgIHBhY2thZ2VWZXJzaW9uID0gcGFja2FnZURhdGEudmVyc2lvbjtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgcGFja2FnZS5qc29uIG5vdCBmb3VuZC4gJHtlcnJvcn1gKTtcbiAgICAgIH1cbiAgICAgIGxvZy5kZWJ1ZyhgdmVyc2lvbiBzdHJpbmcgaW4gcGFja2FnZS5qc29uOnZlcnNpb24gaXMgJHtwYWNrYWdlVmVyc2lvbiA/PyAnbm90IGZvdW5kJ31gKTtcbiAgICB9XG5cbiAgICB2ZXJzaW9uU3RyaW5nID0gb1JpZGUgJiYgb1JpZGUubGVuZ3RoID4gMCA/IG9SaWRlIDogcGFja2FnZVZlcnNpb24gPz8gJzAuMC4wJztcblxuICAgIGlmIChcbiAgICAgIHZlcnNpb25TdHJpbmcgJiZcbiAgICAgICF2ZXJzaW9uU3RyaW5nLnN0YXJ0c1dpdGgoaW5wdXRzLmNvbmZpZy5nZXQoJ3ZlcnNpb25pbmc6cHJlZml4JykgYXMgc3RyaW5nKVxuICAgICkge1xuICAgICAgdmVyc2lvblN0cmluZyA9IGAke2lucHV0cy5jb25maWcuZ2V0KCd2ZXJzaW9uaW5nOnByZWZpeCcpIGFzIHN0cmluZ30ke3ZlcnNpb25TdHJpbmd9YDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmVyc2lvblN0cmluZyA9IGlucHV0cy5jb25maWcuZ2V0KCd2ZXJzaW9uaW5nOmJyYW5jaCcpIGFzIHN0cmluZztcbiAgfVxuICBsb2cuZGVidWcoYHZlcnNpb24gdG8gdXNlIGluIGdlbmVyYXRlZCBleGFtcGxlIGlzICR7dmVyc2lvblN0cmluZ31gKTtcbiAgcmV0dXJuIHZlcnNpb25TdHJpbmc7XG59XG4iLCAiaW1wb3J0ICogYXMgZnMgZnJvbSAnbm9kZTpmcyc7XG5pbXBvcnQgeyBFT0wgfSBmcm9tICdub2RlOm9zJztcblxuaW1wb3J0IExvZ1Rhc2sgZnJvbSAnLi9sb2d0YXNrJztcbmltcG9ydCB7IGZvcm1hdE1hcmtkb3duIH0gZnJvbSAnLi9wcmV0dGllcic7XG5cbmV4cG9ydCBjb25zdCBzdGFydFRva2VuRm9ybWF0ID0gJzwhLS0gc3RhcnQgJXMgLS0+JztcbmV4cG9ydCBjb25zdCBlbmRUb2tlbkZvcm1hdCA9ICc8IS0tIGVuZCAlcyAtLT4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFkbWVFZGl0b3Ige1xuICBwcml2YXRlIHJlYWRvbmx5IGZpbGVQYXRoOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBmaWxlQ29udGVudDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGZpbGVQYXRoOiBzdHJpbmcpIHtcbiAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XG4gICAgdGhpcy5maWxlQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcbiAgfVxuXG4gIHVwZGF0ZVNlY3Rpb24obmFtZTogc3RyaW5nLCBwcm92aWRlZENvbnRlbnQ6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgY29uc3QgbG9nID0gbmV3IExvZ1Rhc2sobmFtZSk7XG4gICAgY29uc3QgY29udGVudCA9IEFycmF5LmlzQXJyYXkocHJvdmlkZWRDb250ZW50KSA/IHByb3ZpZGVkQ29udGVudC5qb2luKEVPTCkgOiBwcm92aWRlZENvbnRlbnQ7XG4gICAgbG9nLmluZm8oYExvb2tpbmcgZm9yIHRoZSAke25hbWV9IHRva2VuIGluICR7dGhpcy5maWxlUGF0aH1gKTtcbiAgICBjb25zdCBzdGFydFRva2VuID0gc3RhcnRUb2tlbkZvcm1hdC5yZXBsYWNlKCclcycsIG5hbWUpO1xuICAgIGNvbnN0IHN0b3BUb2tlbiA9IGVuZFRva2VuRm9ybWF0LnJlcGxhY2UoJyVzJywgbmFtZSk7XG5cbiAgICBjb25zdCBzdGFydEluZGV4ID0gdGhpcy5maWxlQ29udGVudC5pbmRleE9mKHN0YXJ0VG9rZW4pO1xuICAgIGNvbnN0IHN0b3BJbmRleCA9IHRoaXMuZmlsZUNvbnRlbnQuaW5kZXhPZihzdG9wVG9rZW4pO1xuXG4gICAgaWYgKHN0YXJ0SW5kZXggIT09IC0xICYmIHN0b3BJbmRleCAhPT0gLTEpIHtcbiAgICAgIGNvbnN0IGJlZm9yZUNvbnRlbnQgPSB0aGlzLmZpbGVDb250ZW50LnNsaWNlKDAsIE1hdGgubWF4KDAsIHN0YXJ0SW5kZXggKyBzdGFydFRva2VuLmxlbmd0aCkpO1xuICAgICAgY29uc3QgYWZ0ZXJDb250ZW50ID0gdGhpcy5maWxlQ29udGVudC5zbGljZShzdG9wSW5kZXgpO1xuXG4gICAgICB0aGlzLmZpbGVDb250ZW50ID0gYCR7YmVmb3JlQ29udGVudH1cXG4ke2NvbnRlbnR9XFxuJHthZnRlckNvbnRlbnR9YDtcbiAgICB9IGVsc2UgaWYgKHN0b3BJbmRleCA8IHN0YXJ0SW5kZXgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU3RhcnQgdG9rZW4gZm9yIHNlY3Rpb24gJyR7bmFtZX0gbXVzdCBhcHBlYXIgYmVmb3JlIGVuZCB0b2tlbmApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGR1bXBUb0ZpbGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY29udGVudCA9IGF3YWl0IGZvcm1hdE1hcmtkb3duKHRoaXMuZmlsZUNvbnRlbnQpO1xuICAgIHJldHVybiBmcy53cml0ZUZpbGVTeW5jKHRoaXMuZmlsZVBhdGgsIGNvbnRlbnQsICd1dGY4Jyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBmb3JtYXQgfSBmcm9tICdwcmV0dGllcic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmb3JtYXRZYW1sKHZhbHVlOiBzdHJpbmcsIGZpbGVwYXRoPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgZnAgPSBmaWxlcGF0aCA/IHsgZmlsZXBhdGggfSA6IHt9O1xuICByZXR1cm4gZm9ybWF0KHZhbHVlLCB7XG4gICAgc2VtaTogZmFsc2UsXG4gICAgcGFyc2VyOiAneWFtbCcsXG4gICAgZW1iZWRkZWRMYW5ndWFnZUZvcm1hdHRpbmc6ICdhdXRvJyxcbiAgICAuLi5mcCxcbiAgfSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZm9ybWF0TWFya2Rvd24odmFsdWU6IHN0cmluZywgZmlsZXBhdGg/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBmcCA9IGZpbGVwYXRoID8geyBmaWxlcGF0aCB9IDoge307XG4gIHJldHVybiBmb3JtYXQodmFsdWUsIHtcbiAgICBzZW1pOiBmYWxzZSxcbiAgICBwYXJzZXI6ICdtYXJrZG93bicsXG4gICAgZW1iZWRkZWRMYW5ndWFnZUZvcm1hdHRpbmc6ICdhdXRvJyxcbiAgICAuLi5mcCxcbiAgfSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd3JhcERlc2NyaXB0aW9uKFxuICB2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBjb250ZW50OiBzdHJpbmdbXSxcbiAgcHJlZml4OiBzdHJpbmcsXG4pOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIGlmICghdmFsdWUpIHJldHVybiBjb250ZW50ID8/IFtdO1xuICBjb25zdCB2YWx1ZVdpdGhvdXRQcmVmaXggPSBwcmVmaXggPyB2YWx1ZS5yZXBsYWNlKHByZWZpeCwgJycpIDogdmFsdWU7XG4gIGNvbnN0IGZvcm1hdHRlZFN0cmluZyA9IGF3YWl0IGZvcm1hdChgJHtwcmVmaXggPz8gJyd9JHt2YWx1ZVdpdGhvdXRQcmVmaXh9YCwge1xuICAgIHNlbWk6IGZhbHNlLFxuICAgIHBhcnNlcjogJ3lhbWwnLFxuICAgIHByb3NlV3JhcDogJ2Fsd2F5cycsXG4gIH0pO1xuICBjb250ZW50LnB1c2goLi4uZm9ybWF0dGVkU3RyaW5nLnNwbGl0KCdcXG4nKSk7XG4gIHJldHVybiBjb250ZW50O1xufVxuIiwgImV4cG9ydCBmdW5jdGlvbiB3b3JraW5nRGlyZWN0b3J5KCk6IHN0cmluZyB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5HSVRIVUJfV09SS1NQQUNFID8/IHByb2Nlc3MuZW52LklOSVRfQ1dEID8/IHByb2Nlc3MuY3dkKCk7XG59XG5leHBvcnQgZGVmYXVsdCB3b3JraW5nRGlyZWN0b3J5O1xuIiwgImltcG9ydCBmcyBmcm9tICdub2RlOmZzJztcbmltcG9ydCBwYXRoIGZyb20gJ25vZGU6cGF0aCc7XG5cbmltcG9ydCB0eXBlIElucHV0cyBmcm9tICcuL2lucHV0cyc7XG5pbXBvcnQgTG9nVGFzayBmcm9tICcuL2xvZ3Rhc2snO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZlcnNpb25pbmcge1xuICBlbmFibGVkPzogYm9vbGVhbjtcbiAgcHJlZml4Pzogc3RyaW5nO1xuICBvdmVycmlkZT86IHN0cmluZztcbiAgYnJhbmNoPzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBQYXRocyB7XG4gIGFjdGlvbjogc3RyaW5nO1xuICByZWFkbWU6IHN0cmluZztcbn1cbmV4cG9ydCBjbGFzcyBHSEFjdGlvbkRvY3NDb25maWcge1xuICBvd25lcj86IHN0cmluZztcblxuICByZXBvPzogc3RyaW5nO1xuXG4gIHRpdGxlX3ByZWZpeD86IHN0cmluZztcblxuICB0aXRsZT86IHN0cmluZztcblxuICBwYXRocz86IFBhdGhzO1xuXG4gIHNob3dfbG9nbz86IGJvb2xlYW47XG5cbiAgdmVyc2lvbmluZz86IFZlcnNpb25pbmc7XG5cbiAgcmVhZG1lUGF0aD86IHN0cmluZztcblxuICBvdXRwYXRoPzogc3RyaW5nO1xuXG4gIHByZXR0eT86IGJvb2xlYW47XG5cbiAgbG9hZElucHV0cyhpbnB1dHM6IElucHV0cyk6IHZvaWQge1xuICAgIHRoaXMub3duZXIgPSBpbnB1dHMuY29uZmlnLmdldCgnb3duZXInKSBhcyBzdHJpbmc7XG4gICAgdGhpcy5yZXBvID0gaW5wdXRzLmNvbmZpZy5nZXQoJ3JlcG8nKSBhcyBzdHJpbmc7XG4gICAgdGhpcy50aXRsZV9wcmVmaXggPSBpbnB1dHMuY29uZmlnLmdldCgndGl0bGVfcHJlZml4JykgYXMgc3RyaW5nO1xuICAgIHRoaXMudGl0bGUgPSBpbnB1dHMuY29uZmlnLmdldCgndGl0bGUnKSBhcyBzdHJpbmc7XG4gICAgdGhpcy5wYXRocyA9IGlucHV0cy5jb25maWcuZ2V0KCdwYXRocycpIGFzIFBhdGhzO1xuICAgIHRoaXMuc2hvd19sb2dvID0gaW5wdXRzLmNvbmZpZy5nZXQoJ3Nob3dfbG9nbycpIGFzIGJvb2xlYW47XG4gICAgdGhpcy52ZXJzaW9uaW5nID0ge1xuICAgICAgZW5hYmxlZDogaW5wdXRzLmNvbmZpZy5nZXQoJ3ZlcnNpb25pbmc6ZW5hYmxlZCcpIGFzIGJvb2xlYW4sXG4gICAgICBwcmVmaXg6IGlucHV0cy5jb25maWcuZ2V0KCd2ZXJzaW9uaW5nOnByZWZpeCcpIGFzIHN0cmluZyxcbiAgICAgIG92ZXJyaWRlOiBpbnB1dHMuY29uZmlnLmdldCgndmVyc2lvbmluZzpvdmVycmlkZScpIGFzIHN0cmluZyxcbiAgICAgIGJyYW5jaDogaW5wdXRzLmNvbmZpZy5nZXQoJ3ZlcnNpb25pbmc6YnJhbmNoJykgYXMgc3RyaW5nLFxuICAgIH07XG4gICAgdGhpcy5vdXRwYXRoID0gaW5wdXRzLmNvbmZpZy5nZXQoJ291dHBhdGgnKSBhcyBzdHJpbmc7XG4gICAgdGhpcy5wcmV0dHkgPSBpbnB1dHMuY29uZmlnLmdldCgncHJldHR5JykgYXMgYm9vbGVhbjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gY29uZmlnUGF0aCB7c3RyaW5nfVxuICAgKiBAZGVzY3JpcHRpb24gU2F2ZXMgdGhlIGNvbmZpZyB0byBhIGZpbGUsaWYgdGhlIGZpbGUgZXhpc3RzIGl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBzYXZlKGNvbmZpZ1BhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGxvZyA9IG5ldyBMb2dUYXNrKCdjb25maWc6c2F2ZScpO1xuICAgIC8vIHZhbGlkYXRlIHRoYXQgdGhhdCB0aGUgZGlyZWN0b3J5IGV4aXN0c1xuICAgIGNvbnN0IGRpcmVjdG9yeSA9IHBhdGguZGlybmFtZShjb25maWdQYXRoKTtcbiAgICAvLyBtYWtlIHRoZSBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgIGZzLm1rZGlyKGRpcmVjdG9yeSwgeyByZWN1cnNpdmU6IHRydWUgfSwgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBsb2cuZXJyb3IoYEVycm9yIGNyZWF0aW5nIGRpcmVjdG9yeTogJHtkaXJlY3Rvcnl9LiBFcnJvcjogJHtlcnJ9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZzLndyaXRlRmlsZShjb25maWdQYXRoLCBKU09OLnN0cmluZ2lmeSh0aGlzLCBudWxsLCAyKSwgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBsb2cuZXJyb3IoYEVycm9yIHdyaXRpbmcgY29uZmlnIGZpbGU6ICR7Y29uZmlnUGF0aH0uIEVycm9yOiAke2Vycn1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5pbmZvKGBDb25maWcgZmlsZSB3cml0dGVuIHRvOiAke2NvbmZpZ1BhdGh9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBHSEFjdGlvbkRvY3NDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgSW5wdXRzIGZyb20gJy4vaW5wdXRzJztcblxuLy8gVGhpcyBzY3JpcHQgcmVidWlsZHMgdGhlIHVzYWdlIHNlY3Rpb24gaW4gdGhlIFJFQURNRS5tZCB0byBiZSBjb25zaXN0ZW50IHdpdGggdGhlIGFjdGlvbi55bWxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhdmUoaW5wdXRzOiBJbnB1dHMpOiB2b2lkIHtcbiAgY29uc3QgZG9jc0NvbmZpZyA9IG5ldyBHSEFjdGlvbkRvY3NDb25maWcoKTtcbiAgZG9jc0NvbmZpZy5sb2FkSW5wdXRzKGlucHV0cyk7XG4gIGlmIChpbnB1dHMuY29uZmlnLmdldCgnc2F2ZScpLnRvU3RyaW5nKCkgPT09ICd0cnVlJykge1xuICAgIGRvY3NDb25maWcuc2F2ZShpbnB1dHMuY29uZmlnUGF0aCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IFJlcG8gfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB0eXBlIElucHV0cyBmcm9tICcuLi9pbnB1dHMnO1xuaW1wb3J0IExvZ1Rhc2sgZnJvbSAnLi4vbG9ndGFzayc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJhZGdlIHtcbiAgYWx0OiBzdHJpbmc7XG4gIGltZzogc3RyaW5nO1xuICB1cmw/OiBzdHJpbmc7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVCYWRnZXModG9rZW46IHN0cmluZywgaW5wdXRzOiBJbnB1dHMpOiB2b2lkIHtcbiAgY29uc3QgbG9nID0gbmV3IExvZ1Rhc2sodG9rZW4pO1xuICBjb25zdCBlbmFibGVWZXJzaW9uaW5nID0gaW5wdXRzLmNvbmZpZy5nZXQoJ3ZlcnNpb25pbmc6YmFkZ2VzJyk7XG4gIGNvbnN0IGJhZGdlczogSUJhZGdlW10gPSBbXTtcbiAgY29uc3QgcmVwb3M6IFJlcG8gPSB7XG4gICAgb3duZXI6IGlucHV0cy5jb25maWcuZ2V0KCdvd25lcicpLFxuICAgIHJlcG86IGlucHV0cy5jb25maWcuZ2V0KCdyZXBvJyksXG4gIH07XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdpdGh1YiBiYWRnZXMuXG4gICAqIEBwYXJhbSBnaXRodWJJZFxuICAgKi9cbiAgZnVuY3Rpb24gZ2l0aHViQmFkZ2VzKCk6IElCYWRnZVtdIHtcbiAgICBjb25zdCByZXBvVXJsID0gYGh0dHBzOi8vZ2l0aHViLmNvbS8ke3JlcG9zLm93bmVyfS8ke3JlcG9zLnJlcG99YDtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICBpbWc6IGBodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdGh1Yi92L3JlbGVhc2UvJHtyZXBvcy5vd25lcn0vJHtyZXBvcy5yZXBvfT9kaXNwbGF5X25hbWU9dGFnJnNvcnQ9c2VtdmVyJmxvZ289Z2l0aHViJnN0eWxlPWZsYXQtc3F1YXJlYCxcbiAgICAgICAgYWx0OiAnUmVsZWFzZScsXG4gICAgICAgIHVybDogYCR7cmVwb1VybH0vcmVsZWFzZXMvbGF0ZXN0YCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGltZzogYGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3JlbGVhc2UtZGF0ZS8ke3JlcG9zLm93bmVyfS8ke3JlcG9zLnJlcG99P2Rpc3BsYXlfbmFtZT10YWcmc29ydD1zZW12ZXImbG9nbz1naXRodWImc3R5bGU9ZmxhdC1zcXVhcmVgLFxuICAgICAgICBhbHQ6ICdSZWxlYXNlJyxcbiAgICAgICAgdXJsOiBgJHtyZXBvVXJsfS9yZWxlYXNlcy9sYXRlc3RgLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW1nOiBgaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvbGFzdC1jb21taXQvJHtyZXBvcy5vd25lcn0vJHtyZXBvcy5yZXBvfT9sb2dvPWdpdGh1YiZzdHlsZT1mbGF0LXNxdWFyZWAsXG4gICAgICAgIGFsdDogJ0NvbW1pdCcsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbWc6IGBodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdGh1Yi9pc3N1ZXMvJHtyZXBvcy5vd25lcn0vJHtyZXBvcy5yZXBvfT9sb2dvPWdpdGh1YiZzdHlsZT1mbGF0LXNxdWFyZWAsXG4gICAgICAgIGFsdDogJ09wZW4gSXNzdWVzJyxcbiAgICAgICAgdXJsOiBgJHtyZXBvVXJsfS9pc3N1ZXNgLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW1nOiBgaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvZG93bmxvYWRzLyR7cmVwb3Mub3duZXJ9LyR7cmVwb3MucmVwb30vdG90YWw/bG9nbz1naXRodWImc3R5bGU9ZmxhdC1zcXVhcmVgLFxuICAgICAgICBhbHQ6ICdEb3dubG9hZHMnLFxuICAgICAgfSxcbiAgICBdO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBiYWRnZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdlbmVyYXRlQmFkZ2UoaXRlbTogSUJhZGdlKTogc3RyaW5nIHtcbiAgICBjb25zdCBiYWRnZVRlbXBsYXRlID0gYDxpbWcgc3JjPVwiJHtpdGVtLmltZ31cIiBhbHQ9XCIke2l0ZW0uYWx0IHx8ICcnfVwiIC8+YDtcbiAgICBpZiAoaXRlbS51cmwpIHtcbiAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aXRlbS51cmx9XCI+JHtiYWRnZVRlbXBsYXRlfTwvYT5gO1xuICAgIH1cbiAgICByZXR1cm4gYmFkZ2VUZW1wbGF0ZTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGFsbCBiYWRnZXMuXG4gICAqL1xuICBmdW5jdGlvbiBnZW5lcmF0ZUJhZGdlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgYmFkZ2VBcnJheSA9IFtdO1xuICAgIGZvciAoY29uc3QgYiBvZiBiYWRnZXMpIHtcbiAgICAgIGJhZGdlQXJyYXkucHVzaChnZW5lcmF0ZUJhZGdlKGIpKTtcbiAgICB9XG4gICAgcmV0dXJuIFtiYWRnZUFycmF5LmpvaW4oJycpXTtcbiAgfVxuXG4gIGxvZy5zdGFydCgpO1xuXG4gIC8vIEFkZCBHaXRodWIgYmFkZ2VzXG4gIGlmIChlbmFibGVWZXJzaW9uaW5nKSB7XG4gICAgYmFkZ2VzLnB1c2goLi4uZ2l0aHViQmFkZ2VzKCkpO1xuICB9XG4gIGNvbnN0IGNvbnRlbnQgPSBnZW5lcmF0ZUJhZGdlcygpO1xuICBpbnB1dHMucmVhZG1lRWRpdG9yLnVwZGF0ZVNlY3Rpb24odG9rZW4sIGNvbnRlbnQpO1xuXG4gIGxvZy5zdWNjZXNzKCk7XG59XG4iLCAiaW1wb3J0IHR5cGUgSW5wdXRzIGZyb20gJy4uL2lucHV0cyc7XG5pbXBvcnQgTG9nVGFzayBmcm9tICcuLi9sb2d0YXNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlRGVzY3JpcHRpb24odG9rZW46IHN0cmluZywgaW5wdXRzOiBJbnB1dHMpOiB2b2lkIHtcbiAgY29uc3QgbG9nID0gbmV3IExvZ1Rhc2sodG9rZW4pO1xuICAvLyBCdWlsZCB0aGUgbmV3IFJFQURNRVxuICBjb25zdCBjb250ZW50OiBzdHJpbmdbXSA9IFtdO1xuICAvLyBCdWlsZCB0aGUgbmV3IGRlc2NyaXB0aW9uIHNlY3Rpb25cbiAgaWYgKGlucHV0cz8uYWN0aW9uPy5kZXNjcmlwdGlvbikge1xuICAgIGxvZy5zdGFydCgpO1xuICAgIGNvbnN0IGRlc2M6IHN0cmluZyA9IGlucHV0cy5hY3Rpb24uZGVzY3JpcHRpb25cbiAgICAgIC50cmltKClcbiAgICAgIC5yZXBsYWNlQWxsKCdcXHJcXG4nLCAnXFxuJykgLy8gQ29udmVydCBDUiB0byBMRlxuICAgICAgLnJlcGxhY2VBbGwoLyArL2csICcgJykgLy8gICAgU3F1YXNoIGNvbnNlY3V0aXZlIHNwYWNlc1xuICAgICAgLnJlcGxhY2VBbGwoJyBcXG4nLCAnXFxuJykgLy8gIFNxdWFzaCBzcGFjZSBmb2xsb3dlZCBieSBuZXdsaW5lXG4gICAgICAucmVwbGFjZUFsbCgnXFxuXFxuJywgJzxiciAvPicpOyAvLyBjb252ZXJ0IGRvdWJsZSByZXR1cm4gdG8gYSBicmVha1xuXG4gICAgbG9nLmluZm8oYFdyaXRpbmcgJHtkZXNjLmxlbmd0aH0gY2hhcmFjdGVycyB0byB0aGUgZGVzY3JpcHRpb24gc2VjdGlvbmApO1xuICAgIGNvbnRlbnQucHVzaChkZXNjKTtcbiAgICBpbnB1dHMucmVhZG1lRWRpdG9yLnVwZGF0ZVNlY3Rpb24odG9rZW4sIGNvbnRlbnQpO1xuICAgIGxvZy5zdWNjZXNzKCk7XG4gIH1cbn1cbiIsICJleHBvcnQgdHlwZSBNYXJrZG93bkFycmF5Um93VHlwZSA9IHN0cmluZ1tdW107XG5leHBvcnQgdHlwZSBNYXJrZG93bkFycmF5SXRlbVR5cGUgPSBzdHJpbmc7XG4vKipcbiAqIEZpbGxzIHRoZSB3aWR0aCBvZiB0aGUgY2VsbC5cbiAqIEBwYXJhbSB0ZXh0XG4gKiBAcGFyYW0gd2lkdGhcbiAqIEBwYXJhbSBwYWRkaW5nU3RhcnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbGxXaWR0aCh0ZXh0OiBzdHJpbmcsIHdpZHRoOiBudW1iZXIsIHBhZGRpbmdTdGFydDogbnVtYmVyKTogc3RyaW5nIHtcbiAgcmV0dXJuIChcbiAgICAnICcucmVwZWF0KHBhZGRpbmdTdGFydCkgKyB0ZXh0ICsgJyAnLnJlcGVhdChNYXRoLm1heCgxLCB3aWR0aCAtIHRleHQubGVuZ3RoIC0gcGFkZGluZ1N0YXJ0KSlcbiAgKTtcbn1cbi8qKlxuICogRXNjYXBlIGEgdGV4dCBzbyBpdCBjYW4gYmUgdXNlZCBpbiBhIG1hcmtkb3duIHRhYmxlXG4gKiBAcGFyYW0gdGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFya2Rvd25Fc2NhcGVUYWJsZUNlbGwodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZUFsbCgnXFxuJywgJzxiciAvPicpLnJlcGxhY2VBbGwoJ3wnLCAnXFxcXHwnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtkb3duRXNjYXBlSW5saW5lQ29kZShjb250ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyByZXBsYWNlIGdyYXZlIGFjY2VudHMgd2l0aCA8Y29kZT4gSFRNTCBlbGVtZW50IHRvIHJlc29sdmUgdW5pY29kZSBjaGFyYWN0ZXIgaW4gbWFya2Rvd25cbiAgLy8gbGV0IGlzQ2xvc2luZ1RhZyA9IGZhbHNlO1xuICBpZiAoY29udGVudC5pbmNsdWRlcygnfCcpKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZUFsbCgvKFtcXHMqX118XilgKFteYF0rKWAoW1xccypfXXwkKS9nLCAnJDE8Y29kZT4kMjwvY29kZT4kMycpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xuXG4gIC8vID8uZm9yRWFjaCgobWF0Y2gpID0+IHtcbiAgLy8gICBpZiAoIWlzQ2xvc2luZ1RhZykge1xuICAvLyAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShtYXRjaCwgJzxjb2RlPicpO1xuICAvLyAgIH0gZWxzZSB7XG4gIC8vICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG1hdGNoLCAnPC9jb2RlPicpO1xuICAvLyAgIH1cbiAgLy8gICBpc0Nsb3NpbmdUYWcgPSAhaXNDbG9zaW5nVGFnO1xuICAvLyB9KTtcbiAgLy8gcmV0dXJuIGNvbnRlbnRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFycmF5T2ZBcnJheXNUb01hcmtkb3duVGFibGUocHJvdmlkZWRUYWJsZUNvbnRlbnQ6IE1hcmtkb3duQXJyYXlSb3dUeXBlKTogc3RyaW5nIHtcbiAgY29uc3QgdGFibGVDb250ZW50OiBNYXJrZG93bkFycmF5Um93VHlwZSA9IFtdO1xuICBjb25zdCBvdXRwdXRTdHJpbmdzOiBzdHJpbmdbXSA9IFtdO1xuICAvLyBDbG9uZSB0aGUgYXJyYXlzIHNvIHdlIGRvbid0IG1vZGlmeSB0aGUgb3JpZ2luYWxcbiAgZm9yIChjb25zdCByb3dBIG9mIHByb3ZpZGVkVGFibGVDb250ZW50KSB7XG4gICAgdGFibGVDb250ZW50LnB1c2goWy4uLnJvd0FdIGFzIHN0cmluZ1tdKTtcbiAgfVxuICBjb25zdCBtYXhSb3dzID0gdGFibGVDb250ZW50Lmxlbmd0aDtcbiAgbGV0IG1heENvbHMgPSAwO1xuICBsZXQgbWluQ29scyA9IDA7XG4gIC8vIEZpbmQgdGhlIG1heCBhbmQgbWluIGNvbHVtbnMgc28gd2UgY2FuIHBhZCB0aGUgcm93c1xuICAvLyBmb3IgKGNvbnN0IFtpLCBlXSBvZiB0YWJsZUNvbnRlbnQuZW50cmllcygpKSB7XG4gIGxldCB0YmxJZHggPSAwO1xuICBmb3IgKGNvbnN0IGUgb2YgdGFibGVDb250ZW50KSB7XG4gICAgaWYgKHRhYmxlQ29udGVudFt0YmxJZHhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IG51bUNvbHMgPSBlLmxlbmd0aDtcbiAgICAgIGlmIChudW1Db2xzID4gbWF4Q29scykge1xuICAgICAgICBtYXhDb2xzID0gbnVtQ29scztcbiAgICAgIH1cbiAgICAgIGlmIChudW1Db2xzIDwgbWluQ29scyB8fCBtaW5Db2xzID09PSAwKSB7XG4gICAgICAgIG1pbkNvbHMgPSBudW1Db2xzO1xuICAgICAgfVxuICAgIH1cbiAgICB0YmxJZHggKz0gMTtcbiAgfVxuICBpZiAobWF4Q29scyAhPT0gbWluQ29scykge1xuICAgIGxldCBjbnRJZHggPSAwO1xuICAgIGZvciAoY29uc3QgZSBvZiB0YWJsZUNvbnRlbnQpIHtcbiAgICAgIGlmICh0YWJsZUNvbnRlbnRbY250SWR4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhYmxlQ29udGVudFtjbnRJZHhdID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogbWF4Q29scyB9KS5maWxsKCcnKSBhcyBzdHJpbmdbXTtcbiAgICAgIH0gZWxzZSBpZiAoZS5sZW5ndGggPCBtYXhDb2xzKSB7XG4gICAgICAgIHRhYmxlQ29udGVudFtjbnRJZHhdID0gW1xuICAgICAgICAgIC4uLmUsXG4gICAgICAgICAgLi4uQXJyYXkuZnJvbSh7IGxlbmd0aDogbWF4Q29scyAtIGUubGVuZ3RoIH0pLmZpbGwoJ3VuZGVmaW5lZCcpLFxuICAgICAgICBdIGFzIHN0cmluZ1tdO1xuICAgICAgfVxuICAgICAgY250SWR4ICs9IDE7XG4gICAgfVxuICB9XG4gIGNvbnN0IG1hcmtkb3duQXJyYXlSb3dzTGVuZ3RoID0gbWF4Um93cyArIDE7XG4gIGNvbnN0IG1hcmtkb3duQXJyYXlFbnRyaWVzTGVuZ3RoID0gbWF4Q29scyAqIDIgKyAxO1xuICBjb25zdCBtYXJrZG93bkFycmF5czogTWFya2Rvd25BcnJheVJvd1R5cGUgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBtYXJrZG93bkFycmF5Um93c0xlbmd0aCB9KS5maWxsKFxuICAgIEFycmF5LmZyb20oeyBsZW5ndGg6IG1hcmtkb3duQXJyYXlFbnRyaWVzTGVuZ3RoIH0pLmZpbGwoJ3wnIGFzIHN0cmluZykgYXMgc3RyaW5nW10sXG4gICkgYXMgTWFya2Rvd25BcnJheVJvd1R5cGU7XG4gIGxldCBpID0gMDtcbiAgZm9yIChjb25zdCByb3cgb2YgbWFya2Rvd25BcnJheXMpIHtcbiAgICBsZXQgY29sID0gMDtcblxuICAgIGNvbnN0IGlkeCA9IGkgPiAxID8gaSAtIDEgOiAwO1xuICAgIGNvbnN0IGRhdGFSb3cgPSB0YWJsZUNvbnRlbnRbaWR4XTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGNvbnRlbnQgPSBtYXJrZG93bkVzY2FwZVRhYmxlQ2VsbChkYXRhUm93W2NvbF0gPz8gJycpO1xuXG4gICAgICBjb250ZW50ID0gbWFya2Rvd25Fc2NhcGVJbmxpbmVDb2RlKGNvbnRlbnQpO1xuXG4gICAgICBpZiAoaiAlIDIgPT09IDEpIHtcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICBtYXJrZG93bkFycmF5c1tpXVtqXSA9IGAgKioke2NvbnRlbnQudHJpbSgpfSoqIGA7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMSkge1xuICAgICAgICAgIG1hcmtkb3duQXJyYXlzW2ldW2pdID0gJy0tLSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFya2Rvd25BcnJheXNbaV1bal0gPSBgICR7Y29udGVudC50cmltKCl9IGA7XG4gICAgICAgIH1cbiAgICAgICAgY29sICs9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIG91dHB1dFN0cmluZ3MucHVzaChgJHttYXJrZG93bkFycmF5c1tpXS5qb2luKCcnKX1cXG5gKTtcbiAgICBpICs9IDE7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0U3RyaW5ncy5qb2luKCcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXJyYXlPZkFycmF5c1RvTWFya2Rvd25UYWJsZTtcbiIsICJpbXBvcnQgeyBjb2x1bW5IZWFkZXIsIHJvd0hlYWRlciB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHR5cGUgSW5wdXRzIGZyb20gJy4uL2lucHV0cyc7XG5pbXBvcnQgTG9nVGFzayBmcm9tICcuLi9sb2d0YXNrJztcbmltcG9ydCBtYXJrZG93bmVyIGZyb20gJy4uL21hcmtkb3duZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVJbnB1dHModG9rZW46IHN0cmluZywgaW5wdXRzOiBJbnB1dHMpOiB2b2lkIHtcbiAgY29uc3QgbG9nID0gbmV3IExvZ1Rhc2sodG9rZW4pO1xuICAvLyBCdWlsZCB0aGUgbmV3IFJFQURNRVxuICBjb25zdCBjb250ZW50OiBzdHJpbmdbXSA9IFtdO1xuICBjb25zdCBtYXJrZG93bkFycmF5OiBzdHJpbmdbXVtdID0gW107XG4gIGNvbnN0IHRpdGxlQXJyYXkgPSBbJ0lucHV0JywgJ0Rlc2NyaXB0aW9uJywgJ0RlZmF1bHQnLCAnUmVxdWlyZWQnXTtcbiAgY29uc3QgdGl0bGVzOiBzdHJpbmdbXSA9IFtdO1xuICBmb3IgKGNvbnN0IHQgb2YgdGl0bGVBcnJheSkge1xuICAgIHRpdGxlcy5wdXNoKGNvbHVtbkhlYWRlcih0KSk7XG4gIH1cbiAgbWFya2Rvd25BcnJheS5wdXNoKHRpdGxlcyk7XG4gIGNvbnN0IHZhcnMgPSBpbnB1dHMuYWN0aW9uLmlucHV0cztcbiAgY29uc3QgdEkgPSB2YXJzID8gT2JqZWN0LmtleXModmFycykubGVuZ3RoIDogMDtcbiAgaWYgKHRJID4gMCkge1xuICAgIGxvZy5zdGFydCgpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHZhcnMpKSB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSB2YXJzW2tleV07XG5cbiAgICAgIGxldCBkZXNjcmlwdGlvbiA9IHZhbHVlcz8uZGVzY3JpcHRpb24gPz8gJyc7XG5cbiAgICAgIC8vIENoZWNrIGlmIG9ubHkgZmlyc3QgbGluZSBzaG91bGQgYmUgYWRkZWQgKG9ubHkgc3ViamVjdCB3aXRob3V0IGJvZHkpXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBkZXNjcmlwdGlvbi5tYXRjaCgnKC4qPylcXG5cXG4oW1NzXSopJyk7XG4gICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIGRlc2NyaXB0aW9uID0gbWF0Y2hlc1sxXSB8fCBkZXNjcmlwdGlvbjtcbiAgICAgIH1cblxuICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi50cmltKCkucmVwbGFjZSgnXFxuJywgJzxiciAvPicpO1xuXG4gICAgICBjb25zdCByb3c6IHN0cmluZ1tdID0gW1xuICAgICAgICByb3dIZWFkZXIoa2V5KSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIHZhbHVlcz8uZGVmYXVsdCA/IGBcXGAke3ZhbHVlcy5kZWZhdWx0fVxcYGAgOiAnJyxcbiAgICAgICAgdmFsdWVzPy5yZXF1aXJlZCA/ICcqKnRydWUqKicgOiAnX19mYWxzZV9fJyxcbiAgICAgIF07XG4gICAgICBsb2cuZGVidWcoSlNPTi5zdHJpbmdpZnkocm93KSk7XG4gICAgICBtYXJrZG93bkFycmF5LnB1c2gocm93KTtcbiAgICB9XG4gICAgY29udGVudC5wdXNoKG1hcmtkb3duZXIobWFya2Rvd25BcnJheSkpO1xuICAgIGxvZy5pbmZvKGBBY3Rpb24gaGFzICR7dEl9IHRvdGFsICR7dG9rZW59YCk7XG4gICAgaW5wdXRzLnJlYWRtZUVkaXRvci51cGRhdGVTZWN0aW9uKHRva2VuLCBjb250ZW50KTtcbiAgICBsb2cuc3VjY2VzcygpO1xuICB9IGVsc2Uge1xuICAgIGxvZy5kZWJ1ZyhgQWN0aW9uIGhhcyBubyAke3Rva2VufWApO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgY29sdW1uSGVhZGVyLCByb3dIZWFkZXIgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB0eXBlIElucHV0cyBmcm9tICcuLi9pbnB1dHMnO1xuaW1wb3J0IExvZ1Rhc2sgZnJvbSAnLi4vbG9ndGFzayc7XG5pbXBvcnQgbWFya2Rvd25lciBmcm9tICcuLi9tYXJrZG93bmVyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlT3V0cHV0cyh0b2tlbjogc3RyaW5nLCBpbnB1dHM6IElucHV0cyk6IHZvaWQge1xuICBjb25zdCBsb2cgPSBuZXcgTG9nVGFzayh0b2tlbik7XG5cbiAgLy8gQnVpbGQgdGhlIG5ldyBSRUFETUVcbiAgY29uc3QgY29udGVudDogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdCBtYXJrZG93bkFycmF5OiBzdHJpbmdbXVtdID0gW107XG4gIGNvbnN0IHRpdGxlQXJyYXkgPSBbJ091dHB1dCcsICdEZXNjcmlwdGlvbiddO1xuICBjb25zdCB0aXRsZXM6IHN0cmluZ1tdID0gW107XG4gIGZvciAoY29uc3QgdCBvZiB0aXRsZUFycmF5KSB7XG4gICAgdGl0bGVzLnB1c2goY29sdW1uSGVhZGVyKHQpKTtcbiAgfVxuICBtYXJrZG93bkFycmF5LnB1c2godGl0bGVzKTtcbiAgY29uc3QgdmFycyA9IGlucHV0cy5hY3Rpb24ub3V0cHV0cztcbiAgY29uc3QgdEkgPSB2YXJzID8gT2JqZWN0LmtleXModmFycykubGVuZ3RoIDogMDtcbiAgaWYgKHRJID4gMCkge1xuICAgIGxvZy5zdGFydCgpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHZhcnMpKSB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSB2YXJzW2tleV07XG5cbiAgICAgIGxldCBkZXNjcmlwdGlvbiA9IHZhbHVlcz8uZGVzY3JpcHRpb24gPz8gJyc7XG5cbiAgICAgIC8vIENoZWNrIGlmIG9ubHkgZmlyc3QgbGluZSBzaG91bGQgYmUgYWRkZWQgKG9ubHkgc3ViamVjdCB3aXRob3V0IGJvZHkpXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSAvKC4qPylcXG5cXG4oW1NzXSopLy5leGVjKGRlc2NyaXB0aW9uKTtcbiAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgZGVzY3JpcHRpb24gPSBtYXRjaGVzWzFdIHx8IGRlc2NyaXB0aW9uO1xuICAgICAgfVxuXG4gICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnRyaW0oKS5yZXBsYWNlKCdcXG4nLCAnPGJyIC8+Jyk7XG4gICAgICBjb25zdCByb3c6IHN0cmluZ1tdID0gW3Jvd0hlYWRlcihrZXkpLCBkZXNjcmlwdGlvbl07XG5cbiAgICAgIGxvZy5kZWJ1ZyhKU09OLnN0cmluZ2lmeShyb3cpKTtcbiAgICAgIG1hcmtkb3duQXJyYXkucHVzaChyb3cpO1xuICAgIH1cbiAgICBjb250ZW50LnB1c2gobWFya2Rvd25lcihtYXJrZG93bkFycmF5KSk7XG4gICAgbG9nLmluZm8oYEFjdGlvbiBoYXMgJHt0SX0gdG90YWwgJHt0b2tlbn1gKTtcbiAgICBpbnB1dHMucmVhZG1lRWRpdG9yLnVwZGF0ZVNlY3Rpb24odG9rZW4sIGNvbnRlbnQpO1xuICAgIGxvZy5zdWNjZXNzKCk7XG4gIH0gZWxzZSB7XG4gICAgbG9nLmRlYnVnKGBBY3Rpb24gaGFzIG5vICR7dG9rZW59YCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgdHlwZSBJbnB1dHMgZnJvbSAnLi4vaW5wdXRzJztcbmltcG9ydCBMb2dUYXNrIGZyb20gJy4uL2xvZ3Rhc2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVUaXRsZSh0b2tlbjogc3RyaW5nLCBpbnB1dHM6IElucHV0cyk6IHZvaWQge1xuICBjb25zdCBsb2cgPSBuZXcgTG9nVGFzayh0b2tlbik7XG4gIC8vIEJ1aWxkIHRoZSBuZXcgUkVBRE1FXG4gIGNvbnN0IGNvbnRlbnQ6IHN0cmluZ1tdID0gW107XG4gIGxldCBuYW1lID0gJyc7XG4gIGlmIChpbnB1dHMuYWN0aW9uLm5hbWUpIHtcbiAgICBsb2cuc3RhcnQoKTtcbiAgICBuYW1lID0gaW5wdXRzLmFjdGlvbi5uYW1lO1xuXG4gICAgbG9nLmluZm8oYFdyaXRpbmcgJHtuYW1lLmxlbmd0aH0gY2hhcmFjdGVycyB0byB0aGUgdGl0bGVgKTtcbiAgICBjb25zdCB0aXRsZSA9IGAjICR7aW5wdXRzLmNvbmZpZy5nZXQoJ3RpdGxlX3ByZWZpeCcpIGFzIHN0cmluZ30ke2lucHV0cy5hY3Rpb24ubmFtZX1gO1xuICAgIGxvZy5pbmZvKGBUaXRsZTogJHt0aXRsZX1gKTtcbiAgICAvLyBCdWlsZCB0aGUgbmV3IHVzYWdlIHNlY3Rpb25cbiAgICBjb250ZW50LnB1c2godGl0bGUpO1xuXG4gICAgaW5wdXRzLnJlYWRtZUVkaXRvci51cGRhdGVTZWN0aW9uKHRva2VuLCBjb250ZW50KTtcbiAgICBsb2cuc3VjY2VzcygpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgZ2V0Q3VycmVudFZlcnNpb25TdHJpbmcgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB0eXBlIElucHV0cyBmcm9tICcuLi9pbnB1dHMnO1xuaW1wb3J0IExvZ1Rhc2sgZnJvbSAnLi4vbG9ndGFzayc7XG5pbXBvcnQgeyB3cmFwRGVzY3JpcHRpb24gfSBmcm9tICcuLi9wcmV0dGllcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVVzYWdlKHRva2VuOiBzdHJpbmcsIGlucHV0czogSW5wdXRzKTogdm9pZCB7XG4gIGNvbnN0IGxvZyA9IG5ldyBMb2dUYXNrKHRva2VuKTtcbiAgbG9nLnN0YXJ0KCk7XG4gIGNvbnN0IGFjdGlvbk5hbWUgPSBgJHtpbnB1dHMuY29uZmlnLmdldCgnb3duZXInKSBhcyBzdHJpbmd9LyR7aW5wdXRzLmNvbmZpZy5nZXQoJ3JlcG8nKX1gO1xuICBsb2cuaW5mbyhgQWN0aW9uIG5hbWU6ICR7YWN0aW9uTmFtZX1gKTtcbiAgY29uc3QgdmVyc2lvblN0cmluZzogc3RyaW5nID0gZ2V0Q3VycmVudFZlcnNpb25TdHJpbmcoaW5wdXRzKTtcblxuICBsb2cuaW5mbyhgVmVyc2lvbiBzdHJpbmc6ICR7dmVyc2lvblN0cmluZ31gKTtcblxuICBjb25zdCBhY3Rpb25SZWZlcmVuY2UgPSBgJHthY3Rpb25OYW1lfUAke3ZlcnNpb25TdHJpbmd9YDtcblxuICBpZiAoIWFjdGlvblJlZmVyZW5jZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIGFjdGlvblJlZmVyZW5jZSBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICB9XG5cbiAgLy8gQnVpbGQgdGhlIG5ldyBSRUFETUVcbiAgY29uc3QgY29udGVudDogc3RyaW5nW10gPSBbXTtcbiAgLy8gQnVpbGQgdGhlIG5ldyB1c2FnZSBzZWN0aW9uXG4gIGNvbnRlbnQucHVzaCgnYGBgeWFtbCcsIGAtIHVzZXM6ICR7YWN0aW9uUmVmZXJlbmNlfWAsICcgIHdpdGg6Jyk7XG5cbiAgY29uc3QgaW5wID0gaW5wdXRzLmFjdGlvbi5pbnB1dHM7XG4gIGxldCBmaXJzdElucHV0ID0gdHJ1ZTtcbiAgaWYgKGlucCkge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGlucCkpIHtcbiAgICAgIGNvbnN0IGlucHV0ID0gaW5wW2tleV07XG4gICAgICBpZiAoaW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMaW5lIGJyZWFrIGJldHdlZW4gaW5wdXRzXG4gICAgICAgIGlmICghZmlyc3RJbnB1dCkge1xuICAgICAgICAgIGNvbnRlbnQucHVzaCgnJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb25zdHJhaW4gdGhlIHdpZHRoIG9mIHRoZSBkZXNjcmlwdGlvbiwgYW5kIGFwcGVuZCBpdFxuICAgICAgICB3cmFwRGVzY3JpcHRpb24oaW5wdXQuZGVzY3JpcHRpb24sIGNvbnRlbnQsICcgICAgIyAnKTtcblxuICAgICAgICBpZiAoaW5wdXQuZGVmYXVsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gQXBwZW5kIGJsYW5rIGxpbmUgaWYgZGVzY3JpcHRpb24gaGFkIHBhcmFncmFwaHNcbiAgICAgICAgICBpZiAoaW5wdXQuZGVzY3JpcHRpb24/LnRyaW1FbmQoKS5tYXRjaCgvXFxuICpcXHI/XFxuLykpIHtcbiAgICAgICAgICAgIGNvbnRlbnQucHVzaCgnICAgICMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBEZWZhdWx0XG4gICAgICAgICAgY29udGVudC5wdXNoKGAgICAgIyBEZWZhdWx0OiAke2lucHV0LmRlZmF1bHR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnB1dCBuYW1lXG4gICAgICAgIGNvbnRlbnQucHVzaChgICAgICR7a2V5fTogJydgKTtcblxuICAgICAgICBmaXJzdElucHV0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29udGVudC5wdXNoKCdgYGBcXG4nKTtcblxuICBpbnB1dHMucmVhZG1lRWRpdG9yLnVwZGF0ZVNlY3Rpb24odG9rZW4sIGNvbnRlbnQpO1xuICBsb2cuc3VjY2VzcygpO1xufVxuIiwgImltcG9ydCB0eXBlIElucHV0cyBmcm9tICcuLi9pbnB1dHMnO1xuaW1wb3J0IExvZ1Rhc2sgZnJvbSAnLi4vbG9ndGFzayc7XG5pbXBvcnQgdXBkYXRlQmFkZ2VzIGZyb20gJy4vdXBkYXRlLWJhZGdlcyc7XG5pbXBvcnQgdXBkYXRlRGVzY3JpcHRpb24gZnJvbSAnLi91cGRhdGUtZGVzY3JpcHRpb24nO1xuaW1wb3J0IHVwZGF0ZUlucHV0cyBmcm9tICcuL3VwZGF0ZS1pbnB1dHMnO1xuaW1wb3J0IHVwZGF0ZU91dHB1dHMgZnJvbSAnLi91cGRhdGUtb3V0cHV0cyc7XG5pbXBvcnQgdXBkYXRlVGl0bGUgZnJvbSAnLi91cGRhdGUtdGl0bGUnO1xuaW1wb3J0IHVwZGF0ZVVzYWdlIGZyb20gJy4vdXBkYXRlLXVzYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2VjdGlvbihzZWN0aW9uOiBzdHJpbmcsIGlucHV0czogSW5wdXRzKTogdm9pZCB7XG4gIGNvbnN0IGxvZyA9IG5ldyBMb2dUYXNrKCd1cGRhdGVTZWN0aW9uJyk7XG4gIHN3aXRjaCAoc2VjdGlvbikge1xuICAgIGNhc2UgJ2JhZGdlcyc6IHtcbiAgICAgIHVwZGF0ZUJhZGdlcyhzZWN0aW9uLCBpbnB1dHMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgJ3VzYWdlJzoge1xuICAgICAgdXBkYXRlVXNhZ2Uoc2VjdGlvbiwgaW5wdXRzKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlICd0aXRsZSc6IHtcbiAgICAgIHVwZGF0ZVRpdGxlKHNlY3Rpb24sIGlucHV0cyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAnZGVzY3JpcHRpb24nOiB7XG4gICAgICB1cGRhdGVEZXNjcmlwdGlvbihzZWN0aW9uLCBpbnB1dHMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgJ2lucHV0cyc6IHtcbiAgICAgIHVwZGF0ZUlucHV0cyhzZWN0aW9uLCBpbnB1dHMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgJ291dHB1dHMnOiB7XG4gICAgICB1cGRhdGVPdXRwdXRzKHNlY3Rpb24sIGlucHV0cyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgbG9nLmRlYnVnKGB1bmtub3duIHNlY3Rpb24gJHtzZWN0aW9ufWApO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCBJbnB1dHMgZnJvbSAnLi9pbnB1dHMnO1xuaW1wb3J0IExvZ1Rhc2sgZnJvbSAnLi9sb2d0YXNrJztcbmltcG9ydCBzYXZlIGZyb20gJy4vc2F2ZSc7XG5pbXBvcnQgdXBkYXRlU2VjdGlvbiBmcm9tICcuL3NlY3Rpb25zJztcblxuZXhwb3J0IGNvbnN0IGlucHV0cyA9IG5ldyBJbnB1dHMoKTtcbi8vIFRoaXMgc2NyaXB0IHJlYnVpbGRzIHRoZSB1c2FnZSBzZWN0aW9uIGluIHRoZSBSRUFETUUubWQgdG8gYmUgY29uc2lzdGVudCB3aXRoIHRoZSBhY3Rpb24ueW1sXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZURvY3MoKTogdm9pZCB7XG4gIGNvbnN0IGxvZyA9IG5ldyBMb2dUYXNrKCdnZW5lcmF0aW5nIHJlYWRtZScpO1xuXG4gIGZvciAoY29uc3Qgc2VjdGlvbiBvZiBpbnB1dHMuc2VjdGlvbnMpIHtcbiAgICB0cnkge1xuICAgICAgdXBkYXRlU2VjdGlvbihzZWN0aW9uLCBpbnB1dHMpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGlmIChlcnJvciAmJiAnbWVzc2FnZScgaW4gZXJyb3IgJiYgZXJyb3IubWVzc2FnZSlcbiAgICAgICAgbG9nLmVycm9yKGBFcnJvciBvY2N1cmVkIGluIHNlY3Rpb24gJHtzZWN0aW9ufS4gJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuICBpbnB1dHMucmVhZG1lRWRpdG9yLmR1bXBUb0ZpbGUoKTtcblxuICBzYXZlKGlucHV0cyk7XG59XG4iLCAiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5pbXBvcnQgZ2VuZXJhdGVEb2NzIGZyb20gJy4vZ2VuZXJhdGUtZG9jcyc7XG5cbmdlbmVyYXRlRG9jcygpO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtvZUFFQSxJQUFBQSxFQUFvQixzQkFDcEJDLEVBQXNCLHdCQUd0QkMsR0FBc0Isc0JBQ3RCQyxHQUF1QixvQkNOdkIsSUFBQUMsR0FBb0Isc0JBRXBCQyxFQUFzQixzQkNIdEIsSUFBQUMsRUFBc0IsNEJBQ3RCQyxFQUE0QixvQkFDNUJDLEVBQXVCLHlCQUVqQkMsR0FBVyxFQUNYQyxFQUFjLEVBQ2RDLEdBQVksRUFDWkMsRUFBVyxFQUNYQyxFQUFZLEVBQ1pDLEdBQVcsRUFDWEMsRUFBbUIsVUFDbkJDLEVBQU4sTUFBTUMsQ0FBUSxDQUNaLE9BQU8sZ0JBQThDLENBQUMsRUFFdEQsT0FBTyxZQUFjLEVBRXJCLE9BQU8sU0FBbUIsQ0FDeEIsT0FBWSxVQUFRLEdBQUssQ0FBQyxDQUFDLFFBQVEsSUFBSSxLQUN6QyxDQUVBLEtBRUEsWUFBWUMsRUFBYyxDQUN4QixLQUFLLEtBQU9BLEdBQU0sS0FBSyxFQUN2QixLQUFLLFFBQVUsRUFDakIsQ0FFQSxJQUFJLFNBQW1CLENBQ3JCLE9BQU9ELEVBQVEsZ0JBQWdCLEtBQUssSUFBSSxHQUFLLEVBQy9DLENBRUEsSUFBSSxRQUFRRSxFQUFnQixDQUMxQkYsRUFBUSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUlFLENBQ3ZDLENBRUEsTUFBTSxRQUNKQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUFhZCxHQUNFLENBQ1hZLEVBQUssT0FBU0osRUFBUSxjQUN4QkEsRUFBUSxZQUFjSSxFQUFLLFFBRTdCLElBQUlHLEVBQ0osT0FBUUgsRUFBTSxDQUNaLElBQUssUUFBUyxDQUNaRyxFQUFP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TCxFQUFPLFNBQzNCLEdBQUksQ0FDRk0sRUFBY0QsRUFBU0wsQ0FBTSxDQUMvQixPQUFTTyxFQUFZLENBQ2ZBLEdBQVMsWUFBYUEsR0FBU0EsRUFBTSxTQUN2Q0osRUFBSSxNQUFNLDRCQUE0QkUsQ0FBTyxLQUFLRSxFQUFNLE9BQU8sRUFBRSxDQUNyRSxDQUVGUCxFQUFPLGFBQWEsV0FBVyxFQUUvQlEsRUFBS1IsQ0FBTSxDQUNiLENDakJBUyxFQUFhIiwKICAibmFtZXMiOiBbImZzIiwgInBhdGgiLCAieWFtbCIsICJuY29uZiIsICJmcyIsICJ5YW1sIiwgImNvcmUiLCAiY2hhbGtDbGFzcyIsICJlbW9qaSIsICJOT19HUk9VUCIsICJTVEFSVF9HUk9VUCIsICJFTkRfR1JPVVAiLCAiSVNfRVJST1IiLCAiSVNfRkFJTEVEIiwgIklTX1RJVExFIiwgImNoYWxrIiwgIkxvZ1Rhc2siLCAiX0xvZ1Rhc2siLCAibmFtZSIsICJ2YWx1ZSIsICJlbW9qaVN0ciIsICJzdGVwIiwgImRlc2NyaXB0aW9uIiwgInN0YXJ0R3JvdXAiLCAiZGVzYyIsICJtc2ciLCAiaXNFcnJvcmluZyIsICJpbmdyb3VwIiwgIm1zZ3R5cGUiLCAibG9ndGFza19kZWZhdWx0IiwgIkFjdGlvbiIsICJhY3Rpb25QYXRoIiwgImxvZyIsICJsb2d0YXNrX2RlZmF1bHQiLCAidG1wQWN0aW9uWWFtbCIsICJhY3Rpb25ZYW1sIiwgImZzIiwgInVuaWNvZGVXb3JkTWF0Y2giLCAidGl0bGVjYXNlIiwgInRleHQiLCAidW5pY29kZVdvcmRNYXRjaCIsICJ0eHQiLCAicmVwb3NpdG9yeUZpbmRlciIsICJpbnB1dFJlcG8iLCAiY29udGV4dCIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgInJlc3VsdCIsICJmaWxlQ29udGVudCIsICJwYXR0ZXJuIiwgInJlc3VsdHMiLCAiZXJyb3IiLCAiY29sdW1uSGVhZGVyIiwgInZhbHVlIiwgIm5vcm1hbGlzZWRIZWFkZXIiLCAidGl0bGVjYXNlIiwgInJvd0hlYWRlciIsICJnZXRDdXJyZW50VmVyc2lvblN0cmluZyIsICJpbnB1dHMiLCAidmVyc2lvblN0cmluZyIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgIm9SaWRlIiwgInBhY2thZ2VWZXJzaW9uIiwgImVycm9yIiwgImZzIiwgImltcG9ydF9ub2RlX29zIiwgImltcG9ydF9wcmV0dGllciIsICJmb3JtYXRNYXJrZG93biIsICJ2YWx1ZSIsICJmaWxlcGF0aCIsICJ3cmFwRGVzY3JpcHRpb24iLCAiY29udGVudCIsICJwcmVmaXgiLCAidmFsdWVXaXRob3V0UHJlZml4IiwgImZvcm1hdHRlZFN0cmluZyIsICJzdGFydFRva2VuRm9ybWF0IiwgImVuZFRva2VuRm9ybWF0IiwgIlJlYWRtZUVkaXRvciIsICJmaWxlUGF0aCIsICJuYW1lIiwgInByb3ZpZGVkQ29udGVudCIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgImNvbnRlbnQiLCAic3RhcnRUb2tlbiIsICJzdG9wVG9rZW4iLCAic3RhcnRJbmRleCIsICJzdG9wSW5kZXgiLCAiYmVmb3JlQ29udGVudCIsICJhZnRlckNvbnRlbnQiLCAiZm9ybWF0TWFya2Rvd24iLCAid29ya2luZ0RpcmVjdG9yeSIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgIndvcmtpbmdEaXJlY3RvcnkiLCAiZ2l0aHViRXZlbnRQYXRoIiwgImdpdGh1YkV2ZW50IiwgImNvbmZpZ0ZpbGVOYW1lIiwgInBhdGhzQWN0aW9uIiwgInBhdGhzUmVhZG1lIiwgImNvbmZpZ0tleXMiLCAiSW5wdXRzIiwgInJlcG9zaXRvcnlEZXRhaWwiLCAicmVwb3NpdG9yeUZpbmRlciIsICJvYmoiLCAibmV3T2JqIiwgImtleVBhcnNlZCIsICJhY3Rpb25QYXRoIiwgIkFjdGlvbiIsICJSZWFkbWVFZGl0b3IiLCAib3V0cHV0IiwgImsiLCAiaW1wb3J0X25vZGVfZnMiLCAiaW1wb3J0X25vZGVfcGF0aCIsICJHSEFjdGlvbkRvY3NDb25maWciLCAiaW5wdXRzIiwgImNvbmZpZ1BhdGgiLCAibG9nIiwgImxvZ3Rhc2tfZGVmYXVsdCIsICJkaXJlY3RvcnkiLCAicGF0aCIsICJmcyIsICJlcnIiLCAic2F2ZSIsICJpbnB1dHMiLCAiZG9jc0NvbmZpZyIsICJHSEFjdGlvbkRvY3NDb25maWciLCAidXBkYXRlQmFkZ2VzIiwgInRva2VuIiwgImlucHV0cyIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgImVuYWJsZVZlcnNpb25pbmciLCAiYmFkZ2VzIiwgInJlcG9zIiwgImdpdGh1YkJhZGdlcyIsICJyZXBvVXJsIiwgImdlbmVyYXRlQmFkZ2UiLCAiaXRlbSIsICJiYWRnZVRlbXBsYXRlIiwgImdlbmVyYXRlQmFkZ2VzIiwgImJhZGdlQXJyYXkiLCAiYiIsICJjb250ZW50IiwgInVwZGF0ZURlc2NyaXB0aW9uIiwgInRva2VuIiwgImlucHV0cyIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgImNvbnRlbnQiLCAiZGVzYyIsICJtYXJrZG93bkVzY2FwZVRhYmxlQ2VsbCIsICJ0ZXh0IiwgIm1hcmtkb3duRXNjYXBlSW5saW5lQ29kZSIsICJjb250ZW50IiwgIkFycmF5T2ZBcnJheXNUb01hcmtkb3duVGFibGUiLCAicHJvdmlkZWRUYWJsZUNvbnRlbnQiLCAidGFibGVDb250ZW50IiwgIm91dHB1dFN0cmluZ3MiLCAicm93QSIsICJtYXhSb3dzIiwgIm1heENvbHMiLCAibWluQ29scyIsICJ0YmxJZHgiLCAiZSIsICJudW1Db2xzIiwgImNudElkeCIsICJtYXJrZG93bkFycmF5Um93c0xlbmd0aCIsICJtYXJrZG93bkFycmF5RW50cmllc0xlbmd0aCIsICJtYXJrZG93bkFycmF5cyIsICJpIiwgInJvdyIsICJjb2wiLCAiaWR4IiwgImRhdGFSb3ciLCAiaiIsICJtYXJrZG93bmVyX2RlZmF1bHQiLCAidXBkYXRlSW5wdXRzIiwgInRva2VuIiwgImlucHV0cyIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgImNvbnRlbnQiLCAibWFya2Rvd25BcnJheSIsICJ0aXRsZUFycmF5IiwgInRpdGxlcyIsICJ0IiwgImNvbHVtbkhlYWRlciIsICJ2YXJzIiwgInRJIiwgImtleSIsICJ2YWx1ZXMiLCAiZGVzY3JpcHRpb24iLCAibWF0Y2hlcyIsICJyb3ciLCAicm93SGVhZGVyIiwgIm1hcmtkb3duZXJfZGVmYXVsdCIsICJ1cGRhdGVPdXRwdXRzIiwgInRva2VuIiwgImlucHV0cyIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgImNvbnRlbnQiLCAibWFya2Rvd25BcnJheSIsICJ0aXRsZUFycmF5IiwgInRpdGxlcyIsICJ0IiwgImNvbHVtbkhlYWRlciIsICJ2YXJzIiwgInRJIiwgImtleSIsICJkZXNjcmlwdGlvbiIsICJtYXRjaGVzIiwgInJvdyIsICJyb3dIZWFkZXIiLCAibWFya2Rvd25lcl9kZWZhdWx0IiwgInVwZGF0ZVRpdGxlIiwgInRva2VuIiwgImlucHV0cyIsICJsb2ciLCAibG9ndGFza19kZWZhdWx0IiwgImNvbnRlbnQiLCAibmFtZSIsICJ0aXRsZSIsICJ1cGRhdGVVc2FnZSIsICJ0b2tlbiIsICJpbnB1dHMiLCAibG9nIiwgImxvZ3Rhc2tfZGVmYXVsdCIsICJhY3Rpb25OYW1lIiwgInZlcnNpb25TdHJpbmciLCAiZ2V0Q3VycmVudFZlcnNpb25TdHJpbmciLCAiYWN0aW9uUmVmZXJlbmNlIiwgImNvbnRlbnQiLCAiaW5wIiwgImZpcnN0SW5wdXQiLCAia2V5IiwgImlucHV0IiwgIndyYXBEZXNjcmlwdGlvbiIsICJ1cGRhdGVTZWN0aW9uIiwgInNlY3Rpb24iLCAiaW5wdXRzIiwgImxvZyIsICJsb2d0YXNrX2RlZmF1bHQiLCAidXBkYXRlQmFkZ2VzIiwgInVwZGF0ZVVzYWdlIiwgInVwZGF0ZVRpdGxlIiwgInVwZGF0ZURlc2NyaXB0aW9uIiwgInVwZGF0ZUlucHV0cyIsICJ1cGRhdGVPdXRwdXRzIiwgImlucHV0cyIsICJJbnB1dHMiLCAiZ2VuZXJhdGVEb2NzIiwgImxvZyIsICJsb2d0YXNrX2RlZmF1bHQiLCAic2VjdGlvbiIsICJ1cGRhdGVTZWN0aW9uIiwgImVycm9yIiwgInNhdmUiLCAiZ2VuZXJhdGVEb2NzIl0KfQo=
