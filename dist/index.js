#!/usr/bin/env node
"use strict";var fu=Object.create;var Z=Object.defineProperty;var du=Object.getOwnPropertyDescriptor;var Fu=Object.getOwnPropertyNames;var Au=Object.getPrototypeOf,Cu=Object.prototype.hasOwnProperty;var Eu=(t,u,r,n)=>{if(u&&typeof u=="object"||typeof u=="function")for(let e of Fu(u))!Cu.call(t,e)&&e!==r&&Z(t,e,{get:()=>u[e],enumerable:!(n=du(u,e))||n.enumerable});return t};var F=(t,u,r)=>(r=t!=null?fu(Au(t)):{},Eu(u||!t||!t.__esModule?Z(r,"default",{value:t,enumerable:!0}):r,t));var S=F(require("node:fs")),T=F(require("node:path")),au=F(require("js-yaml")),cu=F(require("nconf"));var uu=F(require("node:fs")),k=F(require("js-yaml"));var f=F(require("@actions/core")),X=F(require("chalk")),E=F(require("node-emoji")),mu=0,Q=1,hu=2,w=3,P=5,Bu=6,d=X.default,U=class t{static ingroup_setting={};static indentWidth=5;static isDebug(){return f.isDebug()||!!process.env.DEBUG}name;constructor(u){this.name=u?.trim(),this.ingroup=!1}get ingroup(){return t.ingroup_setting[this.name]??!1}set ingroup(u){t.ingroup_setting[this.name]=u}async logStep(u,r,n,e=mu){r.length>t.indentWidth&&(t.indentWidth=r.length);let i;switch(r){case"START":{i=d.yellowBright(`${n}`);break}case"INFO":{i=d.green(`${n}`);break}case"WARN":{i=d.yellow(`${n}`);break}case"SUCCESS":{i=d.greenBright(`${n}`);break}case"FAILURE":{i=d.redBright(`${n}`);break}case"ERROR":{i=d.redBright(`${n}`);break}case"#####":{i=d.cyan(`${n}`);break}default:{i=d.white(`${n}`);break}}let o;switch(this.ingroup&&!process.env.GITHUB_ACTIONS?o=`${[...Array.from({length:t.indentWidth}).fill(" ")].join("")}   ${u}: ${this.name} > ${i}`:o=`[${[r,...Array.from({length:t.indentWidth-r.length}).fill(" ")].join("")}] ${u}: ${i}`,r){case"START":{o=d.yellowBright(`${o}`);break}case"SUCCESS":{o=d.whiteBright(`${o}`);break}case"FAILURE":{o=d.red(`${o}`);break}case"ERROR":{o=d.red(`${o}`);break}default:break}let c=e===w||e===P;if(process.env.GITHUB_ACTIONS)switch(e){case Q:{f.startGroup(o);break}case hu:{f.endGroup();break}case w:{f.error(d.bgRedBright(o));break}case P:{f.setFailed(d.bgRedBright(o));break}default:f.info(o)}else c?f.error(o):f.info(o)}debug(u=""){t.isDebug()&&u!==""&&this.logStep("\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F","DEBUG",u)}start(u=""){let r=u===""?`Starting ${this.name}...`:u;this.logStep(E.get("rocket")??"","START",r,Q)}info(u=""){this.logStep(E.get("sparkles")??"","INFO",u)}warn(u=""){this.logStep(E.get("anger")??"","WARN",u)}success(u="",r=!0){let n=u===""?`Completed ${this.name}.`:u;r&&(this.ingroup=!1,process.env.GITHUB_ACTIONS&&f.endGroup()),this.logStep(E.get("white_check_mark")??"","SUCCESS",n)}fail(u="",r=!0){let n=u===""?`Failed ${this.name}.`:u;r&&(this.ingroup=!1,process.env.GITHUB_ACTIONS&&f.endGroup());let e=process.env.GITHUB_ACTIONS?P:w;this.logStep(E.get("x")??"","FAILURE",n,e)}error(u=""){this.logStep(E.get("x")??"","ERROR",u,w)}title(u=""){this.logStep("\u{1F4D3}","#####",u,Bu)}},a=U;var h=class{name;description;branding;inputs;outputs;runs;constructor(u){let r=new a("action"),n=null;try{r.debug(`loading action.yml from ${u}`),n=k.load(uu.readFileSync(u,"utf8")),r.success("loaded configuration successfully")}catch{r.error(`failed to load ${u}`)}(typeof n!="object"||n===null)&&r.error("action.yml file read in isn't an object (no yaml in it)");let e=n;this.name=e.name,this.description=e.description,this.branding=e.branding,this.inputs=e.inputs,this.outputs=e.outputs,this.runs=e.runs}stringify(){try{return k.dump(this,{skipInvalid:!0})}catch{return new a("action:stringify").error("failed to stringify action.yml"),""}}};var B=F(require("node:fs"));var bu=/(?:[\dA-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])\S*/g;function yu(t){if(t){if(typeof t!="string")throw new TypeError(`Invalid argument type provided to titlecase(): ${typeof t}`);return t.replaceAll(bu,u=>u[0]?u[0].toUpperCase()+u.slice(1).toLowerCase():u)}}function eu(t,u){let r=new a("repositoryFinder"),e={};if(t)return[e.owner,e.repo]=t.split("/"),r.info(`repositoryFinder using input ${t} and returns ${JSON.stringify(e)}`),e;if(process.env.GITHUB_REPOSITORY)return[e.owner,e.repo]=process.env.GITHUB_REPOSITORY.split("/"),r.info(`repositoryFinder using GITHUB_REPOSITORY ${process.env.GITHUB_REPOSITORY} and returns ${JSON.stringify(e)}`),e;if(u)return e.owner=u.repo.owner,e.repo=u.repo.repo,r.info(`repositoryFinder using GITHUB_REPOSITORY ${process.env.GITHUB_REPOSITORY} and returns ${JSON.stringify(e)}`),e;if(process.env.INPUT_OWNER&&process.env.INPUT_REPO)return e.owner=process.env.INPUT_OWNER,e.repo=process.env.INPUT_REPO,e;try{let i=B.readFileSync(".git/config","utf8"),o=/url( )?=( )?.*github\.com[/:](?<owner>.*)\/(?<repo>.*)\.git/,c=i.match(o);return c!==null&&(r.debug(JSON.stringify(c.groups)),e.owner=c.groups?.owner??"",e.repo=c.groups?.repo??""),e}catch(i){r.debug(`Couldn't find any owner or repo: ${i}`)}return e}function $(t){if(!t)return"";let u=yu(t.trim().replace(/^[*_~]+/,"").replace(/[*_~]+$/,""));return u?`**${u}**`:""}function x(t){return t?`\`**${t.trim().replace(/^\*+/,"").replace(/\*+$/,"")}**\``:""}function tu(t){let u="",r=new a("getCurrentVersionString");if(t.config.get("versioning:enabled")){r.debug("version string in generated example is enabled");let n=t.config.get("versioning:override"),e=process.env.npm_package_version;if(r.debug(`version string in env:npm_package_version is ${e??"not found"}`),!e){r.debug("version string in env:npm_package_version is not found, trying to use git");try{B.accessSync("package.json"),e=JSON.parse(B.readFileSync("package.json","utf8")).version}catch(i){r.debug(`package.json not found. ${i}`)}r.debug(`version string in package.json:version is ${e??"not found"}`)}u=n&&n.length>0?n:e??"0.0.0",u&&!u.startsWith(t.config.get("versioning:prefix"))&&(u=`${t.config.get("versioning:prefix")}${u}`)}else u=t.config.get("versioning:branch");return r.debug(`version to use in generated example is ${u}`),u}var I=F(require("node:fs")),iu=require("node:os");var N=require("prettier");async function ru(t,u){return(0,N.format)(t,{semi:!1,parser:"markdown",embeddedLanguageFormatting:"auto",...u?{filepath:u}:{}})}async function nu(t,u,r){if(!t)return u??[];let n=r?t.replace(r,""):t,e=await(0,N.format)(`${r??""}${n}`,{semi:!1,parser:"yaml",proseWrap:"always"});return u.push(...e.split(`
`)),u}var vu="<!-- start %s -->",wu="<!-- end %s -->",b=class{filePath;fileContent;constructor(u){this.filePath=u,this.fileContent=I.readFileSync(u,"utf8")}updateSection(u,r){let n=new a(u),e=Array.isArray(r)?r.join(iu.EOL):r;n.info(`Looking for the ${u} token in ${this.filePath}`);let i=vu.replace("%s",u),o=wu.replace("%s",u),c=this.fileContent.indexOf(i),l=this.fileContent.indexOf(o);if(c!==-1&&l!==-1){let g=this.fileContent.slice(0,Math.max(0,c+i.length)),s=this.fileContent.slice(l);this.fileContent=g+e+s}else if(l<c)throw new Error(`Start token for section '${u} must appear before end token`)}async dumpToFile(){let u=await ru(this.fileContent);return I.writeFileSync(this.filePath,u,"utf8")}};function ou(){return process.env.GITHUB_WORKSPACE??process.env.INIT_CWD??process.cwd()}var A=new a("inputs");process.chdir(ou());var su=process.env.GITHUB_EVENT_PATH??"",gu=null;try{gu=JSON.parse(S.readFileSync(su,"utf8"))}catch{A.debug(`GITHUB_EVENT_PATH not found: ${su}`)}var Du=".ghadocs.json",H="paths:action",j="paths:readme",ku=["save",H,j,"show_logo","versioning:enabled","versioning:override","versioning:prefix","versioning:branch","owner","repo","title_prefix","pretty","include_github_version_badge"],y=class{config;sections;readmePath;configPath;action;readmeEditor;constructor(){this.configPath=T.resolve(Du),this.config=new cu.Provider;let u=eu(null,gu);process.env.GITHUB_ACTION&&A.info("running in GitHub action"),S.existsSync(this.configPath)?A.info(`config file found: ${this.configPath}`):A.error(`config file not found: ${this.configPath}`),this.config.env({lowerCase:!0,parseValues:!0,match:/^INPUT_/,transform:n=>{if(n.key.startsWith("input_")){let e={key:n.key,value:n.value},i=n.key.replace(/^(INPUT|input)_/,"");switch(i){case"readme":{e.key=j;break}case"action":{e.key=H;break}case"versioning_enabled":{e.key="versioning:enabled";break}case"version_prefix":{e.key="versioning:prefix";break}case"versioning_default_branch":{e.key="versioning:branch";break}case"version_override":{e.key="versioning:override";break}case"include_github_version_badge":{e.key="versioning:badge";break}default:{e.key=i;break}}return e.value&&this.config.set(e.key,e.value),e}}}).argv({save:{alias:"save",describe:`Save this config to ${Du}`,parseValues:!0,type:"boolean"},"paths:action":{alias:["pathsAction","action"],type:"string",describe:"Path to the action.yml"},"paths:readme":{alias:["pathsReadme","readme"],type:"string",describe:"Path to the README file"},show_logo:{alias:"logo",describe:"Display the action's logo in the README"},owner:{alias:"owner",describe:"The GitHub Action repository owner. i.e: `bitflight-devops`"},repo:{alias:"repo",describe:"The GitHub Action repository name. i.e: `github-action-readme-generator`"},prettier:{alias:"pretty",describe:"Format the markdown using prettier formatter",parseValues:!0,type:"boolean"},"versioning:enabled":{alias:["versioning","versioning_enabled"],describe:"Enable the update of the usage version to match the latest version in the package.json file",parseValues:!0,type:"boolean"},"versioning:override":{alias:["setversion","versioning_override","version_override"],describe:"Set a specific version to display in the README.md",parseValues:!0},"versioning:prefix":{alias:["vp","version_prefix"],describe:"Prefix the version with this value (if it isn't already prefixed)",parseValues:!0},"versioning:branch":{alias:["branch","versioning_default_branch"],describe:"If versioning is disabled show this branch instead",parseValues:!0},"versioning:badge":{alias:["version-badge","versioning_badge"],describe:"Display the current version as a badge",parseValues:!0,type:"boolean"},title_prefix:{alias:["prefix","title_prefix"],describe:"Add a prefix to the README title",parseValues:!0}}).file(this.configPath).defaults({save:!0,owner:u?.owner,repo:u?.repo,paths:{action:"action.yml",readme:"README.md"},show_logo:!0,pretty:!0,versioning:{enabled:!0,override:"",prefix:"v",branch:"main",badges:!0},title_prefix:"GitHub Action: ",sections:["title","description","usage","inputs","outputs","contents","badges"]}).required(["owner","repo"]),this.sections=this.config.get("sections"),this.readmePath=T.resolve(this.config.get(j));let r=T.resolve(this.config.get(H));this.action=new h(r),this.readmeEditor=new b(this.readmePath),a.isDebug()&&(A.debug("resolved inputs:"),A.debug(this.stringify()),A.debug("resolved action:"),A.debug(this.action.stringify()))}stringify(){if(this){let u=[];for(let r of ku)u.push(`${r}: ${this.config.get(r)}`);return au.dump(u,{skipInvalid:!0})}return""}};var G=F(require("node:fs")),pu=F(require("node:path"));var _=class{owner;repo;title_prefix;title;paths;show_logo;versioning;readmePath;outpath;pretty;loadInputs(u){this.owner=u.config.get("owner"),this.repo=u.config.get("repo"),this.title_prefix=u.config.get("title_prefix"),this.title=u.config.get("title"),this.paths=u.config.get("paths"),this.show_logo=u.config.get("show_logo"),this.versioning={enabled:u.config.get("versioning:enabled"),prefix:u.config.get("versioning:prefix"),override:u.config.get("versioning:override"),branch:u.config.get("versioning:branch")},this.outpath=u.config.get("outpath"),this.pretty=u.config.get("pretty")}save(u){let r=new a("config:save"),n=pu.default.dirname(u);return G.default.mkdir(n,{recursive:!0},e=>{e&&r.error(`Error creating directory: ${n}. Error: ${e}`)}),G.default.writeFile(u,JSON.stringify(this,null,2),e=>{e?r.error(`Error writing config file: ${u}. Error: ${e}`):r.info(`Config file written to: ${u}`)})}};function L(t){let u=new _;u.loadInputs(t),t.config.get("save").toString()==="true"&&u.save(t.configPath)}function V(t,u){let r=new a(t),n=u.config.get("versioning:badges"),e=[],i={owner:u.config.get("owner"),repo:u.config.get("repo")};function o(){let s=`https://github.com/${i.owner}/${i.repo}`;return[{img:`https://img.shields.io/github/v/release/${i.owner}/${i.repo}?display_name=tag&sort=semver&logo=github&style=flat-square`,alt:"Release",url:`${s}/releases/latest`},{img:`https://img.shields.io/github/release-date/${i.owner}/${i.repo}?display_name=tag&sort=semver&logo=github&style=flat-square`,alt:"Release",url:`${s}/releases/latest`},{img:`https://img.shields.io/github/last-commit/${i.owner}/${i.repo}?logo=github&style=flat-square`,alt:"Commit"},{img:`https://img.shields.io/github/issues/${i.owner}/${i.repo}?logo=github&style=flat-square`,alt:"Open Issues",url:`${s}/issues`},{img:`https://img.shields.io/github/downloads/${i.owner}/${i.repo}/total?logo=github&style=flat-square`,alt:"Downloads"}]}function c(s){let D=`<img src="${s.img}" alt="${s.alt||""}" />`;return s.url?`<a href="${s.url}">${D}</a>`:D}function l(){let s=[];for(let D of e)s.push(c(D));return[s.join("")]}r.start(),n&&e.push(...o());let g=l();u.readmeEditor.updateSection(t,g),r.success()}function W(t,u){let r=new a(t),n=[];if(u?.action?.description){r.start();let e=u.action.description.trim().replaceAll(`\r
`,`
`).replaceAll(/ +/g," ").replaceAll(` 
`,`
`).replaceAll(`

`,"<br />");r.info(`Writing ${e.length} characters to the description section`),n.push(e),u.readmeEditor.updateSection(t,n),r.success()}}function $u(t){return t.replaceAll(`
`,"<br />").replaceAll("|","\\|")}function xu(t){return t.includes("|")?t.replaceAll(/([\s*_]|^)`([^`]+)`([\s*_]|$)/g,"$1<code>$2</code>$3"):t}function Iu(t){let u=[],r=[];for(let D of t)u.push([...D]);let n=u.length,e=0,i=0,o=0;for(let D of u){if(u[o]!==void 0){let p=D.length;p>e&&(e=p),(p<i||i===0)&&(i=p)}o+=1}if(e!==i){let D=0;for(let p of u)u[D]===void 0?u[D]=Array.from({length:e}).fill(""):p.length<e&&(u[D]=[...p,...Array.from({length:e-p.length}).fill("undefined")]),D+=1}let c=n+1,l=e*2+1,g=Array.from({length:c}).fill(Array.from({length:l}).fill("|")),s=0;for(let D of g){let p=0,C=s>1?s-1:0,lu=u[C];for(let m=0;m<D.length;m++){let v=$u(lu[p]??"");v=xu(v),m%2===1&&(s===0?g[s][m]=` **${v.trim()}** `:s===1?g[s][m]="---":g[s][m]=` ${v.trim()} `,p+=1)}r.push(`${g[s].join("")}
`),s+=1}return r.join("")}var R=Iu;function M(t,u){let r=new a(t),n=[],e=[],i=["Input","Description","Default","Required"],o=[];for(let g of i)o.push($(g));e.push(o);let c=u.action.inputs,l=c?Object.keys(c).length:0;if(l>0){r.start();for(let g of Object.keys(c)){let s=c[g],D=s?.description??"",p=D.match(`(.*?)

([Ss]*)`);p&&p.length>=2&&(D=p[1]||D),D=D.trim().replace(`
`,"<br />");let C=[x(g),D,s?.default?`\`${s.default}\``:"",s?.required?"**true**":"__false__"];r.debug(JSON.stringify(C)),e.push(C)}n.push(R(e)),r.info(`Action has ${l} total ${t}`),u.readmeEditor.updateSection(t,n),r.success()}else r.debug(`Action has no ${t}`)}function J(t,u){let r=new a(t),n=[],e=[],i=["Output","Description"],o=[];for(let g of i)o.push($(g));e.push(o);let c=u.action.outputs,l=c?Object.keys(c).length:0;if(l>0){r.start();for(let g of Object.keys(c)){let D=c[g]?.description??"",p=/(.*?)\n\n([Ss]*)/.exec(D);p&&p.length>=2&&(D=p[1]||D),D=D.trim().replace(`
`,"<br />");let C=[x(g),D];r.debug(JSON.stringify(C)),e.push(C)}n.push(R(e)),r.info(`Action has ${l} total ${t}`),u.readmeEditor.updateSection(t,n),r.success()}else r.debug(`Action has no ${t}`)}function q(t,u){let r=new a(t),n=[],e="";if(u.action.name){r.start(),e=u.action.name,r.info(`Writing ${e.length} characters to the title`);let i=`# ${u.config.get("title_prefix")}${u.action.name}`;r.info(`Title: ${i}`),n.push(i),u.readmeEditor.updateSection(t,n),r.success()}}function Y(t,u){let r=new a(t);r.start();let n=`${u.config.get("owner")}/${u.config.get("repo")}`;r.info(`Action name: ${n}`);let e=tu(u);r.info(`Version string: ${e}`);let i=`${n}@${e}`;if(!i)throw new Error("Parameter actionReference must not be empty");let o=[];o.push("```yaml",`- uses: ${i}`,"  with:");let c=u.action.inputs,l=!0;if(c)for(let g of Object.keys(c)){let s=c[g];s!==void 0&&(l||o.push(""),nu(s.description,o,"    # "),s.default!==void 0&&(s.description?.trimEnd().match(/\n *\r?\n/)&&o.push("    #"),o.push(`    # Default: ${s.default}`)),o.push(`    ${g}: ''`),l=!1)}o.push("```\n"),u.readmeEditor.updateSection(t,o),r.success()}function K(t,u){let r=new a("updateSection");switch(t){case"badges":{V(t,u);break}case"usage":{Y(t,u);break}case"title":{q(t,u);break}case"description":{W(t,u);break}case"inputs":{M(t,u);break}case"outputs":{J(t,u);break}default:r.debug(`unknown section ${t}`)}}var O=new y;function z(){let t=new a("generating readme");for(let u of O.sections)try{K(u,O)}catch(r){r&&"message"in r&&r.message&&t.error(`Error occured in section ${u}. ${r.message}`)}O.readmeEditor.dumpToFile(),L(O)}z();
//# sourceMappingURL=data:application/json;base64,
