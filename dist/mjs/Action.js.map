{"version":3,"file":"Action.js","sourceRoot":"","sources":["../../src/Action.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,qEAAqE;AACrE,OAAO,KAAK,EAAE,MAAM,SAAS,CAAC;AAE9B,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAiB,mBAAmB,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AACxF,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAmCzC;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,MAAM;IACzB,sBAAsB;IAEtB,yBAAyB;IAClB,IAAI,CAAS;IAEpB,gCAAgC;IACzB,WAAW,CAAS;IAE3B,2BAA2B;IACpB,QAAQ,CAAW;IAE1B,wBAAwB;IACjB,MAAM,CAA2B;IAExC,yBAAyB;IAClB,OAAO,CAA4B;IAE1C,4BAA4B;IACrB,IAAI,CAAO;IAElB,yBAAyB;IAClB,IAAI,CAAS;IAEpB;;;;OAIG;IACH,YAAY,UAAkB;QAC5B,4BAA4B;QAC5B,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,aAAa,GAAG,IAAI,CAAC;QACzB,IAAI;YACF,GAAG,CAAC,KAAK,CAAC,2BAA2B,UAAU,EAAE,CAAC,CAAC;YACnD,MAAM,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACzD,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAW,CAAC;YACnD,GAAG,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;SAClD;QAAC,MAAM;YACN,GAAG,CAAC,KAAK,CAAC,kBAAkB,UAAU,EAAE,CAAC,CAAC;SAC3C;QACD,IAAI,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,KAAK,IAAI,EAAE;YAC/D,GAAG,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;SACtE;QACD,MAAM,UAAU,GAAG,aAAuB,CAAC;QAC3C,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;QAE1C,IAAI,CAAC,QAAQ,GAAG;YACd,KAAK,EAAE,UAAU,CAAC,QAAQ,EAAE,KAAK,IAAI,mBAAmB;YACxD,IAAI,EAAE,UAAU,CAAC,QAAQ,EAAE,IAAI,IAAI,kBAAkB;SACtD,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACH,YAAY,CAAC,SAAiB;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,SAAS;QACP,IAAI;YACF,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAC7B;QAAC,MAAM;YACN,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAAC;YAC5C,GAAG,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;YAC5C,OAAO,EAAE,CAAC;SACX;IACH,CAAC;CACF","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\nimport * as fs from 'node:fs';\n\nimport YAML from 'yaml';\n\nimport { type Branding, DEFAULT_BRAND_COLOR, DEFAULT_BRAND_ICON } from './constants.js';\nimport LogTask from './logtask/index.js';\n\n/**\n * Represents an input for the action.\n */\nexport interface Input {\n  /** Description of the input */\n  description?: string;\n\n  /** Whether the input is required */\n  required?: boolean;\n\n  /** Default value for the input */\n  default?: string;\n}\n\n/**\n * Represents an output for the action.\n */\nexport interface Output {\n  /** Description of the output */\n  description?: string;\n}\n\n/**\n * Defines how the action is run.\n */\ninterface Runs {\n  /** The runner used to execute the action */\n  using: string;\n\n  /** The entrypoint file for the action */\n  main: string;\n}\n\n/**\n * Parses and represents metadata from action.yml.\n */\nexport default class Action {\n  // Load the action.yml\n\n  /** Name of the action */\n  public name: string;\n\n  /** Description of the action */\n  public description: string;\n\n  /** Branding information */\n  public branding: Branding;\n\n  /** Input definitions */\n  public inputs: { [key: string]: Input };\n\n  /** Output definitions */\n  public outputs: { [key: string]: Output };\n\n  /** How the action is run */\n  public runs: Runs;\n\n  /** Path to the action */\n  public path: string;\n\n  /**\n   * Creates a new Action instance by loading and parsing action.yml.\n   *\n   * @param actionPath Path to the action\n   */\n  constructor(actionPath: string) {\n    // Load and parse action.yml\n    const log = new LogTask('action');\n    this.path = actionPath;\n    let tmpActionYaml = null;\n    try {\n      log.debug(`loading action.yml from ${actionPath}`);\n      const actionString = fs.readFileSync(actionPath, 'utf8');\n      tmpActionYaml = YAML.parse(actionString) as Action;\n      log.success('loaded configuration successfully');\n    } catch {\n      log.error(`failed to load ${actionPath}`);\n    }\n    if (typeof tmpActionYaml !== 'object' || tmpActionYaml === null) {\n      log.error(\"action.yml file read in isn't an object (no yaml in it)\");\n    }\n    const actionYaml = tmpActionYaml as Action;\n    this.name = actionYaml.name;\n    this.description = actionYaml.description;\n\n    this.branding = {\n      color: actionYaml.branding?.color ?? DEFAULT_BRAND_COLOR,\n      icon: actionYaml.branding?.icon ?? DEFAULT_BRAND_ICON,\n    };\n    this.inputs = actionYaml.inputs;\n    this.outputs = actionYaml.outputs;\n    this.runs = actionYaml.runs;\n  }\n\n  /**\n   * Gets the default value for an input.\n   *\n   * @param inputName Name of the input\n   * @returns The default value if defined\n   */\n  inputDefault(inputName: string): string | undefined {\n    return this.inputs[inputName]?.default;\n  }\n\n  /**\n   * Stringifies the action back to YAML.\n   *\n   * @returns The YAML string\n   */\n  stringify(): string {\n    try {\n      return YAML.stringify(this);\n    } catch {\n      const log = new LogTask('action:stringify');\n      log.error('failed to stringify action.yml');\n      return '';\n    }\n  }\n}\n"]}