{"version":3,"file":"Action.js","sourceRoot":"","sources":["../../src/Action.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class represents the metadata of a GitHub action defined in the action.yml file.\n * It provides properties and methods for accessing and manipulating the metadata.\n * [Further reading on the metadata can be found here](https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs)\n */\n\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\n\nimport YAML from 'yaml';\n\nimport { type Branding, DEFAULT_BRAND_COLOR, DEFAULT_BRAND_ICON } from './constants.js';\nimport LogTask from './logtask/index.js';\n\n/**\n * Represents an input for the action.\n */\nexport interface Input {\n  /** Description of the input */\n  description?: string;\n\n  /** Whether the input is required */\n  required?: boolean;\n\n  /** Default value for the input */\n  default?: string;\n  /** Optional If the input parameter is used, this string is this.logged as a warning message. You can use this warning to notify users that the input is deprecated and mention any alternatives. */\n  deprecationMessage?: string;\n}\n\n/**\n * Represents an output for the action.\n */\nexport interface Output {\n  /** Description of the output */\n  description?: string;\n  value?: string;\n}\ntype CompositeAction = 'composite';\ntype ContainerAction = 'container';\ntype JavascriptAction = `Node${string}` | `node${string}`;\n\n/**\n * Defines the runs property for container actions.\n */\ninterface RunsContainer {\n  using: ContainerAction;\n  image: string;\n  main: string;\n  pre: string;\n}\n\n/**\n * Defines the runs property for JavaScript actions.\n */\ninterface RunsJavascript {\n  /** The runner used to execute the action */\n  'using': JavascriptAction;\n\n  /** The entrypoint file for the action */\n  'main': string;\n\n  'pre'?: string;\n  'pre-if'?: string;\n\n  'post-if'?: string;\n\n  'post'?: string;\n}\n\n/**\n * Defines the steps property for composite actions.\n */\ninterface Steps {\n  'shell'?: string;\n  'if'?: string;\n  'run'?: string;\n  'name'?: string;\n  'id'?: string;\n  'working-directory'?: string;\n  'env': { [key: string]: string };\n}\n\n/**\n * Defines the runs property for composite actions.\n */\ninterface RunsComposite {\n  /** The runner used to execute the action */\n  using: CompositeAction;\n  steps?: Steps;\n}\n\nexport type ActionType = RunsContainer | RunsJavascript | RunsComposite;\n/**\n * Defines how the action is run.\n */\nexport interface ActionYaml {\n  name: string;\n\n  author: string;\n\n  /** Description of the action */\n  description: string;\n\n  /** Branding information */\n  branding: Branding;\n\n  /** Input definitions */\n  inputs: { [key: string]: Input };\n\n  /** Output definitions */\n  outputs: { [key: string]: Output };\n\n  /** How the action is run */\n  runs: ActionType;\n\n  /** Path to the action */\n  path: string;\n}\n/**\n * Parses and represents metadata from action.yml.\n */\nexport default class Action implements ActionYaml {\n  log: LogTask;\n\n  /** Name of the action */\n  name: string;\n\n  author: string;\n\n  /** Description of the action */\n  description: string;\n\n  /** Branding information */\n  branding: Branding;\n\n  /** Input definitions */\n  inputs: { [key: string]: Input };\n\n  /** Output definitions */\n  outputs: { [key: string]: Output };\n\n  /** How the action is run */\n  runs: ActionType;\n\n  /** Path to the action */\n  path: string;\n\n  /**\n   * Creates a new instance of the Action class by loading and parsing action.yml.\n   *\n   * @param actionPath The path to the action.yml file.\n   */\n  constructor(actionPath: string) {\n    // Load and parse action.yml\n    this.log = new LogTask(actionPath);\n    this.path = actionPath;\n    let actionYaml: ActionYaml;\n    this.log.debug(`Constucting ${actionPath}`);\n    try {\n      actionYaml = this.loadActionFrom(actionPath);\n    } catch (error) {\n      throw new Error(`Failed to load ${actionPath}. ${error}`);\n    }\n    this.log.debug(`Action YAML: ${actionYaml}`);\n    this.name = actionYaml.name;\n    this.author = actionYaml.author;\n    this.description = actionYaml.description;\n\n    this.branding = {\n      color: actionYaml.branding?.color ?? DEFAULT_BRAND_COLOR,\n      icon: actionYaml.branding?.icon ?? DEFAULT_BRAND_ICON,\n    };\n    this.inputs = actionYaml.inputs;\n    this.outputs = actionYaml.outputs;\n    this.runs = actionYaml.runs;\n  }\n\n  loadActionFrom(actionPath: string): ActionYaml {\n    const actionDir = path.dirname(path.resolve(actionPath));\n    this.log.debug(`Load ${actionPath} from ${actionDir}`);\n    if (!fs.existsSync(actionPath)) {\n      throw new Error(`${actionPath} does not exist in ${actionDir}`);\n    }\n    if (!fs.statSync(actionPath).isFile()) {\n      throw new Error(`${actionPath} is not a file type at ${actionDir}`);\n    }\n    this.log.debug(`Loaded ${actionPath} from ${actionDir}`);\n    const actionString = fs.readFileSync(actionPath, 'utf8');\n    return YAML.parse(actionString);\n  }\n\n  /**\n   * Gets the default value for an input.\n   *\n   * @param inputName The name of the input.\n   * @returns The default value if defined,or undefined\n   */\n  inputDefault(inputName: string): string | boolean | undefined {\n    return this.inputs[inputName]?.default ?? undefined;\n  }\n\n  /**\n   * Stringifies the action back to YAML.\n   *\n   * @returns The YAML string for debugging.\n   */\n  stringify(): string {\n    try {\n      return YAML.stringify(this);\n    } catch (error) {\n      this.log.error(`Failed to stringify Action. ${error}`);\n      // this is just for debugging, continue on error\n      return '';\n    }\n  }\n}\n"]}