{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,MAAM,SAAS,CAAC;AACzB,OAAO,IAAI,MAAM,WAAW,CAAC;AAG7B,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAoBzC;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAC7B,KAAK,CAAU;IAEf,IAAI,CAAU;IAEd,YAAY,CAAU;IAEtB,KAAK,CAAU;IAEf,KAAK,CAAS;IAEd,iBAAiB,CAAU;IAE3B,UAAU,CAAc;IAExB,UAAU,CAAU;IAEpB,OAAO,CAAU;IAEjB,MAAM,CAAW;IAEjB;;;OAGG;IACH,UAAU,CAAC,MAAc;QACvB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAW,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAW,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAW,CAAC;QAChE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAW,CAAC;QAClD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAU,CAAC;QACjD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAW,CAAC;QAC1E,IAAI,CAAC,UAAU,GAAG;YAChB,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAY;YAC3D,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAW;YACxD,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAW;YAC5D,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAW;SACzD,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAW,CAAC;QACtD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAY,CAAC;IACvD,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,UAAkB;QACrB,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC;QACvC,qCAAqC;QACrC,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC3C,2CAA2C;QAC3C,IAAI;YACF,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;gBAC/C,IAAI,GAAG,EAAE;oBACP,GAAG,CAAC,KAAK,CAAC,6BAA6B,SAAS,GAAG,CAAC,CAAC;oBACrD,MAAM,GAAG,CAAC;iBACX;YACH,CAAC,CAAC,CAAC;YACH,OAAO,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;gBACrE,IAAI,GAAG,EAAE;oBACP,GAAG,CAAC,KAAK,CAAC,8BAA8B,UAAU,GAAG,CAAC,CAAC;oBACvD,MAAM,GAAG,CAAC;iBACX;qBAAM;oBACL,GAAG,CAAC,IAAI,CAAC,2BAA2B,UAAU,EAAE,CAAC,CAAC;iBACnD;YACH,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,GAAG,CAAC,KAAK,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;SACrD;IACH,CAAC;CACF","sourcesContent":["/**\n * This TypeScript code imports the necessary modules and defines two interfaces: `Versioning` and `Paths`.\n * It also defines a class named `GHActionDocsConfig` that represents the configuration for generating GitHub Actions documentation.\n * The class has properties that correspond to the configuration options and a method `loadInputs` to load the configuration from the provided `Inputs` object.\n * The class also has a method `save` to save the configuration to a file.\n */\n\nimport fs from 'node:fs';\nimport path from 'node:path';\n\nimport type Inputs from './inputs.js';\nimport LogTask from './logtask/index.js';\n\n/**\n * Represents the versioning configuration for GitHub Actions documentation.\n */\nexport interface Versioning {\n  enabled?: boolean;\n  prefix?: string;\n  override?: string;\n  branch?: string;\n}\n\n/**\n * Represents the paths configuration for GitHub Actions documentation.\n */\nexport interface Paths {\n  action: string;\n  readme: string;\n}\n\n/**\n * Represents the configuration for generating GitHub Actions documentation.\n */\nexport class GHActionDocsConfig {\n  owner?: string;\n\n  repo?: string;\n\n  title_prefix?: string;\n\n  title?: string;\n\n  paths?: Paths;\n\n  branding_svg_path?: string;\n\n  versioning?: Versioning;\n\n  readmePath?: string;\n\n  outpath?: string;\n\n  pretty?: boolean;\n\n  /**\n   * Loads the configuration from the provided `Inputs` object.\n   * @param {Inputs} inputs - The `Inputs` object containing the configuration values.\n   */\n  loadInputs(inputs: Inputs): void {\n    this.owner = inputs.config.get('owner') as string;\n    this.repo = inputs.config.get('repo') as string;\n    this.title_prefix = inputs.config.get('title_prefix') as string;\n    this.title = inputs.config.get('title') as string;\n    this.paths = inputs.config.get('paths') as Paths;\n    this.branding_svg_path = inputs.config.get('branding_svg_path') as string;\n    this.versioning = {\n      enabled: inputs.config.get('versioning:enabled') as boolean,\n      prefix: inputs.config.get('versioning:prefix') as string,\n      override: inputs.config.get('versioning:override') as string,\n      branch: inputs.config.get('versioning:branch') as string,\n    };\n    this.outpath = inputs.config.get('outpath') as string;\n    this.pretty = inputs.config.get('pretty') as boolean;\n  }\n\n  /**\n   * Saves the configuration to a file. If the file exists, it will be overwritten.\n   * @param {string} configPath - The path to the configuration file.\n   */\n  save(configPath: string): void {\n    const log = new LogTask('config:save');\n    // Validate that the directory exists\n    const directory = path.dirname(configPath);\n    // Create the directory if it doesn't exist\n    try {\n      fs.mkdir(directory, { recursive: true }, (err) => {\n        if (err) {\n          log.error(`Error creating directory: ${directory}.`);\n          throw err;\n        }\n      });\n      return fs.writeFile(configPath, JSON.stringify(this, null, 2), (err) => {\n        if (err) {\n          log.error(`Error writing config file: ${configPath}.`);\n          throw err;\n        } else {\n          log.info(`Config file written to: ${configPath}`);\n        }\n      });\n    } catch (error) {\n      log.error(`Unable to save config. Error: ${error}`);\n    }\n  }\n}\n"]}