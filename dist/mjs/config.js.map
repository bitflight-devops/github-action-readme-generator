{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,SAAS,CAAC;AACzB,OAAO,IAAI,MAAM,WAAW,CAAC;AAG7B,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAYzC,MAAM,OAAO,kBAAkB;IAC7B,KAAK,CAAU;IAEf,IAAI,CAAU;IAEd,YAAY,CAAU;IAEtB,KAAK,CAAU;IAEf,KAAK,CAAS;IAEd,+BAA+B,CAAU;IAEzC,UAAU,CAAc;IAExB,UAAU,CAAU;IAEpB,OAAO,CAAU;IAEjB,MAAM,CAAW;IAEjB,UAAU,CAAC,MAAc;QACvB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAW,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAW,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAW,CAAC;QAChE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAW,CAAC;QAClD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAU,CAAC;QACjD,IAAI,CAAC,+BAA+B,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CACtD,iCAAiC,CACxB,CAAC;QACZ,IAAI,CAAC,UAAU,GAAG;YAChB,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAY;YAC3D,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAW;YACxD,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAW;YAC5D,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAW;SACzD,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAW,CAAC;QACtD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAY,CAAC;IACvD,CAAC;IAED;;;;OAIG;IACH,IAAI,CAAC,UAAkB;QACrB,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC;QACvC,0CAA0C;QAC1C,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC3C,yCAAyC;QACzC,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;YAC/C,IAAI,GAAG,EAAE;gBACP,GAAG,CAAC,KAAK,CAAC,6BAA6B,SAAS,YAAY,GAAG,EAAE,CAAC,CAAC;aACpE;QACH,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;YACrE,IAAI,GAAG,EAAE;gBACP,GAAG,CAAC,KAAK,CAAC,8BAA8B,UAAU,YAAY,GAAG,EAAE,CAAC,CAAC;aACtE;iBAAM;gBACL,GAAG,CAAC,IAAI,CAAC,2BAA2B,UAAU,EAAE,CAAC,CAAC;aACnD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\n\nimport type Inputs from './inputs.js';\nimport LogTask from './logtask/index.js';\n\nexport interface Versioning {\n  enabled?: boolean;\n  prefix?: string;\n  override?: string;\n  branch?: string;\n}\nexport interface Paths {\n  action: string;\n  readme: string;\n}\nexport class GHActionDocsConfig {\n  owner?: string;\n\n  repo?: string;\n\n  title_prefix?: string;\n\n  title?: string;\n\n  paths?: Paths;\n\n  github_action_branding_svg_path?: string;\n\n  versioning?: Versioning;\n\n  readmePath?: string;\n\n  outpath?: string;\n\n  pretty?: boolean;\n\n  loadInputs(inputs: Inputs): void {\n    this.owner = inputs.config.get('owner') as string;\n    this.repo = inputs.config.get('repo') as string;\n    this.title_prefix = inputs.config.get('title_prefix') as string;\n    this.title = inputs.config.get('title') as string;\n    this.paths = inputs.config.get('paths') as Paths;\n    this.github_action_branding_svg_path = inputs.config.get(\n      'github_action_branding_svg_path',\n    ) as string;\n    this.versioning = {\n      enabled: inputs.config.get('versioning:enabled') as boolean,\n      prefix: inputs.config.get('versioning:prefix') as string,\n      override: inputs.config.get('versioning:override') as string,\n      branch: inputs.config.get('versioning:branch') as string,\n    };\n    this.outpath = inputs.config.get('outpath') as string;\n    this.pretty = inputs.config.get('pretty') as boolean;\n  }\n\n  /**\n   *\n   * @param configPath {string}\n   * @description Saves the config to a file,if the file exists it will be overwritten.\n   */\n  save(configPath: string): void {\n    const log = new LogTask('config:save');\n    // validate that that the directory exists\n    const directory = path.dirname(configPath);\n    // make the directory if it doesn't exist\n    fs.mkdir(directory, { recursive: true }, (err) => {\n      if (err) {\n        log.error(`Error creating directory: ${directory}. Error: ${err}`);\n      }\n    });\n    return fs.writeFile(configPath, JSON.stringify(this, null, 2), (err) => {\n      if (err) {\n        log.error(`Error writing config file: ${configPath}. Error: ${err}`);\n      } else {\n        log.info(`Config file written to: ${configPath}`);\n      }\n    });\n  }\n}\n"]}