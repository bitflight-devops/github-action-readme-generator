{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,QAAQ,IAAI,UAAU,EAAE,MAAM,SAAS,CAAC;AACjD,OAAO,IAAI,MAAM,WAAW,CAAC;AAG7B,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAqBzC;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAC7B,KAAK,CAAU;IAEf,IAAI,CAAU;IAEd,YAAY,CAAU;IAEtB,KAAK,CAAU;IAEf,KAAK,CAAS;IAEd,iBAAiB,CAAU;IAE3B,UAAU,CAAc;IAExB,QAAQ,CAAW;IAEnB;;;OAGG;IACH,UAAU,CAAC,MAAc;QACvB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,IAAI,CAAC,UAAkB;QAC3B,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC;QACvC,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE3C,IAAI;YACF,MAAM,UAAU,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;SACxD;QAAC,OAAO,KAAK,EAAE;YACd,GAAG,CAAC,KAAK,CAAC,6BAA6B,SAAS,GAAG,CAAC,CAAC;YACrD,MAAM,KAAK,CAAC;SACb;QAED,IAAI;YACF,MAAM,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACtE,GAAG,CAAC,IAAI,CAAC,2BAA2B,UAAU,EAAE,CAAC,CAAC;SACnD;QAAC,OAAO,KAAK,EAAE;YACd,GAAG,CAAC,KAAK,CAAC,8BAA8B,UAAU,GAAG,CAAC,CAAC;YACvD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF","sourcesContent":["/**\n * This TypeScript code imports the necessary modules and defines two interfaces: `Versioning` and `Paths`.\n * It also defines a class named `GHActionDocsConfig` that represents the configuration for generating GitHub Actions documentation.\n * The class has properties that correspond to the configuration options and a method `loadInputs` to load the configuration from the provided `Inputs` object.\n * The class also has a method `save` to save the configuration to a file.\n */\n\nimport { promises as fsPromises } from 'node:fs';\nimport path from 'node:path';\n\nimport type Inputs from './inputs.js';\nimport LogTask from './logtask/index.js';\n\n/**\n * Represents the versioning configuration for GitHub Actions documentation.\n */\nexport interface Versioning {\n  enabled?: boolean;\n  prefix?: string;\n  override?: string;\n  branch?: string;\n  badge?: string;\n}\n\n/**\n * Represents the paths configuration for GitHub Actions documentation.\n */\nexport interface Paths {\n  action: string;\n  readme: string;\n}\n\n/**\n * Represents the configuration for generating GitHub Actions documentation.\n */\nexport class GHActionDocsConfig {\n  owner?: string;\n\n  repo?: string;\n\n  title_prefix?: string;\n\n  title?: string;\n\n  paths?: Paths;\n\n  branding_svg_path?: string;\n\n  versioning?: Versioning;\n\n  prettier?: boolean;\n\n  /**\n   * Loads the configuration from the provided `Inputs` object.\n   * @param {Inputs} inputs - The `Inputs` object containing the configuration values.\n   */\n  loadInputs(inputs: Inputs): void {\n    const config = inputs.config.get();\n    this.owner = config.owner;\n    this.repo = config.repo;\n    this.title_prefix = config.title_prefix;\n    this.title = config.title;\n    this.paths = config.paths;\n    this.branding_svg_path = config.branding_svg_path;\n    this.versioning = config.versioning;\n    this.prettier = config.prettier;\n  }\n\n  /**\n   * Saves the configuration to a file. If the file exists, it will be overwritten.\n   * @param {string} configPath - The path to the configuration file.\n   */\n  async save(configPath: string): Promise<void> {\n    const log = new LogTask('config:save');\n    const directory = path.dirname(configPath);\n\n    try {\n      await fsPromises.mkdir(directory, { recursive: true });\n    } catch (error) {\n      log.error(`Error creating directory: ${directory}.`);\n      throw error;\n    }\n\n    try {\n      await fsPromises.writeFile(configPath, JSON.stringify(this, null, 2));\n      log.info(`Config file written to: ${configPath}`);\n    } catch (error) {\n      log.error(`Error writing config file: ${configPath}.`);\n      throw error;\n    }\n  }\n}\n"]}