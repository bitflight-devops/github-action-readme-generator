{"version":3,"file":"generate-docs.js","sourceRoot":"","sources":["../../src/generate-docs.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,MAAM,MAAM,aAAa,CAAC;AACjC,OAAO,OAAO,MAAM,oBAAoB,CAAC;AACzC,OAAO,IAAI,MAAM,WAAW,CAAC;AAC7B,OAAO,aAAa,MAAM,qBAAqB,CAAC;AAEhD,MAAM,CAAC,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAEnC;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY;IAChC,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAC7C,MAAM,eAAe,GAAoB,EAAE,CAAC;IAE5C,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,QAAQ,EAAE;QACrC,eAAe,CAAC,IAAI,CAClB,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YAC7C,IAAI,KAAK,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,cAAc,OAAO,KAAK,KAAK,EAAE,CAAC,CAAC;aACpD;QACH,CAAC,CAAC,CACH,CAAC;KACH;IACD,IAAI;QACF,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACnC,MAAM,MAAM,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;KACrB;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;KAC7B;AACH,CAAC","sourcesContent":["/**\n * This TypeScript code imports various modules and defines a function named 'generateDocs'.\n * The function is responsible for generating documentation for the README.md file based on the provided inputs.\n * It iterates through each section defined in the 'inputs.sections' array and calls the 'updateSection' function to update the corresponding section in the README.md file.\n * If an error occurs during the update of a section, it logs the error message and stops the process.\n * Finally, it saves the updated README.md file and calls the 'save' function.\n */\n\nimport Inputs from './inputs.js';\nimport LogTask from './logtask/index.js';\nimport save from './save.js';\nimport updateSection from './sections/index.js';\n\nexport const inputs = new Inputs();\n\n/**\n * Generates documentation for the README.md file.\n * @returns {Promise<void>} A promise that resolves once the documentation is generated.\n */\nexport async function generateDocs(): Promise<void> {\n  const log = new LogTask('generating readme');\n  const sectionPromises: Promise<void>[] = [];\n\n  for (const section of inputs.sections) {\n    sectionPromises.push(\n      updateSection(section, inputs).catch((error) => {\n        if (error) {\n          throw new Error(`Problem in ${section}. ${error}`);\n        }\n      }),\n    );\n  }\n  try {\n    await Promise.all(sectionPromises);\n    await inputs.readmeEditor.dumpToFile();\n    return save(inputs);\n  } catch (error) {\n    return log.fail(`${error}`);\n  }\n}\n"]}