{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { execSync } from 'node:child_process';\nimport { accessSync, readFileSync } from 'node:fs';\n\nimport type { Context } from '@actions/github/lib/context.js';\nimport type { PackageJson } from 'types-package-json';\n\nimport type Inputs from './inputs.js';\nimport LogTask from './logtask/index.js';\nimport { unicodeWordMatch } from './unicode-word-match.js';\nimport { notEmpty, Nullable } from './util.js';\n\n/**\n * Returns the input value if it is not empty, otherwise returns undefined.\n * @param value - The input value to check.\n * @returns The input value if it is not empty, otherwise undefined.\n */\nexport function undefinedOnEmpty(value: string | undefined): string | undefined {\n  if (!value || value === '') {\n    return undefined;\n  }\n  return value;\n}\n\n/**\n * Returns the basename of the given path.\n * @param path - The path to extract the basename from.\n * @returns The basename of the path.\n */\nexport function basename(path: string): string | undefined {\n  if (!path) return undefined;\n  const log = new LogTask('basename');\n  const result = path.split('/').reverse()[0];\n  log.debug(`Basename passed ${path} and returns ${result}`);\n  return result;\n}\n/**\n * Removes the \"refs/heads/\" or \"refs/tags/\" prefix from the given path.\n *\n * @param path - The path to remove the prefix from\n * @returns The path without the prefix, or null if path is empty\n */\nexport function stripRefs(path: string): string | null {\n  if (!path) return null;\n  const log = new LogTask('stripRefs');\n  const result = path.replace('refs/heads/', '').replace('refs/tags/', '');\n  log.debug(`stripRefs passed ${path} and returns ${result}`);\n  return result;\n}\n\n/**\n * Converts the given text to title case.\n * @param text - The text to convert.\n * @returns The text converted to title case.\n * @throws {TypeError} If the input is not a string.\n */\nexport function titlecase(text: string): string | undefined {\n  if (!text) return undefined;\n  if (typeof text !== 'string') {\n    throw new TypeError(`Invalid argument type provided to titlecase(): ${typeof text}`);\n  }\n  return text.replaceAll(unicodeWordMatch, (txt) =>\n    txt[0] ? txt[0].toUpperCase() + txt.slice(1).toLowerCase() : txt,\n  );\n}\n\n/**\n * Parses the given text and converts it to title case, replacing underscores and dashes with spaces.\n * @param text - The text to parse and convert.\n * @returns The parsed text converted to title case.\n */\nexport function prefixParser(text: string | undefined): string | undefined {\n  if (!text) return undefined;\n  if (typeof text !== 'string') {\n    throw new TypeError(`Invalid argument type provided to prefixParser(): ${typeof text}`);\n  }\n  return titlecase(text.replace(/[_-]+/, ' '));\n}\n\n/**\n * Wraps the given text into multiple lines with a maximum width of 80 characters.\n * @param text - The text to wrap.\n * @param content - The array to store the wrapped lines.\n * @param prepend - The string to prepend to each wrapped line.\n * @returns The array of wrapped lines.\n */\nexport function wrapText(text: string | undefined, content: string[], prepend = ''): string[] {\n  // Constrain the width of the description\n  if (!text) return content;\n  const width = 80;\n\n  let description = text\n    .trim()\n    .replaceAll('\\r\\n', '\\n') // Convert CR to LF\n    .replaceAll(/ +/g, ' ') //    Squash consecutive spaces\n    .replaceAll(' \\n', '\\n'); //  Squash space followed by newline\n\n  while (description) {\n    // Longer than width? Find a space to break apart\n    let segment: string;\n    if (description.length > width) {\n      segment = description.slice(0, Math.max(0, width + 1));\n      while (!segment.endsWith(' ') && !segment.endsWith('\\n') && segment) {\n        segment = segment.slice(0, Math.max(0, segment.length - 1));\n      }\n\n      // Trimmed too much?\n      if (segment.length < width * 0.67) {\n        segment = description;\n      }\n    } else {\n      segment = description;\n    }\n\n    // Check for newline\n    const newlineIndex = segment.indexOf('\\n');\n    if (newlineIndex >= 0) {\n      segment = segment.slice(0, Math.max(0, newlineIndex + 1));\n    }\n    content.push(`${prepend}${segment}`.trimEnd());\n    // Remaining\n    description = description.slice(segment.length);\n  }\n  return content;\n}\n\n/**\n * Represents a repository with owner and repo properties.\n */\nexport interface Repo {\n  owner: string;\n  repo: string;\n}\n\n/**\n * Represents the interface for capturing owner and repo properties from a regular expression match.\n */\ninterface OwnerRepoInterface extends RegExpExecArray {\n  groups?: {\n    [key: string]: string;\n    owner: string;\n    repo: string;\n  };\n}\n\nexport function readFile(filename: string): string {\n  try {\n    return readFileSync(filename, 'utf8');\n  } catch {\n    return '';\n  }\n}\n\nexport const remoteGitUrlPattern = /url( )?=( )?.*github\\.com[/:](?<owner>.*)\\/(?<repo>.*)\\.git/;\n/**\n * Finds the repository information from the input, context, environment variables, or git configuration.\n * @param inputRepo - The input repository string.\n * @param context - The GitHub context object.\n * @returns The repository information (owner and repo) or null if not found.\n */\nexport function repositoryFinder(\n  inputRepo: Nullable<string>,\n  context: Nullable<Context>,\n): Repo | null {\n  const log = new LogTask('repositoryFinder');\n  const obj = {} as unknown;\n  const result = obj as Repo;\n  if (notEmpty(inputRepo)) {\n    [result.owner, result.repo] = inputRepo.split('/') as [string, string];\n    log.info(`repositoryFinder using input ${inputRepo} and returns ${JSON.stringify(result)}`);\n    return result;\n  }\n  if (notEmpty(process.env.GITHUB_REPOSITORY)) {\n    [result.owner, result.repo] = process.env.GITHUB_REPOSITORY.split('/') as [string, string];\n    log.info(\n      `repositoryFinder using GITHUB_REPOSITORY ${\n        process.env.GITHUB_REPOSITORY\n      } and returns ${JSON.stringify(result)}`,\n    );\n    return result;\n  }\n  if (context) {\n    result.owner = context.repo.owner;\n    result.repo = context.repo.repo;\n\n    log.info(`repositoryFinder using GitHub context and returns ${JSON.stringify(result)}`);\n    return result;\n  }\n  if (notEmpty(process.env.INPUT_OWNER) && notEmpty(process.env.INPUT_REPO)) {\n    result.owner = process.env.INPUT_OWNER;\n    result.repo = process.env.INPUT_REPO;\n    return result;\n  }\n  try {\n    const fileContent = readFile('.git/config');\n\n    const results = remoteGitUrlPattern.exec(fileContent) as OwnerRepoInterface;\n    if (results.length > 0) {\n      log.debug(JSON.stringify(results.groups));\n      result.owner = results.groups?.owner ?? '';\n      result.repo = results.groups?.repo ?? '';\n\n      return result;\n    }\n  } catch (error) {\n    // can't find it\n    log.error(`Couldn't find any owner or repo: ${error}`);\n  }\n  throw new Error('No owner or repo found');\n}\n\n/**\n * Returns the default branch of the git repository.\n * @returns The default branch.\n */\n/**\n * Gets the default branch for the Git repository.\n *\n * @returns The name of the default branch.\n */\nexport function getDefaultGitBranch(): string {\n  let result: Buffer | undefined;\n  try {\n    // Run git command to get default branch\n    result = execSync('git symbolic-ref HEAD | sed s@^refs/heads/@@');\n  } catch (error) {\n    // If command fails, try alternative for MacOS\n    if (error) {\n      try {\n        result = execSync(\n          \"git remote set-head origin -a;git remote show origin | head 50 sed -n 's/^.*default branch \\\\(.*\\\\)/\\\\1/p'\",\n        );\n      } catch {\n        result = execSync(\n          \"git remote set-head origin -a;git remote show origin | sed -n 's/^s*HEAD branch: \\\\(.*\\\\)/\\\\1/p'\",\n        );\n      }\n    }\n  }\n  return result?.toString().trim() ?? '';\n}\n\n/**\n * Formats the given value as a column header.\n * @param value - The value to format.\n * @returns The formatted column header.\n */\nexport function columnHeader(value: string): string {\n  if (!value) {\n    return '';\n  }\n  let text: string = value.replaceAll(/\\*\\*(.*?)\\*\\*/g, '$1');\n\n  // Remove italic formatting: *italic*\n  text = text.replaceAll(/\\*(.*?)\\*/g, '$1');\n\n  // Remove strikethrough formatting: ~~strikethrough~~\n  text = text.replaceAll(/~~(.*?)~~/g, '$1');\n\n  const normalisedHeader = titlecase(text.trim());\n  if (normalisedHeader) {\n    return `<b>${normalisedHeader}</b>`;\n  }\n  return '';\n}\n/**\n * Formats the given value as a row header in HTML.\n *\n * Removes formatting from the string and converts it to code style.\n *\n * @param value - The string to format as a header\n * @returns The formatted row header string\n */\nexport function rowHeader(value: string): string {\n  if (!value) {\n    return '';\n  }\n\n  let text = value;\n\n  // Remove bold formatting\n  text = text.replaceAll(/\\*\\*(.*?)\\*\\*/g, '$1');\n\n  // Remove italic formatting: *italic*\n  text = text.replaceAll(/\\*(.*?)\\*/g, '$1');\n\n  // Remove strikethrough formatting: ~~strikethrough~~\n  text = text.replaceAll(/~~(.*?)~~/g, '$1');\n\n  // Normalize spacing\n  text = text.trim();\n\n  // Add code formatting\n  return `<b><code>${text}</code></b>`;\n}\n\nexport function getCurrentVersionString(inputs: Inputs): string {\n  let versionString = '';\n  const log = new LogTask('getCurrentVersionString');\n  if (inputs.config.get('versioning:enabled')) {\n    log.debug('version string in generated example is enabled');\n    const oRide = inputs.config.get('versioning:override') as string;\n    let packageVersion = process.env.npm_package_version;\n    log.debug(`version string in env:npm_package_version is ${packageVersion ?? 'not found'}`);\n    if (!packageVersion) {\n      log.debug('version string in env:npm_package_version is not found, trying to use git');\n      try {\n        accessSync('package.json');\n        const packageData: Partial<PackageJson> = JSON.parse(readFileSync('package.json', 'utf8'));\n        packageVersion = packageData.version;\n      } catch (error) {\n        log.debug(`package.json not found. ${error}`);\n      }\n      log.debug(`version string in package.json:version is ${packageVersion ?? 'not found'}`);\n    }\n\n    versionString = oRide && oRide.length > 0 ? oRide : packageVersion ?? '0.0.0';\n\n    if (\n      versionString &&\n      !versionString.startsWith(inputs.config.get('versioning:prefix') as string)\n    ) {\n      versionString = `${inputs.config.get('versioning:prefix') as string}${versionString}`;\n    }\n  } else {\n    versionString = inputs.config.get('versioning:branch') as string;\n  }\n  log.debug(`version to use in generated example is ${versionString}`);\n  return versionString;\n}\n\nexport function indexOfRegex(str: string, providedRegex: RegExp): number {\n  const regex = providedRegex.global\n    ? providedRegex\n    : new RegExp(providedRegex.source, `${providedRegex.flags}g`);\n  let index = -1;\n  let match: RegExpExecArray | null = regex.exec(str);\n  while (match) {\n    index = match.index;\n    match = regex.exec(str);\n  }\n  return index;\n}\n\nexport function lastIndexOfRegex(str: string, providedRegex: RegExp): number {\n  const regex = providedRegex.global\n    ? providedRegex\n    : new RegExp(providedRegex.source, `${providedRegex.flags}g`);\n  let index = -1;\n  let match: RegExpExecArray | null = regex.exec(str);\n  while (match) {\n    index = match.index + match[0].length;\n    match = regex.exec(str);\n  }\n  return index;\n}\n"]}