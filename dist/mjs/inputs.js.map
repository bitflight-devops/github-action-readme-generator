{"version":3,"file":"inputs.js","sourceRoot":"","sources":["../../src/inputs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This TypeScript code defines a class named 'Inputs' that handles input configuration and manipulation.\n * It imports various modules and packages for file operations, configuration parsing, and logging.\n * The class has methods for initializing the input configuration, setting default values, and converting the configuration to a string.\n * It also has properties for storing the configuration values, sections, readme path, action instance, and readme editor instance.\n */\n\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport * as core from '@actions/core';\nimport type { Context } from '@actions/github/lib/context.js';\nimport { IOptions, Provider } from 'nconf';\nimport YAML from 'yaml';\n\nimport Action from './Action.js';\nimport {\n  configFileName,\n  ConfigKeys,\n  README_SECTIONS,\n  ReadmeSection,\n  RequiredInputs,\n} from './constants.js';\nimport { repositoryFinder } from './helpers.js';\nimport LogTask from './logtask/index.js';\nimport ReadmeEditor from './readme-editor.js';\nimport workingDirectory from './working-directory.js';\n\nexport const __filename = fileURLToPath(import.meta.url);\nexport const __dirname = path.dirname(__filename);\n\nconst log = new LogTask('inputs');\n\nprocess.chdir(workingDirectory());\nconst githubEventPath = process.env.GITHUB_EVENT_PATH ?? '';\nlet githubEvent: Context | null = null;\ntry {\n  githubEvent = JSON.parse(fs.readFileSync(githubEventPath, 'utf8')) as Context;\n} catch {\n  // File not there\n  log.debug(`GITHUB_EVENT_PATH not found: ${githubEventPath}`);\n}\nconst argvOptions: Record<string, object> = {};\nargvOptions[ConfigKeys.Save] = {\n  alias: 'save',\n  describe: `Save this config to ${configFileName}`,\n  parseValues: true,\n  type: 'boolean',\n};\nargvOptions[ConfigKeys.pathsAction] = {\n  alias: ['pathsAction', 'action'],\n  type: 'string',\n  describe: 'Path to the action.yml',\n};\nargvOptions[ConfigKeys.pathsReadme] = {\n  alias: ['pathsReadme', 'readme'],\n  type: 'string',\n  describe: 'Path to the README file',\n};\nargvOptions[ConfigKeys.BrandingSvgPath] = {\n  alias: 'svg',\n  type: 'string',\n  describe: 'Save and load the branding svg image in the README from this path',\n};\nargvOptions[ConfigKeys.BrandingAsTitlePrefix] = {\n  alias: 'branding_prefix',\n  type: 'boolean',\n  parseValues: true,\n  describe: 'Use the branding svg as a prefix for the README title',\n};\nargvOptions[ConfigKeys.Owner] = {\n  alias: 'owner',\n  type: 'string',\n  describe: 'The GitHub Action repository owner. i.e: `bitflight-devops`',\n};\nargvOptions[ConfigKeys.Repo] = {\n  alias: 'repo',\n  type: 'string',\n  describe: 'The GitHub Action repository name. i.e: `github-action-readme-generator`',\n};\nargvOptions[ConfigKeys.Prettier] = {\n  alias: ['pretty', 'prettier'],\n  type: 'boolean',\n  parseValues: true,\n  describe: 'Format the markdown using prettier formatter',\n};\nargvOptions[ConfigKeys.VersioningEnabled] = {\n  alias: ['versioning', 'versioning_enabled'],\n  describe:\n    'Enable the update of the usage version to match the latest version in the package.json file',\n  parseValues: true,\n  type: 'boolean',\n};\nargvOptions[ConfigKeys.VersioningOverride] = {\n  alias: ['setversion', 'versioning_override', 'version_override'],\n  describe: 'Set a specific version to display in the README.md',\n  parseValues: true,\n};\nargvOptions[ConfigKeys.VersioningPrefix] = {\n  alias: ['vp', 'version_prefix'],\n  describe: \"Prefix the version with this value (if it isn't already prefixed)\",\n  parseValues: true,\n};\nargvOptions[ConfigKeys.VersioningBranch] = {\n  alias: ['branch', 'versioning_default_branch'],\n  describe: 'If versioning is disabled show this branch instead',\n  parseValues: true,\n};\nargvOptions[ConfigKeys.IncludeGithubVersionBadge] = {\n  alias: ['version-badge', 'versioning_badge', 'include_github_version_badge'],\n  describe: 'Display the current version as a badge',\n  parseValues: true,\n  type: 'boolean',\n};\nargvOptions[ConfigKeys.TitlePrefix] = {\n  alias: ['prefix', 'title_prefix'],\n  describe: 'Add a prefix to the README title',\n  parseValues: true,\n};\n\nargvOptions[ConfigKeys.DebugNconf] = {\n  describe: 'Print out the resolved nconf object with all values',\n  parseValues: true,\n  type: 'boolean',\n};\nargvOptions[ConfigKeys.DebugConfig] = {\n  describe: 'Print out the resolved nconf object with all values',\n  parseValues: true,\n  type: 'boolean',\n};\n\n/**\n * Configuration inputs from the github action don't\n * all match the input names when running on cli.\n * This maps the action inputs to the cli.\n */\nconst ConfigKeysInputsMap: Record<string, string> = {\n  save: ConfigKeys.Save,\n  action: ConfigKeys.pathsAction,\n  readme: ConfigKeys.pathsReadme,\n  branding_svg_path: ConfigKeys.BrandingSvgPath,\n  branding_as_title_prefix: ConfigKeys.BrandingAsTitlePrefix,\n  versioning_enabled: ConfigKeys.VersioningEnabled,\n  version_prefix: ConfigKeys.VersioningPrefix,\n  versioning_default_branch: ConfigKeys.VersioningBranch,\n  version_override: ConfigKeys.VersioningOverride,\n  include_github_version_badge: ConfigKeys.IncludeGithubVersionBadge,\n  owner: ConfigKeys.Owner,\n  repo: ConfigKeys.Repo,\n  title_prefix: ConfigKeys.TitlePrefix,\n  pretty: ConfigKeys.Prettier,\n};\n\ninterface KVPairType {\n  key: string;\n  value: string | undefined;\n}\ntype ProviderInstance = InstanceType<typeof Provider>;\n\nfunction setConfigValueFromActionFileDefault(\n  actionInstance: Action,\n  inputName: string,\n): string | boolean | undefined {\n  if (ConfigKeysInputsMap[inputName] === undefined) {\n    log.error(\n      `${inputName} from ${\n        actionInstance.path\n      } does not match a known input. Known inputs are: ${Object.keys(ConfigKeysInputsMap)}`,\n    );\n    return;\n  }\n\n  const configName = ConfigKeysInputsMap[inputName];\n  const defaultValue = actionInstance.inputDefault(inputName);\n  log.debug(`Default Value for action.yml: ${inputName} CLI: ${configName} = ${defaultValue}`);\n  return defaultValue;\n}\nfunction collectAllDefaultValuesFromAction(thisActionPath: string): IOptions {\n  try {\n    const defaultValues = {} as IOptions;\n    const thisAction = new Action(thisActionPath);\n    // Collect all of the default values from the action.yml file\n    if (thisAction.inputs) {\n      for (const key of Object.keys(thisAction.inputs)) {\n        const mappedKey = ConfigKeysInputsMap[key] ?? key;\n        defaultValues[mappedKey] = setConfigValueFromActionFileDefault(thisAction, key);\n      }\n    }\n    log.debug(JSON.stringify(defaultValues, null, 2));\n    return defaultValues;\n  } catch (error) {\n    throw new Error(`failed to load defaults from this action's action.yml: ${error}`);\n  }\n}\n\nexport default class Inputs {\n  config: ProviderInstance;\n\n  sections: ReadmeSection[];\n\n  readmePath: string;\n\n  configPath: string;\n\n  action: Action;\n\n  readmeEditor: ReadmeEditor;\n\n  owner: string;\n\n  repo: string;\n\n  /**\n   * Initializes a new instance of the Inputs class.\n   */\n  constructor() {\n    this.configPath = path.resolve(configFileName);\n    this.config = new Provider();\n    const repositoryDetail = repositoryFinder(null, githubEvent);\n    if (process.env.GITHUB_ACTION) {\n      log.info('Running in GitHub action');\n    }\n    if (fs.existsSync(this.configPath)) {\n      log.info(`Config file found: ${this.configPath}`);\n    } else {\n      log.error(`Config file not found: ${this.configPath}`);\n    }\n    this.config\n\n      .file(this.configPath)\n      .env({\n        lowerCase: true,\n        parseValues: true,\n        match: /^(INPUT|input)_[A-Z_a-z]\\w*$/,\n        transform: (obj: KVPairType): undefined | KVPairType => {\n          if (/^(INPUT|input)_[A-Z_a-z]\\w*$/.test(obj.key)) {\n            log.debug(`Parsing input: ${obj.key} with ith value: ${obj.value}`);\n            const keyParsed = obj.key.replace(/^(INPUT|input)_/, '');\n            // eslint-disable-next-line no-param-reassign\n            obj.key = ConfigKeysInputsMap[keyParsed] || keyParsed;\n\n            this.config.set(ConfigKeysInputsMap[keyParsed] || keyParsed, obj.value);\n\n            log.debug(`New input is ${obj.key} with the value ${obj.value}`);\n            return obj;\n          }\n          log.debug(`Ignoring input: ${obj.key} with ith value: ${obj.value}`);\n          return undefined;\n        },\n      })\n      .argv(argvOptions);\n\n    const actionPath = path.resolve(this.config.get(ConfigKeys.pathsAction) as string);\n    this.action = new Action(actionPath);\n    const thisActionPath = path.join(__dirname, '../../action.yml');\n    const defaultValues = collectAllDefaultValuesFromAction(thisActionPath);\n    // Apply the default values from the action.yml file\n    this.config\n      .defaults({\n        ...defaultValues,\n        owner: repositoryDetail?.owner,\n        repo: repositoryDetail?.repo,\n        sections: [...README_SECTIONS] as ReadmeSection[],\n      })\n      .required([...RequiredInputs]);\n\n    this.sections = this.config.get('sections') as ReadmeSection[];\n    this.readmePath = path.resolve(this.config.get(ConfigKeys.pathsReadme) as string);\n    this.readmeEditor = new ReadmeEditor(this.readmePath);\n    core.setOutput('readme', this.readmePath);\n    /**\n     * owner is required, and if it doesn't exist it is handled by nconf which throws an error\n     */\n    this.owner = this.config.get('owner');\n\n    /**\n     * repo is required, and if it doesn't exist it is handled by nconf which throws an error\n     */\n    this.repo = this.config.get('repo');\n  }\n\n  stringify(): string {\n    if (this?.config) {\n      try {\n        return YAML.stringify(this.config.get());\n      } catch (error) {\n        log.error(`${error}`);\n        // continue\n      }\n    }\n    // this is just for debug, no need to stop the process if it fails\n    return '';\n  }\n}\n"]}