{"version":3,"file":"inputs.js","sourceRoot":"","sources":["../../src/inputs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable sonarjs/no-duplicate-string */\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\n\nimport type { Context } from '@actions/github/lib/context.js';\nimport { Provider } from 'nconf';\nimport YAML from 'yaml';\n\nimport Action from './Action.js';\nimport { repositoryFinder } from './helpers.js';\nimport LogTask from './logtask/index.js';\nimport ReadmeEditor from './readme-editor.js';\nimport { workingDirectory } from './working-directory.js';\n\nconst log = new LogTask('inputs');\n\nprocess.chdir(workingDirectory());\nconst githubEventPath = process.env.GITHUB_EVENT_PATH ?? '';\nlet githubEvent: Context | null = null;\ntry {\n  githubEvent = JSON.parse(fs.readFileSync(githubEventPath, 'utf8')) as Context;\n} catch {\n  // File not there\n  log.debug(`GITHUB_EVENT_PATH not found: ${githubEventPath}`);\n}\nexport const configFileName = '.ghadocs.json';\nconst pathsAction = 'paths:action';\nconst pathsReadme = 'paths:readme';\nexport const configKeys: string[] = [\n  'save',\n  pathsAction,\n  pathsReadme,\n  'branding_svg_path',\n  'branding_as_title_prefix',\n  'versioning:enabled',\n  'versioning:override',\n  'versioning:prefix',\n  'versioning:branch',\n  'owner',\n  'repo',\n  'title_prefix',\n  'pretty',\n  'include_github_version_badge',\n];\ninterface KVPairType {\n  key: string;\n  value: string | undefined;\n}\ntype ProviderInstance = InstanceType<typeof Provider>;\nexport default class Inputs {\n  public config: ProviderInstance;\n\n  public sections: string[];\n\n  public readmePath: string;\n\n  public configPath: string;\n\n  public action: Action;\n\n  public readmeEditor: ReadmeEditor;\n\n  constructor() {\n    this.configPath = path.resolve(configFileName);\n    this.config = new Provider();\n    const repositoryDetail = repositoryFinder(null, githubEvent);\n    if (process.env.GITHUB_ACTION) {\n      log.info('running in GitHub action');\n    }\n    if (fs.existsSync(this.configPath)) {\n      log.info(`config file found: ${this.configPath}`);\n    } else {\n      log.error(`config file not found: ${this.configPath}`);\n    }\n    this.config\n      .env({\n        lowerCase: true,\n        parseValues: true,\n        match: /^INPUT_/,\n        transform: (obj: KVPairType): undefined | KVPairType => {\n          if (obj.key.startsWith('input_') || obj.key.startsWith('INPUT_')) {\n            const newObj: KVPairType = {\n              key: obj.key,\n              value: obj.value,\n            };\n            const keyParsed = obj.key.replace(/^(INPUT|input)_/, '');\n            switch (keyParsed) {\n              case 'readme': {\n                newObj.key = pathsReadme;\n                break;\n              }\n              case 'action': {\n                newObj.key = pathsAction;\n                break;\n              }\n              case 'versioning_enabled': {\n                newObj.key = 'versioning:enabled';\n                break;\n              }\n              case 'version_prefix': {\n                newObj.key = 'versioning:prefix';\n                break;\n              }\n              case 'versioning_default_branch': {\n                newObj.key = 'versioning:branch';\n                break;\n              }\n              case 'version_override': {\n                newObj.key = 'versioning:override';\n                break;\n              }\n              case 'include_github_version_badge': {\n                newObj.key = 'versioning:badge';\n                break;\n              }\n              default: {\n                newObj.key = keyParsed;\n                break;\n              }\n            }\n            if (newObj.value) {\n              this.config.set(newObj.key, newObj.value);\n            }\n            return newObj;\n          }\n          return undefined;\n        },\n      })\n      .argv({\n        'save': {\n          alias: 'save',\n          describe: `Save this config to ${configFileName}`,\n          parseValues: true,\n          type: 'boolean',\n        },\n        'paths:action': {\n          alias: ['pathsAction', 'action'],\n          type: 'string',\n          describe: 'Path to the action.yml',\n        },\n        'paths:readme': {\n          alias: ['pathsReadme', 'readme'],\n          type: 'string',\n          describe: 'Path to the README file',\n        },\n        'branding_svg_path': {\n          alias: 'svg',\n          type: 'string',\n          describe: 'Save and load the branding svg image in the README from this path',\n        },\n        'branding_as_title_prefix': {\n          alias: 'branding_prefix',\n          type: 'boolean',\n          parseValues: true,\n          describe: 'Save and load the branding svg image in the README from this path',\n        },\n        'owner': {\n          alias: 'owner',\n          describe: 'The GitHub Action repository owner. i.e: `bitflight-devops`',\n        },\n        'repo': {\n          alias: 'repo',\n          describe: 'The GitHub Action repository name. i.e: `github-action-readme-generator`',\n        },\n        'prettier': {\n          alias: 'pretty',\n          describe: 'Format the markdown using prettier formatter',\n          parseValues: true,\n          type: 'boolean',\n        },\n        'versioning:enabled': {\n          alias: ['versioning', 'versioning_enabled'],\n          describe:\n            'Enable the update of the usage version to match the latest version in the package.json file',\n          parseValues: true,\n          type: 'boolean',\n        },\n        'versioning:override': {\n          alias: ['setversion', 'versioning_override', 'version_override'],\n          describe: 'Set a specific version to display in the README.md',\n          parseValues: true,\n        },\n        'versioning:prefix': {\n          alias: ['vp', 'version_prefix'],\n          describe: \"Prefix the version with this value (if it isn't already prefixed)\",\n          parseValues: true,\n        },\n        'versioning:branch': {\n          alias: ['branch', 'versioning_default_branch'],\n          describe: 'If versioning is disabled show this branch instead',\n          parseValues: true,\n        },\n        'versioning:badge': {\n          alias: ['version-badge', 'versioning_badge'],\n          describe: 'Display the current version as a badge',\n          parseValues: true,\n          type: 'boolean',\n        },\n        'title_prefix': {\n          alias: ['prefix', 'title_prefix'],\n          describe: 'Add a prefix to the README title',\n          parseValues: true,\n        },\n      })\n      .file(this.configPath)\n      .defaults({\n        owner: repositoryDetail?.owner,\n        repo: repositoryDetail?.repo,\n        sections: [\n          'title',\n          'branding',\n          'description',\n          'usage',\n          'inputs',\n          'outputs',\n          'contents',\n          'badges',\n        ],\n      })\n      .required(['owner', 'repo']);\n\n    this.sections = this.config.get('sections') as string[];\n\n    const actionPath = path.resolve(this.config.get(pathsAction) as string);\n    this.action = new Action(actionPath);\n    this.readmePath = path.resolve(this.config.get(pathsReadme) as string);\n    try {\n      const thisActionPath = path.join(__dirname, '../../action.yml');\n      const thisAction = new Action(thisActionPath);\n      this.setConfigValueFromActionFileDefault(thisAction, 'readme', pathsReadme);\n      this.setConfigValueFromActionFileDefault(thisAction, 'title_prefix');\n      this.setConfigValueFromActionFileDefault(thisAction, 'save');\n      this.setConfigValueFromActionFileDefault(thisAction, 'pretty');\n      this.setConfigValueFromActionFileDefault(\n        thisAction,\n        'versioning_enabled',\n        'versioning:enabled',\n      );\n      this.setConfigValueFromActionFileDefault(\n        thisAction,\n        'versioning_default_branch',\n        'versioning:branch',\n      );\n      this.setConfigValueFromActionFileDefault(\n        thisAction,\n        'version_override',\n        'versioning:override',\n      );\n      this.setConfigValueFromActionFileDefault(thisAction, 'version_prefix', 'versioning:prefix');\n      this.setConfigValueFromActionFileDefault(\n        thisAction,\n        'include_github_version_badge',\n        'versioning:badges',\n      );\n      this.setConfigValueFromActionFileDefault(thisAction, 'branding_svg_path');\n      this.setConfigValueFromActionFileDefault(thisAction, 'branding_as_title_prefix');\n    } catch (error) {\n      log.info(`failed to load defaults from action's action.yml: ${error}`);\n    }\n\n    this.readmeEditor = new ReadmeEditor(this.readmePath);\n    if (LogTask.isDebug()) {\n      try {\n        log.debug('resolved inputs:');\n        log.debug(this.stringify());\n        log.debug('resolved action:');\n        log.debug(this.action.stringify());\n      } catch (error) {\n        if (typeof error === 'string') {\n          log.debug(error);\n        }\n      }\n    }\n  }\n\n  setConfigValueFromActionFileDefault(\n    actionInstance: Action,\n    inputName: string,\n    providedConfigName?: string,\n  ): void {\n    const configName = providedConfigName ?? inputName;\n    this.config.set(\n      configName,\n      this.config.get(configName) ?? actionInstance.inputDefault(inputName),\n    );\n  }\n\n  stringify(): string {\n    if (this) {\n      const output: string[] = [];\n      for (const k of configKeys) {\n        output.push(`${k}: ${this.config.get(k)}`);\n      }\n      return YAML.stringify(output);\n    }\n    return '';\n  }\n}\n"]}