{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/logtask/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as core from '@actions/core';\nimport chalkPkg from 'chalk';\nimport * as emoji from 'node-emoji';\n\n// Chalk color styles\nconst {\n  bgRedBright,\n  cyan,\n  green,\n  greenBright,\n  red,\n  redBright,\n  white,\n  whiteBright,\n  yellow,\n  yellowBright,\n} = chalkPkg;\n\n// Constants for different log step types\n\nenum LogGroup {\n  NO_GROUP = 0,\n  START_GROUP,\n  END_GROUP,\n  IS_ERROR,\n  IS_FAILED,\n  IS_TITLE,\n}\n\nfunction highlightMessage(step: string, message: string): { desc: any; failed: any } {\n  let failed = false;\n  let desc: string;\n  switch (step) {\n    case 'START': {\n      desc = yellowBright(`${message}`);\n      break;\n    }\n    case 'INFO': {\n      desc = green(`${message}`);\n      break;\n    }\n    case 'WARN': {\n      desc = yellow(`${message}`);\n      break;\n    }\n    case 'SUCCESS': {\n      desc = greenBright(`${message}`);\n      break;\n    }\n    case 'FAILURE': {\n      desc = redBright(`${message}`);\n      failed = true;\n      break;\n    }\n    case 'ERROR': {\n      desc = redBright(`${message}`);\n      break;\n    }\n    case '#####': {\n      desc = cyan(`${message}`);\n      break;\n    }\n    default: {\n      desc = white(`${message}`);\n      break;\n    }\n  }\n  return { desc, failed };\n}\nfunction highlightStep(step: string, message: string): string {\n  let msg: string;\n  // Logic to handle different log outputs based on the environment (GitHub Actions or local)\n  switch (step) {\n    case 'START': {\n      msg = yellowBright(message);\n      break;\n    }\n    case 'SUCCESS': {\n      msg = whiteBright(message);\n      break;\n    }\n    case 'FAILURE':\n    case 'ERROR': {\n      msg = red(message);\n      break;\n    }\n    default: {\n      msg = message;\n      break;\n    }\n  }\n  return msg;\n}\n\nfunction handleOutput(startGroup: LogGroup, isErroring: boolean, failed: any, msg: string): void {\n  // Logic to handle different log outputs based on the environment (GitHub Actions or local)\n  if (process.env.GITHUB_ACTIONS) {\n    switch (startGroup) {\n      case LogGroup.START_GROUP: {\n        core.startGroup(msg);\n\n        break;\n      }\n      case LogGroup.END_GROUP: {\n        core.endGroup();\n\n        break;\n      }\n      // Logic to handle erroring or failed steps\n      case LogGroup.IS_ERROR: {\n        core.error(bgRedBright(msg));\n\n        break;\n      }\n      case LogGroup.IS_FAILED: {\n        core.setFailed(bgRedBright(msg));\n\n        break;\n      }\n      default: {\n        core.info(msg);\n      }\n    }\n  } else if (isErroring) {\n    // Logic to display the log message using the appropriate method of the 'core' package\n\n    if (failed) {\n      core.setFailed(msg);\n    } else {\n      core.error(msg);\n    }\n  } else {\n    core.info(msg);\n  }\n}\n/**\n * Represents a logging task with various log step methods.\n */\nexport default class LogTask {\n  /**\n   * Map of ingroup settings per task name.\n   */\n  private static ingroupSettings = new Map<string, boolean>();\n\n  /**\n   * The width of the indentation for log messages.\n   */\n  private static indentWidth = 5;\n\n  /**\n   * Checks if debug mode is enabled.\n   * @returns A boolean indicating if debug mode is enabled.\n   */\n  static isDebug(): boolean {\n    return core.isDebug() || !!process.env.DEBUG;\n  }\n\n  /**\n   * The name of the task.\n   */\n  private name: string;\n\n  /**\n   * Creates a new instance of the LogTask class.\n   * @param name - The name of the task.\n   */\n  constructor(name: string) {\n    this.name = name?.trim();\n  }\n\n  /**\n   * Gets the ingroup setting for the task.\n   */\n  get ingroup(): boolean {\n    return LogTask.ingroupSettings.get(this.name) ?? false;\n  }\n\n  /**\n   * Sets the ingroup setting for this task.\n   */\n  set ingroup(value: boolean) {\n    LogTask.ingroupSettings.set(this.name, value);\n  }\n\n  getMessageString(step: string, desc: string, emojiStr: string): string {\n    let msg: string;\n    if (this.ingroup && !process.env.GITHUB_ACTIONS) {\n      const indentStr = ' '.repeat(LogTask.indentWidth);\n      msg = `${indentStr}   ${emojiStr}: ${this.name} > ${desc}`;\n    } else {\n      const stepStr = step.padEnd(LogTask.indentWidth, ' ');\n      msg = `[${stepStr}][${this.name}] ${emojiStr}: ${desc}`;\n    }\n    return highlightStep(step, msg);\n  }\n\n  /**\n   * Logs a step with the given emoji, type, message and group.\n   * @param emojiStr - The emoji string to display.\n   * @param step - The step type.\n   * @param message - The message of the step.\n   * @param startGroup - The start group type.\n   */\n  logStep(emojiStr: string, step: string, message: string, startGroup = LogGroup.NO_GROUP): void {\n    // Logic to determine the log message color and format based on the step type\n    if (step.length > LogTask.indentWidth) {\n      LogTask.indentWidth = step.length;\n    }\n    const { desc, failed } = highlightMessage(step, message);\n    const msg = this.getMessageString(step, desc, emojiStr);\n\n    const isErroring = startGroup === LogGroup.IS_ERROR || startGroup === LogGroup.IS_FAILED;\n    handleOutput(startGroup, isErroring, failed, msg);\n  }\n\n  /**\n   * Logs a debug message.\n   * @param message - The message of the debug message.\n   */\n  debug(message = ''): void {\n    // Logic to log a debug message\n    if (LogTask.isDebug() && message !== '') {\n      this.logStep('👁️‍🗨️', 'DEBUG', message);\n    }\n  }\n\n  /**\n   * Logs a start message.\n   * @param message - The message of the start message.\n   */\n  start(message = ''): void {\n    // Logic to log a start message\n    const desc = message === '' ? `Starting ${this.name}...` : message;\n    this.logStep(emoji.get('rocket') ?? '', 'START', desc, LogGroup.START_GROUP);\n  }\n\n  /**\n   * Logs an info message.\n   * @param message - The message of the info message.\n   */\n  info(message = ''): void {\n    // Logic to log an info message\n    this.logStep(emoji.get('sparkles') ?? '', 'INFO', message);\n  }\n\n  /**\n   * Logs a warning message.\n   * @param message - The message of the warning message.\n   */\n  warn(message = ''): void {\n    // Logic to log a warning message\n    this.logStep(emoji.get('anger') ?? '', 'WARN', message);\n  }\n\n  /**\n   * Logs a success message.\n   * @param message - The message of the success message.\n   * @param ingroup - Indicates whether the success message is in a group.\n   */\n  success(message = '', ingroup = true): void {\n    // Logic to log a success message\n    const desc = message === '' ? `Completed ${this.name}.` : message;\n    if (ingroup) {\n      this.ingroup = false;\n      if (process.env.GITHUB_ACTIONS) {\n        core.endGroup();\n      }\n    }\n    this.logStep(emoji.get('white_check_mark') ?? '', 'SUCCESS', desc);\n  }\n\n  /**\n   * Logs a failure message.\n   * @param message - The message of the failure message.\n   * @param ingroup - Indicates whether the failure message is in a group.\n   */\n  fail(message = '', ingroup = true): void {\n    // Logic to log a failure message\n    const desc = message === '' ? `Failed ${this.name}.` : message;\n    if (ingroup) {\n      this.ingroup = false;\n      if (process.env.GITHUB_ACTIONS) {\n        core.endGroup();\n      }\n    }\n    const msgtype = process.env.GITHUB_ACTIONS ? LogGroup.IS_FAILED : LogGroup.IS_ERROR;\n    this.logStep(emoji.get('x') ?? '', 'FAILURE', desc, msgtype);\n  }\n\n  /**\n   * Logs an error message.\n   * @param message - The message of the error message.\n   */\n  error(message = ''): void {\n    // Logic to log an error message\n    this.logStep(emoji.get('x') ?? '', 'ERROR', message, LogGroup.IS_ERROR);\n  }\n\n  /**\n   * Logs a title message.\n   * @param message - The message of the title message.\n   */\n  title(message = ''): void {\n    // Logic to log a title message\n    this.logStep('📓', '#####', message, LogGroup.IS_TITLE);\n  }\n}\n"]}