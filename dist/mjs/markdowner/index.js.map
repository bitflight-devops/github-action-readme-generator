{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/markdowner/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Types representing a 2D array of strings for a Markdown table.\n */\nexport type MarkdownArrayRowType = string[][];\nexport type MarkdownArrayItemType = string;\n\n/**\n * Fills a string to a desired width by padding with spaces.\n *\n * @param text - The text to pad.\n * @param width - The desired total width.\n * @param paddingStart - Number of spaces to pad at the start.\n * @returns The padded string.\n */\nexport function padString(text: string, width: number, paddingStart: number): string {\n  return ' '.repeat(paddingStart) + text.padEnd(width);\n}\n\n/**\n * Escapes special Markdown characters in a string.\n *\n * @param text - The text to escape.\n * @returns The escaped text.\n */\nexport function markdownEscapeTableCell(text: string): string {\n  return text.replaceAll('\\n', '<br />').replaceAll('|', '\\\\|');\n}\n\n/**\n * Escapes inline code blocks in a Markdown string.\n *\n * @param content - Markdown string.\n * @returns String with escaped inline code blocks.\n */\nexport function markdownEscapeInlineCode(content: string): string {\n  return content.replaceAll(/`([^`]*)`/g, '<code>$1</code>').replaceAll('><!--', '>\\\\<!--');\n}\n/**\n * Clones a 2D array.\n *\n * @param arr - Array to clone.\n * @returns Cloned array.\n */\nexport function cloneArray(arr: MarkdownArrayRowType): MarkdownArrayRowType {\n  return arr.map((innerArr) => [...innerArr]);\n}\n\n/**\n * Gets max and min column counts from 2D array.\n *\n * @param data - 2D string array.\n * @returns Object with max and min cols.\n */\nexport function getColumnCounts(data: MarkdownArrayRowType): {\n  maxCols: number;\n  minCols: number;\n} {\n  let maxCols = 0;\n  let minCols = 0;\n\n  for (const e of data) {\n    const numCols = e.length;\n    maxCols = Math.max(maxCols, numCols);\n    minCols = minCols === 0 ? numCols : Math.min(minCols, numCols);\n  }\n\n  return { maxCols, minCols };\n}\n\n/**\n * Pads 2D array rows to equal length.\n *\n * @param data - 2D array to pad.\n * @param maxCols - Number of columns to pad to.\n * @returns Padded 2D array.\n */\nexport function padArrayRows(data: MarkdownArrayRowType, maxCols: number): MarkdownArrayRowType {\n  return data.map((row) => {\n    const padding = Array.from({ length: maxCols - row.length }).fill('');\n    return [...row, ...padding];\n  }) as MarkdownArrayRowType;\n}\n\n/**\n * Converts a 2D array of strings to a Markdown table.\n *\n * @param data - 2D string array.\n * @returns Markdown table string.\n */\nexport function ArrayOfArraysToMarkdownTable(providedTableContent: MarkdownArrayRowType): string {\n  const clonedData = cloneArray(providedTableContent);\n  const { maxCols } = getColumnCounts(clonedData);\n  const paddedData = padArrayRows(clonedData, maxCols);\n  const maxRows = paddedData.length;\n\n  const markdownArrayRowsLength = maxRows + 1;\n  const markdownArrayEntriesLength = maxCols * 2 + 1;\n  const markdownArrays: MarkdownArrayRowType = Array.from({ length: markdownArrayRowsLength }, () =>\n    Array.from({ length: markdownArrayEntriesLength }, () => '|'),\n  );\n\n  const outputStrings: string[] = [];\n  let i = 0;\n  for (const row of markdownArrays) {\n    let col = 0;\n    const idx = i > 1 ? i - 1 : 0;\n    const dataRow = paddedData[idx];\n    for (let j = 0; j < row.length; j++) {\n      let content = markdownEscapeTableCell(dataRow[col] ?? '');\n      content = markdownEscapeInlineCode(content);\n      if (j % 2 === 1) {\n        if (i === 0) {\n          markdownArrays[i][j] = ` **${content.trim()}** `;\n        } else if (i === 1) {\n          markdownArrays[i][j] = '---';\n        } else {\n          markdownArrays[i][j] = ` ${content.trim()} `;\n        }\n        col += 1;\n      }\n    }\n    outputStrings.push(`${markdownArrays[i].join('')}\\n`);\n    i += 1;\n  }\n  return outputStrings.join('');\n}\n\nexport default ArrayOfArraysToMarkdownTable;\n"]}