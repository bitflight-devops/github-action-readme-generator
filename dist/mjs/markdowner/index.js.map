{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/markdowner/index.ts"],"names":[],"mappings":"AAEA;;;;;GAKG;AACH,MAAM,UAAU,SAAS,CAAC,IAAY,EAAE,KAAa,EAAE,YAAoB;IACzE,OAAO,CACL,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAC9F,CAAC;AACJ,CAAC;AACD;;;GAGG;AACH,MAAM,UAAU,uBAAuB,CAAC,IAAY;IAClD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAChE,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,OAAe;IACtD,0FAA0F;IAC1F,4BAA4B;IAC5B,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACzB,OAAO,OAAO,CAAC,UAAU,CAAC,gCAAgC,EAAE,qBAAqB,CAAC,CAAC;KACpF;IACD,OAAO,OAAO,CAAC;IAEf,yBAAyB;IACzB,yBAAyB;IACzB,kDAAkD;IAClD,aAAa;IACb,mDAAmD;IACnD,MAAM;IACN,kCAAkC;IAClC,MAAM;IACN,iBAAiB;AACnB,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,oBAA0C;IACrF,MAAM,YAAY,GAAyB,EAAE,CAAC;IAC9C,MAAM,aAAa,GAAa,EAAE,CAAC;IACnC,mDAAmD;IACnD,KAAK,MAAM,IAAI,IAAI,oBAAoB,EAAE;QACvC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAa,CAAC,CAAC;KAC1C;IACD,MAAM,OAAO,GAAG,YAAY,CAAC,MAAM,CAAC;IACpC,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,sDAAsD;IACtD,iDAAiD;IACjD,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,KAAK,MAAM,CAAC,IAAI,YAAY,EAAE;QAC5B,IAAI,YAAY,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE;YACtC,MAAM,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC;YACzB,IAAI,OAAO,GAAG,OAAO,EAAE;gBACrB,OAAO,GAAG,OAAO,CAAC;aACnB;YACD,IAAI,OAAO,GAAG,OAAO,IAAI,OAAO,KAAK,CAAC,EAAE;gBACtC,OAAO,GAAG,OAAO,CAAC;aACnB;SACF;QACD,MAAM,IAAI,CAAC,CAAC;KACb;IACD,IAAI,OAAO,KAAK,OAAO,EAAE;QACvB,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,KAAK,MAAM,CAAC,IAAI,YAAY,EAAE;YAC5B,IAAI,YAAY,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE;gBACtC,YAAY,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAa,CAAC;aAC7E;iBAAM,IAAI,CAAC,CAAC,MAAM,GAAG,OAAO,EAAE;gBAC7B,YAAY,CAAC,MAAM,CAAC,GAAG;oBACrB,GAAG,CAAC;oBACJ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;iBACpD,CAAC;aACf;YACD,MAAM,IAAI,CAAC,CAAC;SACb;KACF;IACD,MAAM,uBAAuB,GAAG,OAAO,GAAG,CAAC,CAAC;IAC5C,MAAM,0BAA0B,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;IACnD,MAAM,cAAc,GAAyB,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,uBAAuB,EAAE,CAAC,CAAC,IAAI,CAC/F,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,0BAA0B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAa,CAAa,CAC3D,CAAC;IAC1B,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,KAAK,MAAM,GAAG,IAAI,cAAc,EAAE;QAChC,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;YAE1D,OAAO,GAAG,wBAAwB,CAAC,OAAO,CAAC,CAAC;YAE5C,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACf,IAAI,CAAC,KAAK,CAAC,EAAE;oBACX,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;iBAClD;qBAAM,IAAI,CAAC,KAAK,CAAC,EAAE;oBAClB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;iBAC9B;qBAAM;oBACL,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;iBAC9C;gBACD,GAAG,IAAI,CAAC,CAAC;aACV;SACF;QACD,aAAa,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACtD,CAAC,IAAI,CAAC,CAAC;KACR;IAED,OAAO,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAChC,CAAC;AAED,eAAe,4BAA4B,CAAC","sourcesContent":["export type MarkdownArrayRowType = string[][];\nexport type MarkdownArrayItemType = string;\n/**\n * Fills the width of the cell.\n * @param text\n * @param width\n * @param paddingStart\n */\nexport function fillWidth(text: string, width: number, paddingStart: number): string {\n  return (\n    ' '.repeat(paddingStart) + text + ' '.repeat(Math.max(1, width - text.length - paddingStart))\n  );\n}\n/**\n * Escape a text so it can be used in a markdown table\n * @param text\n */\nexport function markdownEscapeTableCell(text: string): string {\n  return text.replaceAll('\\n', '<br />').replaceAll('|', '\\\\|');\n}\n\nexport function markdownEscapeInlineCode(content: string): string {\n  // replace grave accents with <code> HTML element to resolve unicode character in markdown\n  // let isClosingTag = false;\n  if (content.includes('|')) {\n    return content.replaceAll(/([\\s*_]|^)`([^`]+)`([\\s*_]|$)/g, '$1<code>$2</code>$3');\n  }\n  return content;\n\n  // ?.forEach((match) => {\n  //   if (!isClosingTag) {\n  //     content = content.replace(match, '<code>');\n  //   } else {\n  //     content = content.replace(match, '</code>');\n  //   }\n  //   isClosingTag = !isClosingTag;\n  // });\n  // return content\n}\n\nexport function ArrayOfArraysToMarkdownTable(providedTableContent: MarkdownArrayRowType): string {\n  const tableContent: MarkdownArrayRowType = [];\n  const outputStrings: string[] = [];\n  // Clone the arrays so we don't modify the original\n  for (const rowA of providedTableContent) {\n    tableContent.push([...rowA] as string[]);\n  }\n  const maxRows = tableContent.length;\n  let maxCols = 0;\n  let minCols = 0;\n  // Find the max and min columns so we can pad the rows\n  // for (const [i, e] of tableContent.entries()) {\n  let tblIdx = 0;\n  for (const e of tableContent) {\n    if (tableContent[tblIdx] !== undefined) {\n      const numCols = e.length;\n      if (numCols > maxCols) {\n        maxCols = numCols;\n      }\n      if (numCols < minCols || minCols === 0) {\n        minCols = numCols;\n      }\n    }\n    tblIdx += 1;\n  }\n  if (maxCols !== minCols) {\n    let cntIdx = 0;\n    for (const e of tableContent) {\n      if (tableContent[cntIdx] === undefined) {\n        tableContent[cntIdx] = Array.from({ length: maxCols }).fill('') as string[];\n      } else if (e.length < maxCols) {\n        tableContent[cntIdx] = [\n          ...e,\n          ...Array.from({ length: maxCols - e.length }).fill('undefined'),\n        ] as string[];\n      }\n      cntIdx += 1;\n    }\n  }\n  const markdownArrayRowsLength = maxRows + 1;\n  const markdownArrayEntriesLength = maxCols * 2 + 1;\n  const markdownArrays: MarkdownArrayRowType = Array.from({ length: markdownArrayRowsLength }).fill(\n    Array.from({ length: markdownArrayEntriesLength }).fill('|' as string) as string[],\n  ) as MarkdownArrayRowType;\n  let i = 0;\n  for (const row of markdownArrays) {\n    let col = 0;\n\n    const idx = i > 1 ? i - 1 : 0;\n    const dataRow = tableContent[idx];\n    for (let j = 0; j < row.length; j++) {\n      let content = markdownEscapeTableCell(dataRow[col] ?? '');\n\n      content = markdownEscapeInlineCode(content);\n\n      if (j % 2 === 1) {\n        if (i === 0) {\n          markdownArrays[i][j] = ` **${content.trim()}** `;\n        } else if (i === 1) {\n          markdownArrays[i][j] = '---';\n        } else {\n          markdownArrays[i][j] = ` ${content.trim()} `;\n        }\n        col += 1;\n      }\n    }\n    outputStrings.push(`${markdownArrays[i].join('')}\\n`);\n    i += 1;\n  }\n\n  return outputStrings.join('');\n}\n\nexport default ArrayOfArraysToMarkdownTable;\n"]}