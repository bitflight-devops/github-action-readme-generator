{"version":3,"file":"prettier.js","sourceRoot":"","sources":["../../src/prettier.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAEzC,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC;AACpC,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,KAAa,EAAE,QAAiB;IAC/D,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACxC,OAAO,MAAM,CAAC,KAAK,EAAE;QACnB,IAAI,EAAE,KAAK;QACX,MAAM,EAAE,MAAM;QACd,0BAA0B,EAAE,MAAM;QAClC,GAAG,EAAE;KACN,CAAC,CAAC;AACL,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,KAAa,EAAE,QAAiB;IACnE,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACxC,OAAO,MAAM,CAAC,KAAK,EAAE;QACnB,IAAI,EAAE,KAAK;QACX,MAAM,EAAE,UAAU;QAClB,0BAA0B,EAAE,MAAM;QAClC,GAAG,EAAE;KACN,CAAC,CAAC;AACL,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,KAAyB,EACzB,OAAiB,EACjB,MAAM,GAAG,QAAQ;IAEjB,IAAI,CAAC,KAAK;QAAE,OAAO,OAAO,IAAI,EAAE,CAAC;IACjC,8FAA8F;IAC9F,IAAI,eAAe,GAAG,EAAE,CAAC;IACzB,IAAI;QACF,eAAe,GAAG,MAAM,MAAM,CAAC,KAAK,EAAE;YACpC,IAAI,EAAE,KAAK;YACX,MAAM,EAAE,MAAM;YACd,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;KACJ;IAAC,OAAO,KAAK,EAAE;QACd,GAAG,CAAC,KAAK,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;KACvB;IAED,OAAO,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9F,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { format } from 'prettier';\n\nimport LogTask from './logtask/index.js';\n\nconst log = new LogTask('prettier');\nexport async function formatYaml(value: string, filepath?: string): Promise<string> {\n  const fp = filepath ? { filepath } : {};\n  return format(value, {\n    semi: false,\n    parser: 'yaml',\n    embeddedLanguageFormatting: 'auto',\n    ...fp,\n  });\n}\nexport async function formatMarkdown(value: string, filepath?: string): Promise<string> {\n  const fp = filepath ? { filepath } : {};\n  return format(value, {\n    semi: false,\n    parser: 'markdown',\n    embeddedLanguageFormatting: 'auto',\n    ...fp,\n  });\n}\nexport async function wrapDescription(\n  value: string | undefined,\n  content: string[],\n  prefix = '    # ',\n): Promise<string[]> {\n  if (!value) return content ?? [];\n  // const valueWithoutPrefix = prefix && prefix.length > 0 ? value.replace(prefix, '') : value;\n  let formattedString = '';\n  try {\n    formattedString = await format(value, {\n      semi: false,\n      parser: 'yaml',\n      proseWrap: 'always',\n    });\n  } catch (error) {\n    log.error(`${error}`);\n  }\n\n  content.push(...formattedString.split('\\n').map((line) => prefix + line.replace(prefix, '')));\n  return content;\n}\n"]}