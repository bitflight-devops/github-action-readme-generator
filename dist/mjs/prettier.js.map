{"version":3,"file":"prettier.js","sourceRoot":"","sources":["../../src/prettier.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,KAAa,EAAE,QAAiB;IAC/D,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACxC,OAAO,MAAM,CAAC,KAAK,EAAE;QACnB,IAAI,EAAE,KAAK;QACX,MAAM,EAAE,MAAM;QACd,0BAA0B,EAAE,MAAM;QAClC,GAAG,EAAE;KACN,CAAC,CAAC;AACL,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,KAAa,EAAE,QAAiB;IACnE,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACxC,OAAO,MAAM,CAAC,KAAK,EAAE;QACnB,IAAI,EAAE,KAAK;QACX,MAAM,EAAE,UAAU;QAClB,0BAA0B,EAAE,MAAM;QAClC,GAAG,EAAE;KACN,CAAC,CAAC;AACL,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,KAAyB,EACzB,OAAiB,EACjB,MAAc;IAEd,IAAI,CAAC,KAAK;QAAE,OAAO,OAAO,IAAI,EAAE,CAAC;IACjC,MAAM,kBAAkB,GAAG,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACtE,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,GAAG,MAAM,IAAI,EAAE,GAAG,kBAAkB,EAAE,EAAE;QAC3E,IAAI,EAAE,KAAK;QACX,MAAM,EAAE,MAAM;QACd,SAAS,EAAE,QAAQ;KACpB,CAAC,CAAC;IACH,OAAO,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7C,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { format } from 'prettier';\n\nexport async function formatYaml(value: string, filepath?: string): Promise<string> {\n  const fp = filepath ? { filepath } : {};\n  return format(value, {\n    semi: false,\n    parser: 'yaml',\n    embeddedLanguageFormatting: 'auto',\n    ...fp,\n  });\n}\nexport async function formatMarkdown(value: string, filepath?: string): Promise<string> {\n  const fp = filepath ? { filepath } : {};\n  return format(value, {\n    semi: false,\n    parser: 'markdown',\n    embeddedLanguageFormatting: 'auto',\n    ...fp,\n  });\n}\nexport async function wrapDescription(\n  value: string | undefined,\n  content: string[],\n  prefix: string,\n): Promise<string[]> {\n  if (!value) return content ?? [];\n  const valueWithoutPrefix = prefix ? value.replace(prefix, '') : value;\n  const formattedString = await format(`${prefix ?? ''}${valueWithoutPrefix}`, {\n    semi: false,\n    parser: 'yaml',\n    proseWrap: 'always',\n  });\n  content.push(...formattedString.split('\\n'));\n  return content;\n}\n"]}