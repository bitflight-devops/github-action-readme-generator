{"version":3,"file":"readme-generator.js","sourceRoot":"","sources":["../../src/readme-generator.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,+CAA+C;AAC/C,OAAO,KAAK,IAAI,MAAM,eAAe,CAAC;AAKtC,OAAO,aAAa,MAAM,qBAAqB,CAAC;AAGhD;;GAEG;AACH,MAAM,OAAO,eAAe;IAC1B;;OAEG;IACK,MAAM,CAAS;IAEvB;;OAEG;IACK,GAAG,CAAU;IAErB;;;;;OAKG;IACH,YAAY,MAAc,EAAE,GAAY;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAC,QAAyB;QACtC,MAAM,QAAQ,GAAyB,EAAE,CAAC;QAE1C,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;SACpD;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,cAAc,CAAC,QAA8B;QACjD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5C,MAAM,QAAQ,GAAc,EAAE,CAAC;QAE/B,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;SACjC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,QAAmB;QAChC,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE;YAC9B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACtC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SAC/D;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,mBAAoC,IAAI,CAAC,MAAM,CAAC,QAAQ;QACrE,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QAE5D,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAE9B,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;IAC/C,CAAC;CACF","sourcesContent":["/**\n * This TypeScript code imports various modules and defines a function named 'generateDocs'.\n * The function is responsible for generating documentation for the README.md file based on the provided inputs.\n * It iterates through each section defined in the 'inputs.sections' array and calls the 'updateSection' function to update the corresponding section in the README.md file.\n * If an error occurs during the update of a section, it logs the error message and stops the process.\n * Finally, it saves the updated README.md file and calls the 'save' function.\n */\n// TODO: Ask CodeWhisperer to write unit tests.\nimport * as core from '@actions/core';\n\nimport { ReadmeSection } from './constants.js';\nimport Inputs from './inputs.js';\nimport LogTask from './logtask/index.js';\nimport updateSection from './sections/index.js';\n\nexport type SectionKV = Record<string, string>;\n/**\n * Class for managing README generation.\n */\nexport class ReadmeGenerator {\n  /**\n   * The Inputs instance.\n   */\n  private inputs: Inputs;\n\n  /**\n   * The Logger instance.\n   */\n  private log: LogTask;\n\n  /**\n   * Initializes the ReadmeGenerator.\n   *\n   * @param inputs - The Inputs instance\n   * @param log - The Logger instance\n   */\n  constructor(inputs: Inputs, log: LogTask) {\n    this.inputs = inputs;\n    this.log = log;\n  }\n\n  /**\n   * Updates the README sections.\n   *\n   * @param sections - The sections array\n   * @returns Promise array of section KV objects\n   */\n  updateSections(sections: ReadmeSection[]): Promise<SectionKV>[] {\n    const promises: Promise<SectionKV>[] = [];\n\n    for (const section of sections) {\n      promises.push(updateSection(section, this.inputs));\n    }\n\n    return promises;\n  }\n\n  /**\n   * Resolves the section update promises.\n   *\n   * @param promises - The promise array\n   * @returns Promise resolving to combined sections KV\n   */\n  async resolveUpdates(promises: Promise<SectionKV>[]): Promise<SectionKV> {\n    this.log.debug('Resolving updates');\n    const results = await Promise.all(promises);\n    const sections: SectionKV = {};\n\n    for (const result of results) {\n      Object.assign(sections, result);\n    }\n\n    return sections;\n  }\n\n  /**\n   * Outputs the sections KV to GitHub output.\n   *\n   * @param sections - The sections KV\n   */\n  outputSections(sections: SectionKV): void {\n    if (process.env.GITHUB_ACTIONS) {\n      this.log.debug('Outputting sections');\n      core.setOutput('sections', JSON.stringify(sections, null, 2));\n    } else {\n      this.log.debug('Not outputting sections');\n    }\n  }\n\n  /**\n   * Generates the README documentation.\n   *\n   * @returns Promise resolving when done\n   */\n  async generate(providedSections: ReadmeSection[] = this.inputs.sections): Promise<void> {\n    const sectionPromises = this.updateSections(providedSections);\n    const sections = await this.resolveUpdates(sectionPromises);\n\n    this.outputSections(sections);\n\n    return this.inputs.readmeEditor.dumpToFile();\n  }\n}\n"]}