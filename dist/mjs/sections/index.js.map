{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/sections/index.ts"],"names":[],"mappings":"AACA,OAAO,OAAO,MAAM,qBAAqB,CAAC;AAC1C,OAAO,YAAY,MAAM,oBAAoB,CAAC;AAC9C,OAAO,cAAc,MAAM,sBAAsB,CAAC;AAClD,OAAO,iBAAiB,MAAM,yBAAyB,CAAC;AACxD,OAAO,YAAY,MAAM,oBAAoB,CAAC;AAC9C,OAAO,aAAa,MAAM,qBAAqB,CAAC;AAChD,OAAO,WAAW,MAAM,mBAAmB,CAAC;AAC5C,OAAO,WAAW,MAAM,mBAAmB,CAAC;AAE5C,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC,CAAC;AACzC,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,aAAa,CAAC,OAAe,EAAE,MAAc;IACzE,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IAC7E,IACE,CAAC,UAAU,KAAK,CAAC,CAAC,IAAI,SAAS,KAAK,CAAC,CAAC,CAAC;QACvC,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,0BAA0B,CAAC,KAAK,IAAI,EACtD;QACA,OAAO;KACR;IACD,QAAQ,OAAO,EAAE;QACf,KAAK,UAAU,CAAC,CAAC;YACf,OAAO,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACxC;QACD,KAAK,QAAQ,CAAC,CAAC;YACb,OAAO,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACtC;QACD,KAAK,OAAO,CAAC,CAAC;YACZ,OAAO,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACrC;QACD,KAAK,OAAO,CAAC,CAAC;YACZ,OAAO,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACrC;QACD,KAAK,aAAa,CAAC,CAAC;YAClB,OAAO,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SAC3C;QACD,KAAK,QAAQ,CAAC,CAAC;YACb,OAAO,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACtC;QACD,KAAK,SAAS,CAAC,CAAC;YACd,OAAO,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACvC;QACD,OAAO,CAAC,CAAC;YACP,OAAO,GAAG,CAAC,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;SAChD;KACF;AACH,CAAC","sourcesContent":["import type Inputs from '../inputs.js';\nimport LogTask from '../logtask/index.js';\nimport updateBadges from './update-badges.js';\nimport updateBranding from './update-branding.js';\nimport updateDescription from './update-description.js';\nimport updateInputs from './update-inputs.js';\nimport updateOutputs from './update-outputs.js';\nimport updateTitle from './update-title.js';\nimport updateUsage from './update-usage.js';\n\nconst log = new LogTask('updateSection');\nexport default async function updateSection(section: string, inputs: Inputs): Promise<void> {\n  const [startToken, stopToken] = inputs.readmeEditor.getTokenIndexes(section);\n  if (\n    (startToken === -1 || stopToken === -1) &&\n    ['branding', 'title'].includes(section) &&\n    inputs.config.get('branding_as_title_prefix') !== true\n  ) {\n    return;\n  }\n  switch (section) {\n    case 'branding': {\n      return updateBranding(section, inputs);\n    }\n    case 'badges': {\n      return updateBadges(section, inputs);\n    }\n    case 'usage': {\n      return updateUsage(section, inputs);\n    }\n    case 'title': {\n      return updateTitle(section, inputs);\n    }\n    case 'description': {\n      return updateDescription(section, inputs);\n    }\n    case 'inputs': {\n      return updateInputs(section, inputs);\n    }\n    case 'outputs': {\n      return updateOutputs(section, inputs);\n    }\n    default: {\n      return log.debug(`unknown section ${section}`);\n    }\n  }\n}\n"]}