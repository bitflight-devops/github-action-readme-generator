{"version":3,"file":"update-branding.js","sourceRoot":"","sources":["../../../src/sections/update-branding.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FeatherIconNames } from 'feather-icons';\n\nimport type { BrandColors } from '../constants.js';\nimport { GITHUB_ACTIONS_OMITTED_ICONS, isValidIcon, ReadmeSection } from '../constants.js';\nimport type Inputs from '../inputs.js';\nimport LogTask from '../logtask/index.js';\nimport SVGEditor from '../svg-editor.mjs';\n/**\n * Wiith thanks to\n * https://github.com/haya14busa/github-action-brandings/blob/master/main.js\n * for the urls to the branding images.\n */\n\ntype Maybe<T> = T | undefined;\n\nexport interface IBranding {\n  alt: string;\n  img: string;\n  url?: string;\n}\n\n/**\n * Generates a svg branding image.\n * example:\n * ```ts\n * generateSvgImage('/path/to/file.svg', 'home', 'red')\n * ```\n *\n * @param svgPath - The path to where the svg file will be saved\n * @param icon - The icon name from the feather-icons list\n * @param bgcolor - The background color of the circle behind the icon\n */\nexport function generateSvgImage(\n  svgPath: string,\n  icon: Partial<FeatherIconNames>,\n  bgcolor: Partial<BrandColors>,\n): void {\n  const svgEditor = new SVGEditor();\n  svgEditor.generateSvgImage(svgPath, icon, bgcolor);\n}\n\n/**\n * This function returns a valid icon name based on the provided branding.\n * If the branding is undefined or not a valid icon name, an error is thrown.\n * It checks if the branding icon is present in the GITHUB_ACTIONS_BRANDING_ICONS set,\n * and if so, returns the corresponding feather icon key array.\n * If the branding icon is present in the GITHUB_ACTIONS_OMITTED_ICONS set,\n * an error is thrown specifying that the icon is part of the omitted icons list.\n * If the branding icon is not a valid icon from the feather-icons list, an error is thrown.\n * @param brand - The branding object\n * @returns The corresponding feather icon key array\n * @throws Error if the branding icon is undefined, not a valid icon name, or part of the omitted icons list\n */\nexport function getValidIconName(icon?: Partial<FeatherIconNames>): FeatherIconNames {\n  if (!icon) {\n    throw new Error(`No valid branding icon name found: action.yml branding is undefined`);\n  }\n\n  if (isValidIcon(icon)) {\n    return icon;\n  }\n\n  if (GITHUB_ACTIONS_OMITTED_ICONS.has(icon)) {\n    throw new Error(\n      `No valid branding icon name found: ${icon} is part of the list of omitted icons. `,\n    );\n  }\n\n  throw new Error(\n    `No valid branding icon name found: ${icon} is not a valid icon from the feather-icons list`,\n  );\n}\n\n/**\n * This function generates an HTML image markup with branding information.\n * It takes inputs and an optional width parameter.\n * If the branding_svg_path is provided, it generates an action.yml branding image for the specified icon and color.\n * Otherwise, it returns an error message.\n *\n * @param inputs - The inputs instance with data for the function.\n * @param width - The width of the image (default is '15%').\n * @returns The HTML image markup with branding information or an error message.\n */\nexport function generateImgMarkup(inputs: Inputs, width = '15%'): string {\n  // Create a log task for debugging\n  const log = new LogTask('generateImgMarkup');\n  if (!inputs.action.branding) {\n    log.info('No branding section');\n    return '';\n  }\n  // Get the branding information from the inputs\n  const { icon, color } = inputs.action.branding;\n  const iconName = getValidIconName(icon);\n  const svgPath = inputs.config.get('branding_svg_path') as Maybe<string>;\n  const result = `<img src=\"${svgPath}\" width=\"${width}\" align=\"center\" alt=\"branding<icon:${iconName} color:${color}>\" />`;\n\n  if (svgPath) {\n    log.info(`Generating action.yml branding image for ${iconName}`);\n    const svg = inputs.config.get('image_generated') as Maybe<string>;\n    const hash = `${iconName}${color}`;\n    if (svg && hash.localeCompare(svg) !== 0) {\n      generateSvgImage(svgPath, iconName, color);\n      inputs.config.set('image_generated', hash);\n    }\n    return result;\n  }\n  log.error(`No branding_svg_path provided or it is empty string, can't create the file!`);\n  return `<!-- ERROR: no branding path found = ${result} -->`;\n}\n\n/**\n * This is a TypeScript function named \"updateBranding\" that takes in a sectionToken string and an object of inputs.\n * It exports the function as the default export.\n * The function logs the brand details from the inputs, starts a log task, generates image markup,\n * updates a section in the readme editor using the sectionToken and content, and logs success or failure messages.\n *\n * @param sectionToken - The sectionToken string that is used to identify the section in the readme editor.\n * @param inputs - The inputs object that contains data for the function.\n */\nexport default function updateBranding(\n  sectionToken: ReadmeSection,\n  inputs: Inputs,\n): Record<string, string> {\n  const log = new LogTask(sectionToken);\n\n  log.info(`Brand details: ${JSON.stringify(inputs.action.branding)}`);\n\n  log.start();\n  /** create <img  /> markup with an image width of 15% */\n  const imageWidth = '15%';\n  const content = generateImgMarkup(inputs, imageWidth);\n  inputs.readmeEditor.updateSection(sectionToken, content);\n  if (content && content !== '') {\n    log.success('branding svg successfully created');\n  } else {\n    log.fail('branding svg failed to be created');\n  }\n\n  const ret: Record<string, string> = {};\n  ret[sectionToken] = content;\n  return ret;\n}\n"]}