{"version":3,"file":"update-inputs.js","sourceRoot":"","sources":["../../../src/sections/update-inputs.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAExD,OAAO,OAAO,MAAM,qBAAqB,CAAC;AAC1C,OAAO,UAAU,MAAM,wBAAwB,CAAC;AAEhD,MAAM,CAAC,OAAO,UAAU,YAAY,CAAC,KAAa,EAAE,MAAc;IAChE,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/B,uBAAuB;IACvB,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,MAAM,aAAa,GAAe,EAAE,CAAC;IACrC,MAAM,UAAU,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IACnE,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE;QAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9B;IACD,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;IAClC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,EAAE,GAAG,CAAC,EAAE;QACV,GAAG,CAAC,KAAK,EAAE,CAAC;QACZ,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAEzB,IAAI,WAAW,GAAG,MAAM,EAAE,WAAW,IAAI,EAAE,CAAC;YAE5C,uEAAuE;YACvE,6CAA6C;YAC7C,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtD,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;gBAClC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;aACzC;YAED,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAEzD,MAAM,GAAG,GAAa;gBACpB,SAAS,CAAC,GAAG,CAAC;gBACd,WAAW;gBACX,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE;gBAC9C,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW;aAC5C,CAAC;YACF,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/B,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACzB;QACD,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;QACxC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;QAC5C,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAClD,GAAG,CAAC,OAAO,EAAE,CAAC;KACf;SAAM;QACL,GAAG,CAAC,KAAK,CAAC,iBAAiB,KAAK,EAAE,CAAC,CAAC;KACrC;AACH,CAAC","sourcesContent":["import { columnHeader, rowHeader } from '../helpers.js';\nimport type Inputs from '../inputs.js';\nimport LogTask from '../logtask/index.js';\nimport markdowner from '../markdowner/index.js';\n\nexport default function updateInputs(token: string, inputs: Inputs): void {\n  const log = new LogTask(token);\n  // Build the new README\n  const content: string[] = [];\n  const markdownArray: string[][] = [];\n  const titleArray = ['Input', 'Description', 'Default', 'Required'];\n  const titles: string[] = [];\n  for (const t of titleArray) {\n    titles.push(columnHeader(t));\n  }\n  markdownArray.push(titles);\n  const vars = inputs.action.inputs;\n  const tI = vars ? Object.keys(vars).length : 0;\n  if (tI > 0) {\n    log.start();\n    for (const key of Object.keys(vars)) {\n      const values = vars[key];\n\n      let description = values?.description ?? '';\n\n      // Check if only first line should be added (only subject without body)\n      // eslint-disable-next-line no-useless-escape\n      const matches = description.match('(.*?)\\n\\n([Ss]*)');\n      if (matches && matches.length >= 2) {\n        description = matches[1] || description;\n      }\n\n      description = description.trim().replace('\\n', '<br />');\n\n      const row: string[] = [\n        rowHeader(key),\n        description,\n        values?.default ? `\\`${values.default}\\`` : '',\n        values?.required ? '**true**' : '__false__',\n      ];\n      log.debug(JSON.stringify(row));\n      markdownArray.push(row);\n    }\n    content.push(markdowner(markdownArray));\n    log.info(`Action has ${tI} total ${token}`);\n    inputs.readmeEditor.updateSection(token, content);\n    log.success();\n  } else {\n    log.debug(`Action has no ${token}`);\n  }\n}\n"]}