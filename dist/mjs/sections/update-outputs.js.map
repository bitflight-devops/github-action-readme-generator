{"version":3,"file":"update-outputs.js","sourceRoot":"","sources":["../../../src/sections/update-outputs.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAExD,OAAO,OAAO,MAAM,qBAAqB,CAAC;AAC1C,OAAO,UAAU,MAAM,wBAAwB,CAAC;AAEhD,MAAM,CAAC,OAAO,UAAU,aAAa,CACnC,YAA2B,EAC3B,MAAc;IAEd,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,YAAY,CAAC,CAAC;IAEtC,uBAAuB;IACvB,MAAM,OAAO,GAAa,EAAE,CAAC;IAE7B,MAAM,aAAa,GAAe,EAAE,CAAC;IACrC,MAAM,UAAU,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE;QAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9B;IACD,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;IACnC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,IAAI,IAAI,EAAE,GAAG,CAAC,EAAE;QAClB,GAAG,CAAC,KAAK,EAAE,CAAC;QACZ,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAEzB,IAAI,WAAW,GAAG,MAAM,EAAE,WAAW,IAAI,EAAE,CAAC;YAE5C,uEAAuE;YAEvE,MAAM,OAAO,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACrD,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;gBAClC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;aACzC;YAED,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACzD,MAAM,GAAG,GAAa,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC;YAEpD,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/B,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACzB;QACD,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;QACxC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,YAAY,EAAE,CAAC,CAAC;QACnD,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QACzD,GAAG,CAAC,OAAO,EAAE,CAAC;KACf;SAAM;QACL,GAAG,CAAC,KAAK,CAAC,iBAAiB,YAAY,EAAE,CAAC,CAAC;KAC5C;IACD,MAAM,GAAG,GAA2B,EAAE,CAAC;IACvC,GAAG,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["/**\n * This TypeScript code exports a function named 'updateOutputs' which takes a sectionToken (string) and an instance of the 'Inputs' class as its parameters.\n * The function is responsible for updating the outputs section in the README.md file based on the provided inputs.\n * It utilizes the 'LogTask' class for logging purposes, 'columnHeader' and 'rowHeader' functions from '../helpers.js' for formatting table headers, and 'markdowner' function from '../markdowner/index.js' for generating markdown content.\n * @param {string} sectionToken - The sectionToken used for identifying the section.\n * @param {Inputs} inputs - The Inputs class instance.\n */\nimport { ReadmeSection } from '../constants.js';\nimport { columnHeader, rowHeader } from '../helpers.js';\nimport type Inputs from '../inputs.js';\nimport LogTask from '../logtask/index.js';\nimport markdowner from '../markdowner/index.js';\n\nexport default function updateOutputs(\n  sectionToken: ReadmeSection,\n  inputs: Inputs,\n): Record<string, string> {\n  const log = new LogTask(sectionToken);\n\n  // Build the new README\n  const content: string[] = [];\n\n  const markdownArray: string[][] = [];\n  const titleArray = ['Output', 'Description'];\n  const titles: string[] = [];\n  for (const t of titleArray) {\n    titles.push(columnHeader(t));\n  }\n  markdownArray.push(titles);\n  const vars = inputs.action.outputs;\n  const tI = vars ? Object.keys(vars).length : 0;\n  if (vars && tI > 0) {\n    log.start();\n    for (const key of Object.keys(vars)) {\n      const values = vars[key];\n\n      let description = values?.description ?? '';\n\n      // Check if only first line should be added (only subject without body)\n\n      const matches = /(.*?)\\n\\n([Ss]*)/.exec(description);\n      if (matches && matches.length >= 2) {\n        description = matches[1] || description;\n      }\n\n      description = description.trim().replace('\\n', '<br />');\n      const row: string[] = [rowHeader(key), description];\n\n      log.debug(JSON.stringify(row));\n      markdownArray.push(row);\n    }\n    content.push(markdowner(markdownArray));\n    log.info(`Action has ${tI} total ${sectionToken}`);\n    inputs.readmeEditor.updateSection(sectionToken, content);\n    log.success();\n  } else {\n    log.debug(`Action has no ${sectionToken}`);\n  }\n  const ret: Record<string, string> = {};\n  ret[sectionToken] = content.join('\\n');\n  return ret;\n}\n"]}