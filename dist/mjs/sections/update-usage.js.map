{"version":3,"file":"update-usage.js","sourceRoot":"","sources":["../../../src/sections/update-usage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,MAAM,eAAe,CAAC;AAExD,OAAO,OAAO,MAAM,qBAAqB,CAAC;AAC1C,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AAEjD,MAAM,CAAC,OAAO,UAAU,WAAW,CAAC,KAAa,EAAE,MAAc;IAC/D,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/B,GAAG,CAAC,KAAK,EAAE,CAAC;IACZ,MAAM,UAAU,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAW,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;IAC1F,GAAG,CAAC,IAAI,CAAC,gBAAgB,UAAU,EAAE,CAAC,CAAC;IACvC,MAAM,aAAa,GAAW,uBAAuB,CAAC,MAAM,CAAC,CAAC;IAE9D,GAAG,CAAC,IAAI,CAAC,mBAAmB,aAAa,EAAE,CAAC,CAAC;IAE7C,MAAM,eAAe,GAAG,GAAG,UAAU,IAAI,aAAa,EAAE,CAAC;IAEzD,IAAI,CAAC,eAAe,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;KAChE;IAED,uBAAuB;IACvB,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,8BAA8B;IAC9B,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,eAAe,EAAE,EAAE,SAAS,CAAC,CAAC;IAEjE,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;IACjC,IAAI,UAAU,GAAG,IAAI,CAAC;IACtB,IAAI,GAAG,EAAE;QACP,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAClC,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;YACvB,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,4BAA4B;gBAC5B,IAAI,CAAC,UAAU,EAAE;oBACf,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBAClB;gBAED,wDAAwD;gBACxD,eAAe,CAAC,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAEtD,IAAI,KAAK,CAAC,OAAO,KAAK,SAAS,EAAE;oBAC/B,kDAAkD;oBAClD,IAAI,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;wBACnD,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACvB;oBAED,UAAU;oBACV,OAAO,CAAC,IAAI,CAAC,kBAAkB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;iBACjD;gBAED,aAAa;gBACb,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC;gBAE/B,UAAU,GAAG,KAAK,CAAC;aACpB;SACF;KACF;IAED,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEtB,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAClD,GAAG,CAAC,OAAO,EAAE,CAAC;AAChB,CAAC","sourcesContent":["import { getCurrentVersionString } from '../helpers.js';\nimport type Inputs from '../inputs.js';\nimport LogTask from '../logtask/index.js';\nimport { wrapDescription } from '../prettier.js';\n\nexport default function updateUsage(token: string, inputs: Inputs): void {\n  const log = new LogTask(token);\n  log.start();\n  const actionName = `${inputs.config.get('owner') as string}/${inputs.config.get('repo')}`;\n  log.info(`Action name: ${actionName}`);\n  const versionString: string = getCurrentVersionString(inputs);\n\n  log.info(`Version string: ${versionString}`);\n\n  const actionReference = `${actionName}@${versionString}`;\n\n  if (!actionReference) {\n    throw new Error('Parameter actionReference must not be empty');\n  }\n\n  // Build the new README\n  const content: string[] = [];\n  // Build the new usage section\n  content.push('```yaml', `- uses: ${actionReference}`, '  with:');\n\n  const inp = inputs.action.inputs;\n  let firstInput = true;\n  if (inp) {\n    for (const key of Object.keys(inp)) {\n      const input = inp[key];\n      if (input !== undefined) {\n        // Line break between inputs\n        if (!firstInput) {\n          content.push('');\n        }\n\n        // Constrain the width of the description, and append it\n        wrapDescription(input.description, content, '    # ');\n\n        if (input.default !== undefined) {\n          // Append blank line if description had paragraphs\n          if (input.description?.trimEnd().match(/\\n *\\r?\\n/)) {\n            content.push('    #');\n          }\n\n          // Default\n          content.push(`    # Default: ${input.default}`);\n        }\n\n        // Input name\n        content.push(`    ${key}: ''`);\n\n        firstInput = false;\n      }\n    }\n  }\n\n  content.push('```\\n');\n\n  inputs.readmeEditor.updateSection(token, content);\n  log.success();\n}\n"]}